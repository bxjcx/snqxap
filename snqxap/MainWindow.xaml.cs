using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Interop;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;


namespace snqxap
{

    /// <summary>
    /// MainWindow.xaml 的交互逻辑
    /// </summary>
    public partial class MainWindow : Window
    {



        /// <summary>
        /// 枪娘总数
        /// </summary>
        public const int GUN_NUMBER = 174;
        /// <summary>
        /// 装备总数
        /// </summary>
        public const int EQUIP_NUMBER = 73;

        public const int FAIRY_NUMBER = 19;

        public const int FAIRY_TALENT_NUMBER = 19;
        /// <summary>
        /// 0-3 外骨骼 4-7 穿甲弹 8-11 高速弹 12-15 光学瞄具 16-19 全息 20-23 红点 24-27夜视 28五星穿甲 29五星夜视
        /// AR 全息/光喵/ACOG/夜视 高速弹 外骨 smg 外骨 空 全息/光喵/ACOG/夜视
        /// RF 穿甲 全息/光喵/ACOG 空 MG 穿甲 全息/光喵/ACOG 空 HG 夜视 空 外骨
        /// </summary>
        Equip[] equip = new Equip[EQUIP_NUMBER];
        Gun[] gun = new Gun[GUN_NUMBER + 1]; //存枪娘数据
        GunGrid[] gg = new GunGrid[9];//存九宫格buff加成
        Double[] skillupdamage = new Double[9];//存九宫格技能加成
        Double[] skilldamageagain = new Double[9];
        Double[] skilluphit = new Double[9];
        Double[] skillupshotspeed = new Double[9];
        Double[] skilluparmor = new Double[9];
        Double[] skillupdodge = new Double[9];
        Double[] skillupcrit = new Double[9];
        Double[] skillupbelt = new Double[9];
        Double[] skillupnegev = new Double[9];
        Double[] skilltime = new Double[9];
        Double[] skilluprenju = new Double[9];
        Double[] skillupboom = new Double[9];
        Double[] skillsolidmultiple = new Double[9];
        int[] skilltarget = new int[9];
        int[] equipdamage = new int[9];
        int[] equiphit = new int[9];
        int[] equipshotspeed = new int[9];
        int[] equipdodge = new int[9];
        int[] equipbelt = new int[9];
        int[] equiparmor = new int[9];
        bool[] equiprifledslug = new bool[9];  //独头弹
        double[] equipcritharm = new double[9];
        double[] equipcrit = new double[9];
        double[] equipnightsee = new double[9];
        int[] equipbreakarmor = new int[9];
        double skilldowndodge;//对敌人技能debuff
        double skilldownhit;
        double skilldowndamage;
        double fairydowndamage;
        int[] lastgunindex = new int[9];//存上次格内枪娘
        int howmany;//计算在场枪娘数用
        bool innight;
        bool[] isfullcrit = new bool[9];
        double[] multiple = new double[9];
        double[] merry = new double[9];
        double[] Soliddamage = new double[9];
        int ump40skillclose = 0;
        int ump40skillopen = 0;
        List<Border>[] gridlist = new List<Border>[9];
        Fairy[] fairy = new Fairy[FAIRY_NUMBER + 1];
        FairyTalent[] fairytalent = new FairyTalent[FAIRY_TALENT_NUMBER + 1];
        Boolean zhedie = true;
        Boolean fairyzhedie = true;
        double shield = 0;

        float[] equipupRatio = { };



        public static readonly float[][] arrAbilityRatio = new float[][]  //各类枪娘属性成长基础
{
    new float[] //lift,pow,rate,speed,hit,dodge,armor
    {
        1f,1f,1f,1f,1f,1f,1f,0f
    },
      new float[]   //凑数
      {
        1f,1f,1f,1f,1f,1f,1f,0f
    },
        new float[]   //2 ar 3 smg 4 hg 5 rf 6 mg 7 sg   
	{
          1f,
        1f,
        1f,
        1f,
        1f,
        1f,
        0f
    },
    new float[]
    {
        1.6f,
        0.6f,
        1.2f,
        1.2f,
        0.3f,
        1.6f,
        0f
    },
    new float[]
    {
         0.6f,
        0.6f,
        0.8f,
        1.5f,
        1.2f,
        1.8f,
        0f

    },
    new float[]
    {
          0.8f,
        2.4f,
        0.5f,
        0.7f,
        1.6f,
        0.8f,
        0f
    },
    new float[]
    {
        1.5f,
        1.8f,
        1.6f,
        0.4f,
        0.6f,
        0.6f,
        0f
    },
    new float[]
    {
        2.0f,
        0.7f,
        0.4f,
        0.6f,
        0.3f,
        0.3f,
        1.0f
    }
};

        public MainWindow()
        {

            InitializeComponent();

            this.SourceInitialized += delegate (object sender, EventArgs e)
            {
                this._HwndSource = PresentationSource.FromVisual((Visual)sender) as HwndSource;
            };
            this.MouseMove += new MouseEventHandler(Window_MouseMove);
            baka();

            Combo0.SelectedIndex = GUN_NUMBER;
            renewindex(0);
            Combo1.SelectedIndex = GUN_NUMBER;
            renewindex(1);
            Combo2.SelectedIndex = GUN_NUMBER;
            renewindex(2);
            Combo3.SelectedIndex = GUN_NUMBER;
            renewindex(3);
            Combo4.SelectedIndex = GUN_NUMBER;
            renewindex(4);
            Combo5.SelectedIndex = GUN_NUMBER;
            renewindex(5);
            Combo6.SelectedIndex = GUN_NUMBER;
            renewindex(6);
            Combo7.SelectedIndex = GUN_NUMBER;
            renewindex(7);
            Combo8.SelectedIndex = GUN_NUMBER;
            renewindex(8);

            rb0.IsChecked = false;
            rb1.IsChecked = false;
            rb2.IsChecked = false;
            rb3.IsChecked = false;
            rb4.IsChecked = false;
            rb5.IsChecked = false;
            rb6.IsChecked = false;
            rb7.IsChecked = false;
            rb8.IsChecked = false;

            tank.Content = 0;
            enemydodge.Text = "10";
            enemyhit.Text = "20";
            enemydamage.Text = "1";

            rbf0.IsChecked = false;
            rbf1.IsChecked = false;
            rbf2.IsChecked = false;
            rbf3.IsChecked = false;
            rbf4.IsChecked = false;
            rbf5.IsChecked = false;
            rbf6.IsChecked = false;
            rbf7.IsChecked = false;
            rbf8.IsChecked = false;

            ftank.Content = 0;

            cb0.IsChecked = false;
            cb1.IsChecked = false;
            cb2.IsChecked = false;
            cb3.IsChecked = false;
            cb4.IsChecked = false;
            cb5.IsChecked = false;
            cb6.IsChecked = false;
            cb7.IsChecked = false;
            cb8.IsChecked = false;

            Lbreakarmor0.Content = equipbreakarmor[0];
            Lbreakarmor1.Content = equipbreakarmor[1];
            Lbreakarmor2.Content = equipbreakarmor[2];
            Lbreakarmor3.Content = equipbreakarmor[3];
            Lbreakarmor4.Content = equipbreakarmor[4];
            Lbreakarmor5.Content = equipbreakarmor[5];
            Lbreakarmor6.Content = equipbreakarmor[6];
            Lbreakarmor7.Content = equipbreakarmor[7];
            Lbreakarmor8.Content = equipbreakarmor[8];
        }

        /// <summary>
        /// 获取更新urll内容
        /// </summary>
        /// <param name="url">url</param>
        /// <returns></returns>
        public string Get(string url)
        {
            if (string.IsNullOrEmpty(url))
            {
                throw new ArgumentNullException("url");
            }

            HttpWebRequest request = WebRequest.Create(url) as HttpWebRequest;
            request.Method = "GET";
            request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36";
            request.Timeout = 5000;

            try
            {
                Stream stream = request.GetResponse().GetResponseStream();
                StreamReader sr = new StreamReader(stream, Encoding.UTF8);
                string strContent = sr.ReadToEnd();
                return strContent;
            }
            catch
            {
                return "";
            }
        }

        /// <summary>
        /// 初始化数据，别问我为什么叫这个名字
        /// </summary>
        public void baka()
        {

            howmany = 0;

            for (int i = 0; i < GUN_NUMBER + 1; i++)
                gun[i] = new Gun();

            gun[14].name = "汤姆森"; gun[14].what = 3; gun[14].crit = 0.05; gun[14].belt = 0;
            gun[26].name = "司登MkⅡ"; gun[26].what = 3; gun[26].crit = 0.05; gun[26].belt = 0;
            gun[91].name = "UMP9"; gun[91].what = 3; gun[91].crit = 0.05; gun[91].belt = 0;
            gun[18].name = "Vector"; gun[18].what = 3; gun[18].crit = 0.05; gun[18].belt = 0;
            gun[25].name = "蝎式"; gun[25].what = 3; gun[25].crit = 0.05; gun[25].belt = 0;
            gun[15].name = "M3"; gun[15].what = 3; gun[15].crit = 0.05; gun[15].belt = 0;
            gun[83].name = "IDW"; gun[83].what = 3; gun[83].crit = 0.05; gun[83].belt = 0;
            gun[28].name = "微型乌兹"; gun[28].what = 3; gun[28].crit = 0.05; gun[28].belt = 0;
            gun[17].name = "FMG-9"; gun[17].what = 3; gun[17].crit = 0.05; gun[17].belt = 0;
            gun[16].name = "MAC-10"; gun[16].what = 3; gun[16].crit = 0.05; gun[16].belt = 0;
            gun[29].name = "M45"; gun[29].what = 3; gun[29].crit = 0.05; gun[29].belt = 0;
            gun[82].name = "Spectre M4"; gun[82].what = 3; gun[82].crit = 0.05; gun[82].belt = 0;
            gun[20].name = "PPS-43"; gun[20].what = 3; gun[20].crit = 0.05; gun[20].belt = 0;
            gun[22].name = "PP-2000"; gun[22].what = 3; gun[22].crit = 0.05; gun[22].belt = 0;
            gun[24].name = "MP5"; gun[24].what = 3; gun[24].crit = 0.05; gun[24].belt = 0;
            gun[27].name = "伯莱塔38型"; gun[27].what = 3; gun[27].crit = 0.05; gun[27].belt = 0;
            gun[23].name = "MP40"; gun[23].what = 3; gun[23].crit = 0.05; gun[23].belt = 0;
            gun[19].name = "PPSh-41"; gun[19].what = 3; gun[19].crit = 0.05; gun[19].belt = 0;
            gun[84].name = "64式"; gun[84].what = 3; gun[84].crit = 0.05; gun[84].belt = 0;
            gun[92].name = "UMP45"; gun[92].what = 3; gun[92].crit = 0.05; gun[92].belt = 0;
            gun[104].name = "索米"; gun[104].what = 3; gun[104].crit = 0.05; gun[104].belt = 0;
            gun[94].name = "OTs-12"; gun[94].what = 2; gun[94].crit = 0.2; gun[94].belt = 0;
            gun[58].name = "G36"; gun[58].what = 2; gun[58].crit = 0.2; gun[58].belt = 0;
            gun[95].name = "FAL"; gun[95].what = 2; gun[95].crit = 0.2; gun[95].belt = 0;
            gun[59].name = "HK416"; gun[59].what = 2; gun[59].crit = 0.2; gun[59].belt = 0;
            gun[56].name = "G41"; gun[56].what = 2; gun[56].crit = 0.2; gun[56].belt = 0;
            gun[60].name = "56-1式"; gun[60].what = 2; gun[60].crit = 0.2; gun[60].belt = 0;
            gun[50].name = "M4A1"; gun[50].what = 2; gun[50].crit = 0.2; gun[50].belt = 0;
            gun[49].name = "M16A1"; gun[49].what = 2; gun[49].crit = 0.2; gun[49].belt = 0;
            gun[52].name = "ST AR-15"; gun[52].what = 2; gun[52].crit = 0.2; gun[52].belt = 0;
            gun[62].name = "FAMAS"; gun[62].what = 2; gun[62].crit = 0.2; gun[62].belt = 0;
            gun[53].name = "AK-47"; gun[53].what = 2; gun[53].crit = 0.2; gun[53].belt = 0;
            gun[55].name = "StG44"; gun[55].what = 2; gun[55].crit = 0.2; gun[55].belt = 0;
            gun[97].name = "CZ-805"; gun[97].what = 2; gun[97].crit = 0.2; gun[97].belt = 0;
            gun[51].name = "M4 SOPMODII"; gun[51].what = 2; gun[51].crit = 0.2; gun[51].belt = 0;
            gun[65].name = "TAR-21"; gun[65].what = 2; gun[65].crit = 0.2; gun[65].belt = 0;
            gun[64].name = "加利尔"; gun[64].what = 2; gun[64].crit = 0.2; gun[64].belt = 0;
            gun[66].name = "SIG-510"; gun[66].what = 2; gun[66].crit = 0.2; gun[66].belt = 0;
            gun[57].name = "G3"; gun[57].what = 2; gun[57].crit = 0.2; gun[57].belt = 0;
            gun[96].name = "F2000"; gun[96].what = 2; gun[96].crit = 0.2; gun[96].belt = 0;
            gun[63].name = "FNC"; gun[63].what = 2; gun[63].crit = 0.2; gun[63].belt = 0;
            gun[61].name = "L85A1"; gun[61].what = 2; gun[61].crit = 0.2; gun[61].belt = 0;
            gun[107].name = "9a-91"; gun[107].what = 2; gun[107].crit = 0.2; gun[107].belt = 0;
            gun[54].name = "AS Val"; gun[54].what = 2; gun[54].crit = 0.2; gun[54].belt = 0;
            gun[103].name = "维尔德MkⅡ"; gun[103].what = 4; gun[103].crit = 0.4; gun[103].belt = 0;
            gun[3].name = "纳甘左轮"; gun[3].what = 4; gun[3].crit = 0.2; gun[3].belt = 0;
            gun[0].name = "柯尔特左轮"; gun[0].what = 4; gun[0].crit = 0.2; gun[0].belt = 0;
            gun[86].name = "灰熊MkⅤ"; gun[86].what = 4; gun[86].crit = 0.2; gun[86].belt = 0;
            gun[4].name = "托卡列夫"; gun[4].what = 4; gun[4].crit = 0.2; gun[4].belt = 0;
            gun[13].name = "格洛克17"; gun[13].what = 4; gun[13].crit = 0.2; gun[13].belt = 0;
            gun[6].name = "马卡洛夫"; gun[6].what = 4; gun[6].crit = 0.2; gun[6].belt = 0;
            gun[5].name = "斯捷奇金"; gun[5].what = 4; gun[5].crit = 0.2; gun[5].belt = 0;
            gun[12].name = "阿斯特拉左轮"; gun[12].what = 4; gun[12].crit = 0.2; gun[12].belt = 0;
            gun[9].name = "P08"; gun[9].what = 4; gun[9].crit = 0.2; gun[9].belt = 0;
            gun[89].name = "Mk23"; gun[89].what = 4; gun[89].crit = 0.2; gun[89].belt = 0;
            gun[1].name = "M1911"; gun[1].what = 4; gun[1].crit = 0.2; gun[1].belt = 0;
            gun[8].name = "PPK"; gun[8].what = 4; gun[8].crit = 0.2; gun[8].belt = 0;
            gun[10].name = "C96"; gun[10].what = 4; gun[10].crit = 0.2; gun[10].belt = 0;
            gun[87].name = "M950A"; gun[87].what = 4; gun[87].crit = 0.2; gun[87].belt = 0;
            gun[7].name = "P38"; gun[7].what = 4; gun[7].crit = 0.2; gun[7].belt = 0;
            gun[2].name = "M9"; gun[2].what = 4; gun[2].crit = 0.2; gun[2].belt = 0;
            gun[90].name = "P7"; gun[90].what = 4; gun[90].crit = 0.2; gun[90].belt = 0;
            gun[11].name = "92式"; gun[11].what = 4; gun[11].crit = 0.2; gun[11].belt = 0;
            gun[80].name = "FNP-9"; gun[80].what = 4; gun[80].crit = 0.2; gun[80].belt = 0;
            gun[81].name = "MP-446"; gun[81].what = 4; gun[81].crit = 0.2; gun[81].belt = 0;
            gun[37].name = "西蒙诺夫"; gun[37].what = 5; gun[37].crit = 0.4; gun[37].belt = 0;
            gun[46].name = "FN-49"; gun[46].what = 5; gun[46].crit = 0.4; gun[46].belt = 0;
            gun[45].name = "李-恩菲尔德"; gun[45].what = 5; gun[45].crit = 0.4; gun[45].belt = 0;
            gun[48].name = "NTW-20"; gun[48].what = 5; gun[48].crit = 0.4; gun[48].belt = 0;
            gun[38].name = "PTRD"; gun[38].what = 5; gun[38].crit = 0.4; gun[38].belt = 0;
            gun[36].name = "SVT-38"; gun[36].what = 5; gun[36].crit = 0.4; gun[36].belt = 0;
            gun[43].name = "WA2000"; gun[43].what = 5; gun[43].crit = 0.4; gun[43].belt = 0;
            gun[33].name = "M14"; gun[33].what = 5; gun[33].crit = 0.4; gun[33].belt = 0;
            gun[34].name = "M21"; gun[34].what = 5; gun[34].crit = 0.4; gun[34].belt = 0;
            gun[47].name = "BM59"; gun[47].what = 5; gun[47].crit = 0.4; gun[47].belt = 0;
            gun[30].name = "M1加兰德"; gun[30].what = 5; gun[30].crit = 0.4; gun[30].belt = 0;
            gun[40].name = "SV-98"; gun[40].what = 5; gun[40].crit = 0.4; gun[40].belt = 0;
            gun[42].name = "G43"; gun[42].what = 5; gun[42].crit = 0.4; gun[42].belt = 0;
            gun[85].name = "汉阳造88式"; gun[85].what = 5; gun[85].crit = 0.4; gun[85].belt = 0;
            gun[41].name = "Kar98k"; gun[41].what = 5; gun[41].crit = 0.4; gun[41].belt = 0;
            gun[35].name = "莫辛-纳甘"; gun[35].what = 5; gun[35].crit = 0.4; gun[35].belt = 0;
            gun[32].name = "春田"; gun[32].what = 5; gun[32].crit = 0.4; gun[32].belt = 0;
            gun[69].name = "M60"; gun[69].what = 6; gun[69].crit = 0.05; gun[69].belt = 9;
            gun[98].name = "MG5"; gun[98].what = 6; gun[98].crit = 0.05; gun[98].belt = 11;
            gun[67].name = "M1918"; gun[67].what = 6; gun[67].crit = 0.05; gun[67].belt = 8;
            gun[78].name = "MG3"; gun[78].what = 6; gun[78].crit = 0.05; gun[78].belt = 10;
            gun[71].name = "M1919A4"; gun[71].what = 6; gun[71].crit = 0.05; gun[71].belt = 9;
            gun[75].name = "PK"; gun[75].what = 6; gun[75].crit = 0.05; gun[75].belt = 11;
            gun[101].name = "内格夫"; gun[101].what = 6; gun[101].crit = 0.05; gun[101].belt = 9;
            gun[74].name = "RPD"; gun[74].what = 6; gun[74].crit = 0.05; gun[74].belt = 8;
            gun[68].name = "M2HB"; gun[68].what = 6; gun[68].crit = 0.05; gun[68].belt = 10;
            gun[72].name = "LWMMG"; gun[72].what = 6; gun[72].crit = 0.05; gun[72].belt = 9;
            gun[70].name = "M249 SAW"; gun[70].what = 6; gun[70].crit = 0.05; gun[70].belt = 8;
            gun[100].name = "AAT-52"; gun[100].what = 6; gun[100].crit = 0.05; gun[100].belt = 10;
            gun[73].name = "DP28"; gun[73].what = 6; gun[73].crit = 0.05; gun[73].belt = 9;
            gun[76].name = "MG42"; gun[76].what = 6; gun[76].crit = 0.05; gun[76].belt = 10;
            gun[77].name = "MG34"; gun[77].what = 6; gun[77].crit = 0.05; gun[77].belt = 10;
            gun[79].name = "布伦"; gun[79].what = 6; gun[79].crit = 0.05; gun[79].belt = 8;
            gun[99].name = "FG42"; gun[99].what = 6; gun[99].crit = 0.05; gun[99].belt = 8;
            gun[110].name = "MK48"; gun[110].what = 6; gun[110].crit = 0.05; gun[110].belt = 10;
            gun[102].name = "谢尔久科夫"; gun[102].what = 4; gun[102].crit = 0.2; gun[102].belt = 0;

            gun[44].name = "56式半"; gun[44].what = 5; gun[44].crit = 0.4; gun[44].belt = 0;
            gun[44].eatratio = 110; gun[44].ratiododge = 115; gun[44].ratiohit = 105; gun[44].ratiohp = 105; gun[44].ratiopow = 100; gun[44].ratiorate = 110;

            gun[88].name = "SPP-1"; gun[88].what = 4; gun[88].crit = 0.2; gun[88].belt = 0;
            gun[88].eatratio = 135; gun[88].ratiododge = 90; gun[88].ratiohit = 110; gun[88].ratiohp = 115; gun[88].ratiopow = 115; gun[88].ratiorate = 85;

            gun[105].name = "Z-62"; gun[105].what = 3; gun[105].crit = 0.05; gun[105].belt = 0;
            gun[105].eatratio = 120; gun[105].ratiododge = 115; gun[105].ratiohit = 120; gun[105].ratiohp = 95; gun[105].ratiopow = 95; gun[105].ratiorate = 95;

            gun[106].name = "PSG-1"; gun[106].what = 5; gun[106].crit = 0.4; gun[106].belt = 0;
            gun[106].eatratio = 105; gun[106].ratiododge = 85; gun[106].ratiohit = 125; gun[106].ratiohp = 105; gun[106].ratiopow = 120; gun[106].ratiorate = 120;

            gun[108].name = "OTs-14"; gun[108].what = 2; gun[108].crit = 0.2; gun[108].belt = 0;
            gun[108].eatratio = 125; gun[108].ratiododge = 125; gun[108].ratiohit = 125; gun[108].ratiohp = 100; gun[108].ratiopow = 105; gun[108].ratiorate = 110;

            gun[109].name = "ARX-160"; gun[109].what = 2; gun[109].crit = 0.2; gun[109].belt = 0;
            gun[109].eatratio = 115; gun[109].ratiododge = 120; gun[109].ratiohit = 120; gun[109].ratiohp = 90; gun[109].ratiopow = 110; gun[109].ratiorate = 110;

            gun[111].name = "G11"; gun[111].what = 2; gun[111].crit = 0.2; gun[111].belt = 0;
            gun[111].eatratio = 110; gun[111].ratiododge = 105; gun[111].ratiohit = 115; gun[111].ratiohp = 110; gun[111].ratiopow = 100; gun[111].ratiorate = 145;

            gun[113].name = "Super SASS"; gun[113].what = 5; gun[113].crit = 0.4; gun[113].belt = 0;
            gun[113].eatratio = 105; gun[113].ratiododge = 90; gun[113].ratiohit = 110; gun[113].ratiohp = 100; gun[113].ratiopow = 115; gun[113].ratiorate = 120;

            gun[39].name = "SVD"; gun[39].what = 5; gun[39].crit = 0.4; gun[39].belt = 0;
            gun[39].eatratio = 120; gun[39].ratiododge = 100; gun[39].ratiohit = 120; gun[39].ratiohp = 90; gun[39].ratiopow = 120; gun[39].ratiorate = 110;

            gun[112].name = "P99"; gun[112].what = 4; gun[112].crit = 0.2; gun[112].belt = 0;
            gun[112].eatratio = 110; gun[112].ratiododge = 125; gun[112].ratiohit = 120; gun[112].ratiohp = 90; gun[112].ratiopow = 115; gun[112].ratiorate = 115;

            gun[114].name = "MG4"; gun[114].what = 6; gun[114].crit = 0.05; gun[114].belt = 9;
            gun[114].eatratio = 135; gun[114].ratiododge = 120; gun[114].ratiohit = 120; gun[114].ratiohp = 110; gun[114].ratiopow = 95; gun[114].ratiorate = 125;

            gun[93].name = "G36C"; gun[93].what = 3; gun[93].crit = 0.05; gun[93].belt = 0;
            gun[93].eatratio = 95; gun[93].ratiododge = 120; gun[93].ratiohit = 120; gun[93].ratiohp = 115; gun[93].ratiopow = 135; gun[93].ratiorate = 110;

            gun[115].name = "NZ75"; gun[115].what = 4; gun[115].crit = 0.2; gun[115].belt = 0;
            gun[115].eatratio = 125; gun[115].ratiododge = 95; gun[115].ratiohit = 120; gun[115].ratiohp = 110; gun[115].ratiopow = 115; gun[115].ratiorate = 115;

            gun[116].name = "79式"; gun[116].what = 3; gun[116].crit = 0.05; gun[116].belt = 0;
            gun[116].eatratio = 100; gun[116].ratiododge = 125; gun[116].ratiohit = 110; gun[116].ratiohp = 110; gun[116].ratiopow = 130; gun[116].ratiorate = 115;

            gun[117].name = "M99"; gun[117].what = 5; gun[117].crit = 0.4; gun[117].belt = 0;
            gun[117].eatratio = 135; gun[117].ratiododge = 85; gun[117].ratiohit = 110; gun[117].ratiohp = 100; gun[117].ratiopow = 135; gun[117].ratiorate = 90;

            gun[118].name = "95式"; gun[118].what = 2; gun[118].crit = 0.2; gun[118].belt = 0;
            gun[118].eatratio = 120; gun[118].ratiododge = 110; gun[118].ratiohit = 120; gun[118].ratiohp = 105; gun[118].ratiopow = 120; gun[118].ratiorate = 105;

            gun[119].name = "97式"; gun[119].what = 2; gun[119].crit = 0.2; gun[119].belt = 0;
            gun[119].eatratio = 125; gun[119].ratiododge = 105; gun[119].ratiohit = 120; gun[119].ratiohp = 105; gun[119].ratiopow = 115; gun[119].ratiorate = 105;

            gun[120].name = "EVO 3"; gun[120].what = 3; gun[120].crit = 0.05; gun[120].belt = 0;
            gun[120].eatratio = 105; gun[120].ratiododge = 115; gun[120].ratiohit = 115; gun[120].ratiohp = 110; gun[120].ratiopow = 90; gun[120].ratiorate = 120;

            gun[31].name = "M1A1"; gun[31].what = 5; gun[31].crit = 0.4; gun[31].belt = 0;
            gun[31].eatratio = 115; gun[31].ratiododge = 130; gun[31].ratiohit = 120; gun[31].ratiohp = 95; gun[31].ratiopow = 90; gun[31].ratiorate = 115;

            gun[121].name = "59式"; gun[121].what = 4; gun[121].crit = 0.2; gun[121].belt = 0;
            gun[121].eatratio = 130; gun[121].ratiododge = 120; gun[121].ratiohit = 115; gun[121].ratiohp = 90; gun[121].ratiopow = 95; gun[121].ratiorate = 110;

            gun[122].name = "63式"; gun[122].what = 2; gun[122].crit = 0.2; gun[122].belt = 0;
            gun[122].eatratio = 115; gun[122].ratiododge = 100; gun[122].ratiohit = 100; gun[122].ratiohp = 90; gun[122].ratiopow = 115; gun[122].ratiorate = 110;

            gun[123].name = "AR70"; gun[123].what = 2; gun[123].crit = 0.2; gun[123].belt = 0;
            gun[123].eatratio = 120; gun[123].ratiododge = 100; gun[123].ratiohit = 105; gun[123].ratiohp = 100; gun[123].ratiopow = 110; gun[123].ratiorate = 105;

            gun[125].name = "PP-19"; gun[125].what = 3; gun[125].crit = 0.05; gun[125].belt = 0;
            gun[125].eatratio = 110; gun[125].ratiododge = 120; gun[125].ratiohit = 115; gun[125].ratiohp = 100; gun[125].ratiopow = 95; gun[125].ratiorate = 115;

            gun[124].name = "SR-3MP"; gun[124].what = 3; gun[124].crit = 0.05; gun[124].belt = 0;
            gun[124].eatratio = 95; gun[124].ratiododge = 125; gun[124].ratiohit = 115; gun[124].ratiohp = 110; gun[124].ratiopow = 130; gun[124].ratiorate = 120;

            gun[21].name = "PP-90"; gun[21].what = 3; gun[21].crit = 0.05; gun[21].belt = 0;
            gun[21].eatratio = 120; gun[21].ratiododge = 130; gun[21].ratiohit = 100; gun[21].ratiohp = 90; gun[21].ratiopow = 90; gun[21].ratiorate = 120;


            gun[126].name = "6P62"; gun[126].what = 2; gun[126].crit = 0.2; gun[126].belt = 0;
            gun[126].eatratio = 125; gun[126].ratiododge = 75; gun[126].ratiohit = 85; gun[126].ratiohp = 110; gun[126].ratiopow = 150; gun[126].ratiorate = 80;

            gun[127].name = "Bren Ten"; gun[127].what = 4; gun[127].crit = 0.2; gun[127].belt = 0;
            gun[127].eatratio = 110; gun[127].ratiododge = 90; gun[127].ratiohit = 110; gun[127].ratiohp = 105; gun[127].ratiopow = 120; gun[127].ratiorate = 110;
            gun[127].equiptype1 = "4,13"; gun[127].equiptype2 = "6"; gun[127].equiptype3 = "9,10,12";

            gun[128].name = "PSM"; gun[128].what = 4; gun[128].crit = 0.2; gun[128].belt = 0;
            gun[128].eatratio = 135; gun[128].ratiododge = 135; gun[128].ratiohit = 120; gun[128].ratiohp = 85; gun[128].ratiopow = 80; gun[128].ratiorate = 115;
            gun[128].equiptype1 = "4,13"; gun[128].equiptype2 = "6"; gun[128].equiptype3 = "9,10,12";

            gun[129].name = "USP Compact"; gun[129].what = 4; gun[129].crit = 0.2; gun[129].belt = 0;
            gun[129].eatratio = 115; gun[129].ratiododge = 120; gun[129].ratiohit = 125; gun[129].ratiohp = 100; gun[129].ratiopow = 90; gun[129].ratiorate = 120;
            gun[129].equiptype1 = "4,13"; gun[129].equiptype2 = "6"; gun[129].equiptype3 = "9,10,12";

            gun[130].name = "RO635"; gun[130].what = 3; gun[130].crit = 0.05; gun[130].belt = 0;
            gun[130].eatratio = 105; gun[130].ratiododge = 120; gun[130].ratiohit = 125; gun[130].ratiohp = 110; gun[130].ratiopow = 105; gun[130].ratiorate = 125;
            gun[130].equiptype1 = "9,10,12"; gun[130].equiptype2 = "6"; gun[130].equiptype3 = "1,2,3,4,13";

            gun[131].name = "M1887"; gun[131].what = 7; gun[131].crit = 0.4; gun[131].belt = 4;
            gun[132].name = "M37"; gun[132].what = 7; gun[132].crit = 0.4; gun[132].belt = 4;
            gun[133].name = "M500"; gun[133].what = 7; gun[133].crit = 0.4; gun[133].belt = 4;
            gun[134].name = "M590"; gun[134].what = 7; gun[134].crit = 0.4; gun[134].belt = 4;
            gun[135].name = "KSG"; gun[135].what = 7; gun[135].crit = 0.4; gun[135].belt = 5;
            gun[136].name = "KS-23"; gun[136].what = 7; gun[136].crit = 0.4; gun[136].belt = 3;
            gun[137].name = "RMB-93"; gun[137].what = 7; gun[137].crit = 0.4; gun[137].belt = 4;
            gun[138].name = "97式霰"; gun[138].what = 7; gun[138].crit = 0.4; gun[138].belt = 3;
            gun[131].eatratio = 115; gun[131].ratiododge = 95; gun[131].ratiohit = 95; gun[131].ratiohp = 125; gun[131].ratiopow = 125; gun[131].ratiorate = 80; gun[131].ratioarmor = 120;
            gun[132].eatratio = 90; gun[132].ratiododge = 115; gun[132].ratiohit = 120; gun[132].ratiohp = 115; gun[132].ratiopow = 125; gun[132].ratiorate = 105; gun[132].ratioarmor = 120;
            gun[133].eatratio = 95; gun[133].ratiododge = 90; gun[133].ratiohit = 105; gun[133].ratiohp = 120; gun[133].ratiopow = 110; gun[133].ratiorate = 115; gun[133].ratioarmor = 115;
            gun[134].eatratio = 95; gun[134].ratiododge = 90; gun[134].ratiohit = 105; gun[134].ratiohp = 120; gun[134].ratiopow = 115; gun[134].ratiorate = 120; gun[134].ratioarmor = 120;
            gun[135].eatratio = 100; gun[135].ratiododge = 110; gun[135].ratiohit = 115; gun[135].ratiohp = 115; gun[135].ratiopow = 100; gun[135].ratiorate = 115; gun[135].ratioarmor = 130;
            gun[136].eatratio = 90; gun[136].ratiododge = 90; gun[136].ratiohit = 85; gun[136].ratiohp = 125; gun[136].ratiopow = 150; gun[136].ratiorate = 95; gun[136].ratioarmor = 115;
            gun[137].eatratio = 100; gun[137].ratiododge = 120; gun[137].ratiohit = 95; gun[137].ratiohp = 110; gun[137].ratiopow = 105; gun[137].ratiorate = 110; gun[137].ratioarmor = 120;
            gun[138].eatratio = 105; gun[138].ratiododge = 115; gun[138].ratiohit = 100; gun[138].ratiohp = 120; gun[138].ratiopow = 110; gun[138].ratiorate = 105; gun[138].ratioarmor = 110;

            gun[139].name = "Five-seveN"; gun[139].what = 4; gun[139].crit = 0.2; gun[139].belt = 0;
            gun[139].eatratio = 125; gun[139].ratiododge = 125; gun[139].ratiohit = 110; gun[139].ratiohp = 95; gun[139].ratiopow = 110; gun[139].ratiorate = 120;
            gun[139].equiptype1 = "4,13"; gun[139].equiptype2 = "6"; gun[139].equiptype3 = "9,10,12"; gun[139].type = 102003;
            gun[139].grid_center = 5; gun[139].number = 4; gun[139].effect0 = 2; gun[139].effect1 = 3; gun[139].effect2 = 8; gun[139].effect3 = 9; gun[139].critup = 0.1; gun[139].shotspeedup = 0.15; gun[139].to = 1;

            gun[140].name = "MT-9"; gun[140].what = 3; gun[140].crit = 0.05; gun[140].belt = 0;
            gun[140].eatratio = 100; gun[140].ratiododge = 105; gun[140].ratiohit = 120; gun[140].ratiohp = 115; gun[140].ratiopow = 100; gun[140].ratiorate = 115;
            gun[140].equiptype1 = "9,10,12"; gun[140].equiptype2 = "6"; gun[140].equiptype3 = "1,2,3,4,13"; gun[140].type = 102205;
            gun[140].grid_center = 5; gun[140].number = 2; gun[140].effect0 = 1; gun[140].effect1 = 7; gun[140].damageup = 0.1; gun[140].dodgeup = 0.12; gun[140].to = 2;

            gun[141].name = "OTs-44"; gun[141].what = 5; gun[141].crit = 0.4; gun[141].belt = 0;
            gun[141].eatratio = 135; gun[141].ratiododge = 85; gun[141].ratiohit = 90; gun[141].ratiohp = 90; gun[141].ratiopow = 135; gun[141].ratiorate = 90;
            gun[141].equiptype1 = "5"; gun[141].equiptype2 = "1,2,3,13"; gun[141].equiptype3 = "9,15"; gun[141].type = 103003;
            gun[141].grid_center = 5; gun[141].number = 2; gun[141].effect0 = 3; gun[141].effect1 = 9; gun[141].rateup = 0.12; gun[141].to = 4;

            gun[142].name = "G28"; gun[142].what = 5; gun[142].crit = 0.4; gun[142].belt = 0;
            gun[142].eatratio = 120; gun[142].ratiododge = 85; gun[142].ratiohit = 120; gun[142].ratiohp = 100; gun[142].ratiopow = 110; gun[142].ratiorate = 115;
            gun[142].equiptype1 = "5"; gun[142].equiptype2 = "1,2,3,13"; gun[142].equiptype3 = "9,15"; gun[142].type = 100124;
            gun[142].grid_center = 5; gun[142].number = 2; gun[142].effect0 = 2; gun[142].effect1 = 8; gun[142].rateup = 0.15; gun[142].to = 4;
            if (DateTime.Now > DateTime.Parse("2017-03-21"))
            {
                gun[143].name = "SSG 69"; gun[143].what = 5; gun[143].crit = 0.4; gun[143].belt = 0;
                gun[143].eatratio = 120; gun[143].ratiododge = 115; gun[143].ratiohit = 125; gun[143].ratiohp = 90; gun[143].ratiopow = 120; gun[143].ratiorate = 85;
                gun[143].equiptype1 = "5"; gun[143].equiptype2 = "1,2,3,13"; gun[143].equiptype3 = "9,15"; gun[143].type = 100102;
                gun[143].grid_center = 5; gun[143].number = 1; gun[143].effect0 = 6; gun[143].rateup = 0.12; gun[143].to = 4;
            }

            gun[144].name = "IWS 2000"; gun[144].what = 5; gun[144].crit = 0.4; gun[144].belt = 0;
            gun[144].eatratio = 130; gun[144].ratiododge = 80; gun[144].ratiohit = 110; gun[144].ratiohp = 100; gun[144].ratiopow = 142; gun[144].ratiorate = 90;
            gun[144].equiptype1 = "5"; gun[144].equiptype2 = "1,2,3,13"; gun[144].equiptype3 = "9,15"; gun[144].type = 105705;
            gun[144].grid_center = 5; gun[144].number = 2; gun[144].effect0 = 2; gun[144].effect1 = 8; gun[144].rateup = 0.18; gun[144].to = 4;

            gun[145].name = "AEK-999"; gun[145].what = 6; gun[145].crit = 0.05; gun[145].belt = 10;
            gun[145].eatratio = 110; gun[145].ratiododge = 120; gun[145].ratiohit = 125; gun[145].ratiohp = 100; gun[145].ratiopow = 115; gun[145].ratiorate = 115;
            gun[145].equiptype1 = "5"; gun[145].equiptype2 = "1,2,3"; gun[145].equiptype3 = "9,14"; gun[145].type = 105204;
            gun[145].grid_center = 4; gun[145].number = 2; gun[145].effect0 = 3; gun[145].effect1 = 9; gun[145].shotspeedup = 0.15; gun[145].armorup = 0.1; gun[145].to = 7;

            gun[146].name = "希普卡"; gun[146].what = 3; gun[146].crit = 0.05; gun[146].belt = 0;
            gun[146].eatratio = 115; gun[146].ratiododge = 125; gun[146].ratiohit = 115; gun[146].ratiohp = 95; gun[146].ratiopow = 90; gun[146].ratiorate = 120;
            gun[146].equiptype1 = "9,10,12"; gun[146].equiptype2 = "6"; gun[146].equiptype3 = "1,2,3,4,13"; gun[146].type = 100203;
            gun[146].grid_center = 5; gun[146].number = 2; gun[146].effect0 = 1; gun[146].effect1 = 7; gun[146].shotspeedup = 0.15; gun[146].dodgeup = 0.1; gun[146].to = 2;

            gun[147].name = "CZ75"; gun[147].what = 4; gun[147].crit = 0.2; gun[147].belt = 0;
            gun[147].eatratio = 125; gun[147].ratiododge = 95; gun[147].ratiohit = 120; gun[147].ratiohp = 100; gun[147].ratiopow = 120; gun[147].ratiorate = 120;
            gun[147].equiptype1 = "4,13"; gun[147].equiptype2 = "6"; gun[147].equiptype3 = "9,10,12"; gun[147].type = 105805;
            gun[147].grid_center = 5; gun[147].number = 4; gun[147].effect0 = 1; gun[147].effect1 = 2; gun[147].effect2 = 7; gun[147].effect3 = 8; gun[147].damageup = 0.08; gun[147].shotspeedup = 0.1; gun[147].to = 1;
            if (DateTime.Now > DateTime.Parse("2017-04-21"))
            {
                gun[148].name = "ASh-12.7"; gun[148].what = 2; gun[148].crit = 0.2; gun[148].belt = 0;
                gun[148].eatratio = 130; gun[148].ratiododge = 80; gun[148].ratiohit = 90; gun[148].ratiohp = 100; gun[148].ratiopow = 135; gun[148].ratiorate = 85;
                gun[148].equiptype1 = "1,2,3,4,13"; gun[148].equiptype2 = "8"; gun[148].equiptype3 = "9,10,12"; gun[148].type = 105903;
                gun[148].grid_center = 5; gun[148].number = 2; gun[148].effect0 = 3; gun[148].effect1 = 9; gun[148].damageup = 0.3; gun[148].to = 3;
            }
            gun[149].name = "M1897"; gun[149].what = 7; gun[149].crit = 0.4; gun[149].belt = 4;
            gun[149].eatratio = 100; gun[149].ratiododge = 95; gun[149].ratiohit = 100; gun[149].ratiohp = 115; gun[149].ratiopow = 120; gun[149].ratiorate = 100; gun[149].ratioarmor = 115;
            gun[149].equiptype1 = "9,11"; gun[149].equiptype2 = "7"; gun[149].equiptype3 = "1,2,3,4"; gun[149].type = 103202;
            gun[149].grid_center = 6; gun[149].number = 2; gun[149].effect0 = 1; gun[149].effect1 = 4; gun[149].hitup = 0.5; gun[149].to = 6;

            gun[150].name = "Super-Shorty"; gun[150].what = 7; gun[150].crit = 0.4; gun[150].belt = 3;
            gun[150].eatratio = 125; gun[150].ratiododge = 135; gun[150].ratiohit = 105; gun[150].ratiohp = 110; gun[150].ratiopow = 85; gun[150].ratiorate = 110; gun[150].ratioarmor = 110;
            gun[150].equiptype1 = "9,11"; gun[150].equiptype2 = "7"; gun[150].equiptype3 = "1,2,3,4"; gun[150].type = 105403;
            gun[150].grid_center = 6; gun[150].number = 1; gun[150].effect0 = 4; gun[150].hitup = 0.2; gun[150].damageup = 0.15; gun[150].to = 6;

            gun[151].name = "Saiga-12"; gun[151].what = 7; gun[151].crit = 0.4; gun[151].belt = 5;
            gun[151].eatratio = 100; gun[151].ratiododge = 95; gun[151].ratiohit = 110; gun[151].ratiohp = 120; gun[151].ratiopow = 100; gun[151].ratiorate = 135; gun[151].ratioarmor = 125;
            gun[151].equiptype1 = "9,11"; gun[151].equiptype2 = "7"; gun[151].equiptype3 = "1,2,3,4"; gun[151].type = 106004;
            gun[151].grid_center = 6; gun[151].number = 3; gun[151].effect0 = 1; gun[151].effect1 = 4; gun[151].effect2 = 7; gun[151].damageup = 0.15; gun[151].to = 6;

            gun[152].name = "SPAS-12"; gun[152].what = 7; gun[152].crit = 0.4; gun[152].belt = 4;
            gun[152].eatratio = 90; gun[152].ratiododge = 85; gun[152].ratiohit = 110; gun[152].ratiohp = 125; gun[152].ratiopow = 120; gun[152].ratiorate = 125; gun[152].ratioarmor = 115;
            gun[152].equiptype1 = "9,11"; gun[152].equiptype2 = "7"; gun[152].equiptype3 = "1,2,3,4"; gun[152].type = 100122;
            gun[152].grid_center = 6; gun[152].number = 2; gun[152].effect0 = 4; gun[152].effect1 = 7; gun[152].damageup = 0.2; gun[152].to = 6;
            if (DateTime.Now > DateTime.Parse("2017-05-21"))
            {
                gun[153].name = "HK45"; gun[153].what = 4; gun[153].crit = 0.2; gun[153].belt = 0;
                gun[153].eatratio = 110; gun[153].ratiododge = 115; gun[153].ratiohit = 125; gun[153].ratiohp = 100; gun[153].ratiopow = 130; gun[153].ratiorate = 105;
                gun[153].equiptype1 = "4,13"; gun[153].equiptype2 = "6"; gun[153].equiptype3 = "9,10,12"; gun[153].type = 106101;
                gun[153].grid_center = 5; gun[153].number = 4; gun[153].effect0 = 1; gun[153].effect1 = 3; gun[153].effect2 = 7; gun[153].effect3 = 9; gun[153].damageup = 0.16; gun[153].to = 1;
            }
            gun[154].name = "Spitfire"; gun[154].what = 4; gun[154].crit = 0.2; gun[154].belt = 0;
            gun[154].eatratio = 120; gun[154].ratiododge = 95; gun[154].ratiohit = 120; gun[154].ratiohp = 105; gun[154].ratiopow = 120; gun[154].ratiorate = 110;
            gun[154].equiptype1 = "4,13"; gun[154].equiptype2 = "6"; gun[154].equiptype3 = "9,10,12"; gun[154].type = 101602;
            gun[154].grid_center = 4; gun[154].number = 4; gun[154].effect0 = 1; gun[154].effect1 = 3; gun[154].effect2 = 7; gun[154].effect3 = 9; gun[154].damageup = 0.15; gun[154].hitup = 0.2; gun[154].to = 1;

            gun[155].name = "SCW"; gun[155].what = 3; gun[155].crit = 0.05; gun[155].belt = 0;
            gun[155].eatratio = 100; gun[155].ratiododge = 120; gun[155].ratiohit = 110; gun[155].ratiohp = 95; gun[155].ratiopow = 125; gun[155].ratiorate = 120;
            gun[155].equiptype1 = "9,10,12"; gun[155].equiptype2 = "6"; gun[155].equiptype3 = "1,2,3,4,13"; gun[155].type = 101903;
            gun[155].grid_center = 5; gun[155].number = 1; gun[155].effect0 = 4; gun[155].shotspeedup = 0.1; gun[155].damageup = 0.06; gun[155].to = 2;

            gun[156].name = "利贝罗勒"; gun[156].what = 2; gun[156].crit = 0.2; gun[156].belt = 0;
            gun[156].eatratio = 135; gun[156].ratiododge = 85; gun[156].ratiohit = 95; gun[156].ratiohp = 100; gun[156].ratiopow = 130; gun[156].ratiorate = 90;
            gun[156].equiptype1 = "1,2,3,4,13"; gun[156].equiptype2 = "8"; gun[156].equiptype3 = "9,10,12"; gun[156].type = 106203;
            gun[156].grid_center = 5; gun[156].number = 2; gun[156].effect0 = 2; gun[156].effect1 = 8; gun[156].damageup = 0.2; gun[156].to = 2;

            gun[157].name = "RFB"; gun[157].what = 2; gun[157].crit = 0.3; gun[157].belt = 0;
            gun[157].eatratio = 145; gun[157].ratiododge = 100; gun[157].ratiohit = 140; gun[157].ratiohp = 95; gun[157].ratiopow = 135; gun[157].ratiorate = 75;
            gun[157].equiptype1 = "1,2,3,4,13"; gun[157].equiptype2 = "8"; gun[157].equiptype3 = "9,10,12"; gun[157].type = 106404;
            gun[157].grid_center = 5; gun[157].number = 3; gun[157].effect0 = 3; gun[157].effect1 = 6; gun[157].effect2 = 9; gun[157].hitup = 0.3; gun[157].dodgeup = 0.18; gun[157].to = 3;

            gun[158].name = "PKP"; gun[158].what = 6; gun[158].crit = 0.05; gun[158].belt = 10;
            gun[158].eatratio = 115; gun[158].ratiododge = 120; gun[158].ratiohit = 130; gun[158].ratiohp = 100; gun[158].ratiopow = 120; gun[158].ratiorate = 120;
            gun[158].equiptype1 = "5"; gun[158].equiptype2 = "1,2,3"; gun[158].equiptype3 = "9,14"; gun[158].type = 106304;
            gun[158].grid_center = 7; gun[158].number = 3; gun[158].effect0 = 3; gun[158].effect1 = 6; gun[158].effect2 = 9; gun[158].shotspeedup = 0.15; gun[158].hitup = 0.12; gun[158].to = 7;

            gun[159].name = "八一式马"; gun[159].what = 5; gun[159].crit = 0.4; gun[159].belt = 0;
            gun[159].eatratio = 125; gun[159].ratiododge = 120; gun[159].ratiohit = 115; gun[159].ratiohp = 85; gun[159].ratiopow = 110; gun[159].ratiorate = 90;
            gun[159].equiptype1 = "5"; gun[159].equiptype2 = "1,2,3,13"; gun[159].equiptype3 = "9,15"; gun[159].type = 100412;
            gun[159].grid_center = 5; gun[159].number = 1; gun[159].effect0 = 9; gun[159].rateup = 0.12; gun[159].to = 4;

            gun[160].name = "ART556"; gun[160].what = 2; gun[160].crit = 0.2; gun[160].belt = 0;
            gun[160].eatratio = 130; gun[160].ratiododge = 110; gun[160].ratiohit = 120; gun[160].ratiohp = 105; gun[160].ratiopow = 110; gun[160].ratiorate = 100;
            gun[160].equiptype1 = "1,2,3,4,13"; gun[160].equiptype2 = "8"; gun[160].equiptype3 = "9,10,12"; gun[160].type = 101704;
            gun[160].grid_center = 5; gun[160].number = 2; gun[160].effect0 = 3; gun[160].effect1 = 9; gun[160].hitup = 0.5; gun[160].dodgeup = 0.15; gun[160].to = 3;

            gun[161].name = "诺爱尔"; gun[161].what = 4; gun[161].crit = 0.2; gun[161].belt = 0;
            gun[161].eatratio = 120; gun[161].ratiododge = 110; gun[161].ratiohit = 120; gun[161].ratiohp = 90; gun[161].ratiopow = 140; gun[161].ratiorate = 120;
            gun[161].equiptype1 = "4,13"; gun[161].equiptype2 = "6"; gun[161].equiptype3 = "9,10,12"; gun[161].type = 106406;
            gun[161].grid_center = 5; gun[161].number = 6; gun[161].effect0 = 1; gun[161].effect1 = 2; gun[161].effect2 = 3; gun[161].effect3 = 7; gun[161].effect4 = 8; gun[161].effect5 = 9; gun[161].shotspeedup = 0.15; gun[161].dodgeup = 0.1; gun[161].to = 1;

            gun[162].name = "艾尔菲尔特"; gun[162].what = 7; gun[162].crit = 0.4; gun[162].belt = 5;
            gun[162].eatratio = 95; gun[162].ratiododge = 80; gun[162].ratiohit = 120; gun[162].ratiohp = 125; gun[162].ratiopow = 130; gun[162].ratiorate = 110; gun[162].ratioarmor = 125;
            gun[162].equiptype1 = "9,11"; gun[162].equiptype2 = "7"; gun[162].equiptype3 = "1,2,3,4"; gun[162].type = 106407;
            gun[162].grid_center = 6; gun[162].number = 2; gun[162].effect0 = 1; gun[162].effect1 = 7; gun[162].damageup = 0.15; gun[162].hitup = 0.15; gun[162].to = 6;

            gun[163].name = "UMP40"; gun[163].what = 3; gun[163].crit = 0.05; gun[163].belt = 0;
            gun[163].eatratio = 110; gun[163].ratiododge = 122; gun[163].ratiohit = 115; gun[163].ratiohp = 102; gun[163].ratiopow = 102; gun[163].ratiorate = 108;
            gun[163].equiptype1 = "9,10,12"; gun[163].equiptype2 = "6"; gun[163].equiptype3 = "1,2,3,4,13"; gun[163].type = 106501;
            gun[163].grid_center = 5; gun[163].number = 4; gun[163].effect0 = 2; gun[163].effect1 = 3; gun[163].effect2 = 8; gun[163].effect3 = 9; gun[163].critup = 5; gun[163].to = 3;

            gun[164].name = "TMP"; gun[164].what = 3; gun[164].crit = 0.05; gun[164].belt = 0;
            gun[164].eatratio = 105; gun[164].ratiododge = 130; gun[164].ratiohit = 125; gun[164].ratiohp = 85; gun[164].ratiopow = 110; gun[164].ratiorate = 120;
            gun[164].equiptype1 = "9,10,12"; gun[164].equiptype2 = "6"; gun[164].equiptype3 = "1,2,3,4,13"; gun[164].type = 100202;
            gun[164].grid_center = 8; gun[164].number = 2; gun[164].effect0 = 1; gun[164].effect1 = 7; gun[164].damageup = 0.15; gun[164].hitup = 0.2; gun[164].to = 2;

            gun[165].name = "KLIN"; gun[165].what = 3; gun[165].crit = 0.05; gun[165].belt = 0;
            gun[165].eatratio = 100; gun[165].ratiododge = 130; gun[165].ratiohit = 95; gun[165].ratiohp = 108; gun[165].ratiopow = 100; gun[165].ratiorate = 125;
            gun[165].equiptype1 = "9,10,12"; gun[165].equiptype2 = "6"; gun[165].equiptype3 = "1,2,3,4,13"; gun[165].type = 102303;
            gun[165].grid_center = 5; gun[165].number = 1; gun[165].effect0 = 4; gun[165].shotspeedup = 0.25; gun[165].to = 2;

            gun[166].name = "F1"; gun[166].what = 3; gun[166].crit = 0.05; gun[166].belt = 0;
            gun[166].eatratio = 112; gun[166].ratiododge = 95; gun[166].ratiohit = 110; gun[166].ratiohp = 120; gun[166].ratiopow = 95; gun[166].ratiorate = 100;
            gun[166].equiptype1 = "9,10,12"; gun[166].equiptype2 = "6"; gun[166].equiptype3 = "1,2,3,4,13"; gun[166].type = 102402;
            gun[166].grid_center = 5; gun[166].number = 2; gun[166].effect0 = 1; gun[166].effect1 = 7; gun[166].hitup = 0.4; gun[166].dodgeup = 0.15; gun[166].to = 2;

            gun[167].name = "DSR-50"; gun[167].what = 5; gun[167].crit = 0.4; gun[167].belt = 0;
            gun[167].eatratio = 138; gun[167].ratiododge = 85; gun[167].ratiohit = 115; gun[167].ratiohp = 93; gun[167].ratiopow = 138; gun[167].ratiorate = 85;
            gun[167].equiptype1 = "5"; gun[167].equiptype2 = "1,2,3,13"; gun[167].equiptype3 = "9,15"; gun[167].type = 105707;
            gun[167].grid_center = 4; gun[167].number = 2; gun[167].effect0 = 5; gun[167].effect1 = 6; gun[167].rateup = 0.18; gun[167].to = 4;

            gun[168].name = "PzB39"; gun[168].what = 5; gun[168].crit = 0.4; gun[168].belt = 0;
            gun[168].eatratio = 130; gun[168].ratiododge = 85; gun[168].ratiohit = 100; gun[168].ratiohp = 95; gun[168].ratiopow = 130; gun[168].ratiorate = 90;
            gun[168].equiptype1 = "5"; gun[168].equiptype2 = "1,2,3,13"; gun[168].equiptype3 = "9,15"; gun[168].type = 105706;
            gun[168].grid_center = 5; gun[168].number = 2; gun[168].effect0 = 2; gun[168].effect1 = 8; gun[168].rateup = 0.15; gun[168].to = 4;

            gun[169].name = "T91"; gun[169].what = 2; gun[169].crit = 0.2; gun[169].belt = 0;
            gun[169].eatratio = 115; gun[169].ratiododge = 115; gun[169].ratiohit = 110; gun[169].ratiohp = 112; gun[169].ratiopow = 115; gun[169].ratiorate = 115;
            gun[169].equiptype1 = "1,2,3,4,13"; gun[169].equiptype2 = "8"; gun[169].equiptype3 = "9,10,12"; gun[169].type = 105904;
            gun[169].grid_center = 8; gun[169].number = 2; gun[169].effect0 = 3; gun[169].effect1 = 9; gun[169].damageup = 0.2; gun[169].dodgeup = 0.12; gun[169].to = 3;
            if (DateTime.Now > DateTime.Parse("2017-08-21"))
            {
                gun[170].name = "wz.29"; gun[170].what = 5; gun[170].crit = 0.4; gun[170].belt = 0;
                gun[170].eatratio = 110; gun[170].ratiododge = 105; gun[170].ratiohit = 105; gun[170].ratiohp = 110; gun[170].ratiopow = 110; gun[170].ratiorate = 95;
                gun[170].equiptype1 = "5"; gun[170].equiptype2 = "1,2,3,13"; gun[170].equiptype3 = "9,15"; gun[170].type = 100401;
                gun[170].grid_center = 5; gun[170].number = 1; gun[170].effect0 = 3; gun[170].rateup = 0.12; gun[170].to = 4;
            }

            gun[171].name = "竞争者"; gun[171].what = 4; gun[171].crit = 0.4; gun[171].belt = 0;
            gun[171].eatratio = 150; gun[171].ratiododge = 90; gun[171].ratiohit = 140; gun[171].ratiohp = 100; gun[171].ratiopow = 145; gun[171].ratiorate = 75;
            gun[171].equiptype1 = "4,13"; gun[171].equiptype2 = "5,6"; gun[171].equiptype3 = "9,10,12"; gun[171].type = 106701;
            gun[171].grid_center = 5; gun[171].number = 8; gun[171].effect0 = 1; gun[171].effect1 = 2; gun[171].effect2 = 3; gun[171].effect3 = 4; gun[171].effect4 = 6; gun[171].effect5 = 7; gun[171].effect6 = 8; gun[171].effect7 = 9; gun[171].damageup = 0.15; gun[171].critup = 0.1; gun[171].to = 1;

            gun[172].name = "T-5000"; gun[172].what = 5; gun[172].crit = 0.4; gun[172].belt = 0;
            gun[172].eatratio = 117; gun[172].ratiododge = 85; gun[172].ratiohit = 130; gun[172].ratiohp = 102; gun[172].ratiopow = 118; gun[172].ratiorate = 105;
            gun[172].equiptype1 = "5"; gun[172].equiptype2 = "1,2,3,13"; gun[172].equiptype3 = "9,15"; gun[172].type = 106601;
            gun[172].grid_center = 5; gun[172].number = 2; gun[172].effect0 = 2; gun[172].effect1 = 3; gun[172].rateup = 0.15; gun[172].to = 4;

            gun[173].name = "阿梅利"; gun[173].what = 6; gun[173].crit = 0.05; gun[173].belt = 8;
            gun[173].eatratio = 145; gun[173].ratiododge = 140; gun[173].ratiohit = 130; gun[173].ratiohp = 85; gun[173].ratiopow = 90; gun[173].ratiorate = 130;
            gun[173].equiptype1 = "5"; gun[173].equiptype2 = "1,2,3"; gun[173].equiptype3 = "9,14"; gun[173].type = 105106;
            gun[173].grid_center = 4; gun[173].number = 3; gun[173].effect0 = 3; gun[173].effect1 = 6; gun[173].effect2 = 9; gun[173].damageup = 0.1; gun[173].armorup = 0.15; gun[173].to = 7;

            for (int i = 0; i < GUN_NUMBER + 1; i++)//加颜色
            {
                Label l = new Label();
                l.Content = gun[i].name;
                if (gun[i].what == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 6)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                    l.Foreground = br;
                }
                Combo0.Items.Add(l);
            }

            for (int i = 0; i < GUN_NUMBER + 1; i++)
            {
                Label l = new Label();
                l.Content = gun[i].name;
                if (gun[i].what == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 6)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                    l.Foreground = br;
                }
                Combo1.Items.Add(l);
            }
            for (int i = 0; i < GUN_NUMBER + 1; i++)
            {
                Label l = new Label();
                l.Content = gun[i].name;
                if (gun[i].what == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 6)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                    l.Foreground = br;
                }
                Combo2.Items.Add(l);
            }
            for (int i = 0; i < GUN_NUMBER + 1; i++)
            {
                Label l = new Label();
                l.Content = gun[i].name;
                if (gun[i].what == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 6)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                    l.Foreground = br;
                }
                Combo3.Items.Add(l);
            }
            for (int i = 0; i < GUN_NUMBER + 1; i++)
            {
                Label l = new Label();
                l.Content = gun[i].name;
                if (gun[i].what == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 6)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                    l.Foreground = br;
                }
                Combo4.Items.Add(l);
            }

            for (int i = 0; i < GUN_NUMBER + 1; i++)
            {
                Label l = new Label();
                l.Content = gun[i].name;
                if (gun[i].what == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 6)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                    l.Foreground = br;
                }
                Combo5.Items.Add(l);
            }
            for (int i = 0; i < GUN_NUMBER + 1; i++)
            {
                Label l = new Label();
                l.Content = gun[i].name;
                if (gun[i].what == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 6)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                    l.Foreground = br;
                }
                Combo6.Items.Add(l);
            }
            for (int i = 0; i < GUN_NUMBER + 1; i++)
            {
                Label l = new Label();
                l.Content = gun[i].name;
                if (gun[i].what == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 6)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                    l.Foreground = br;
                }
                Combo7.Items.Add(l);
            }
            for (int i = 0; i < GUN_NUMBER + 1; i++)
            {
                Label l = new Label();
                l.Content = gun[i].name;
                if (gun[i].what == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    l.Foreground = br;
                }
                else if (gun[i].what == 6)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                    l.Foreground = br;
                }
                Combo8.Items.Add(l);
            }
            Merry0.Content = "♡";
            Brush br2 = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Gray"));
            Merry0.Foreground = br2;
            Merry1.Content = "♡";
            Merry1.Foreground = br2;
            Merry2.Content = "♡";
            Merry2.Foreground = br2;
            Merry3.Content = "♡";
            Merry3.Foreground = br2;
            Merry4.Content = "♡";
            Merry4.Foreground = br2;
            Merry5.Content = "♡";
            Merry5.Foreground = br2;
            Merry6.Content = "♡";
            Merry6.Foreground = br2;
            Merry0.Content = "♡";
            Merry0.Foreground = br2;
            Merry8.Content = "♡";
            Merry8.Foreground = br2;

            for (int i = 0; i < GUN_NUMBER; i++) //加图像
            {
                gun[i].image = "/assets/" + gun[i].name + ".png";
                gun[i].doublecard = false;
            }
      //      gun[170].image = "/assets/MP5.png";
            gun[GUN_NUMBER].image = "";
            for (int i = 0; i < 9; i++)
            {
                gg[i] = new GunGrid();
                gg[i].critup = 1.00;
                gg[i].damageup = 1.00;
                gg[i].dodgeup = 1.00;
                gg[i].hitup = 1.00;
                gg[i].shotspeedup = 1.00;
                gg[i].armorup = 1.00;
                gg[i].rateup = 1.00;
                lastgunindex[i] = -1;
                skillupdamage[i] = new Double();
                skillupdodge[i] = new Double();
                skilluphit[i] = new Double();
                skilldamageagain[i] = new Double();
                skillupshotspeed[i] = new double();
                skilluparmor[i] = new Double();
                skillupcrit[i] = new double();
                skillupbelt[i] = new double();
                skillupnegev[i] = new double();
                skilluprenju[i] = new double();
                skillupboom[i] = new double();
                skillsolidmultiple[i] = new double();
                skilltime[i] = new double();
                skilltime[i] = 0;
                isfullcrit[i] = false;
                skillupbelt[i] = 0;
                skilluparmor[i] = 1;
                skillupshotspeed[i] = 1;
                skilluphit[i] = 1;
                skillupdodge[i] = 1;
                skillupcrit[i] = 1;
                skillupnegev[i] = 0;
                skillsolidmultiple[i] = 0;
                skilluprenju[i] = 1;
                skillupboom[i] = 0;
                skillupdamage[i] = 1;
                skilldamageagain[i] = 0;
                skilltarget[i] = 1;
                equipdamage[i] = 0;
                equiparmor[i] = 0;
                equipcritharm[i] = 0;
                equiphit[i] = 0;
                equipdodge[i] = 0;
                equipbelt[i] = 0;
                equipcrit[i] = 0;
                equipnightsee[i] = 0;
                equipshotspeed[i] = 0;
                equipbreakarmor[i] = 10;
                multiple[i] = 1;
                merry[i] = 1;
                equiprifledslug[i] = false;
                gridlist[i] = new List<Border>();

            }

            skilldowndodge = 1;
            skilldownhit = 1;
            skilldowndamage = 1;
            fairydowndamage = 1;

            for (int i = 1; i < 101; i++)
            {
                Level0.Items.Add(i);
                Level1.Items.Add(i);
                Level2.Items.Add(i);
                Level3.Items.Add(i);
                Level4.Items.Add(i);
                Level5.Items.Add(i);
                Level6.Items.Add(i);
                Level7.Items.Add(i);
                Level8.Items.Add(i);
            }
            for (int i = 1; i <= 10; i++)
            {
                SkillLevel0.Items.Add(i);
                SkillLevel1.Items.Add(i);
                SkillLevel2.Items.Add(i);
                SkillLevel3.Items.Add(i);
                SkillLevel4.Items.Add(i);
                SkillLevel5.Items.Add(i);
                SkillLevel6.Items.Add(i);
                SkillLevel7.Items.Add(i);
                SkillLevel8.Items.Add(i);
            }

            Level0.SelectedIndex = 99;
            Level1.SelectedIndex = 99;
            Level2.SelectedIndex = 99;
            Level3.SelectedIndex = 99;
            Level4.SelectedIndex = 99;
            Level5.SelectedIndex = 99;
            Level6.SelectedIndex = 99;
            Level7.SelectedIndex = 99;
            Level8.SelectedIndex = 99;
            SkillLevel0.SelectedIndex = 9;
            SkillLevel1.SelectedIndex = 9;
            SkillLevel2.SelectedIndex = 9;
            SkillLevel3.SelectedIndex = 9;
            SkillLevel4.SelectedIndex = 9;
            SkillLevel5.SelectedIndex = 9;
            SkillLevel6.SelectedIndex = 9;
            SkillLevel7.SelectedIndex = 9;
            SkillLevel8.SelectedIndex = 9;
            equiptb011.IsEnabled = false;
            equiptb012.IsEnabled = false;
            equiptb013.IsEnabled = false;
            equiptb021.IsEnabled = false;
            equiptb022.IsEnabled = false;
            equiptb023.IsEnabled = false;
            equiptb031.IsEnabled = false;
            equiptb032.IsEnabled = false;
            equiptb033.IsEnabled = false;
            equiptb111.IsEnabled = false;
            equiptb112.IsEnabled = false;
            equiptb113.IsEnabled = false;
            equiptb121.IsEnabled = false;
            equiptb122.IsEnabled = false;
            equiptb123.IsEnabled = false;
            equiptb131.IsEnabled = false;
            equiptb132.IsEnabled = false;
            equiptb133.IsEnabled = false;
            equiptb211.IsEnabled = false;
            equiptb212.IsEnabled = false;
            equiptb213.IsEnabled = false;
            equiptb221.IsEnabled = false;
            equiptb222.IsEnabled = false;
            equiptb223.IsEnabled = false;
            equiptb231.IsEnabled = false;
            equiptb232.IsEnabled = false;
            equiptb233.IsEnabled = false;
            equiptb311.IsEnabled = false;
            equiptb312.IsEnabled = false;
            equiptb313.IsEnabled = false;
            equiptb321.IsEnabled = false;
            equiptb322.IsEnabled = false;
            equiptb323.IsEnabled = false;
            equiptb331.IsEnabled = false;
            equiptb332.IsEnabled = false;
            equiptb333.IsEnabled = false;
            equiptb411.IsEnabled = false;
            equiptb412.IsEnabled = false;
            equiptb413.IsEnabled = false;
            equiptb421.IsEnabled = false;
            equiptb422.IsEnabled = false;
            equiptb423.IsEnabled = false;
            equiptb431.IsEnabled = false;
            equiptb432.IsEnabled = false;
            equiptb433.IsEnabled = false;
            equiptb511.IsEnabled = false;
            equiptb512.IsEnabled = false;
            equiptb513.IsEnabled = false;
            equiptb521.IsEnabled = false;
            equiptb522.IsEnabled = false;
            equiptb523.IsEnabled = false;
            equiptb531.IsEnabled = false;
            equiptb532.IsEnabled = false;
            equiptb533.IsEnabled = false;
            equiptb611.IsEnabled = false;
            equiptb612.IsEnabled = false;
            equiptb613.IsEnabled = false;
            equiptb621.IsEnabled = false;
            equiptb622.IsEnabled = false;
            equiptb623.IsEnabled = false;
            equiptb631.IsEnabled = false;
            equiptb632.IsEnabled = false;
            equiptb633.IsEnabled = false;
            equiptb711.IsEnabled = false;
            equiptb712.IsEnabled = false;
            equiptb713.IsEnabled = false;
            equiptb721.IsEnabled = false;
            equiptb722.IsEnabled = false;
            equiptb723.IsEnabled = false;
            equiptb731.IsEnabled = false;
            equiptb732.IsEnabled = false;
            equiptb733.IsEnabled = false;
            equiptb811.IsEnabled = false;
            equiptb812.IsEnabled = false;
            equiptb813.IsEnabled = false;
            equiptb821.IsEnabled = false;
            equiptb822.IsEnabled = false;
            equiptb823.IsEnabled = false;
            equiptb831.IsEnabled = false;
            equiptb832.IsEnabled = false;
            equiptb833.IsEnabled = false;
            gun[14].eatratio = 110;
            gun[26].eatratio = 125;
            gun[91].eatratio = 110;
            gun[18].eatratio = 105;
            gun[25].eatratio = 115;
            gun[15].eatratio = 115;
            gun[83].eatratio = 130;
            gun[28].eatratio = 115;
            gun[17].eatratio = 115;
            gun[16].eatratio = 110;
            gun[29].eatratio = 105;
            gun[82].eatratio = 100;
            gun[20].eatratio = 105;
            gun[22].eatratio = 100;
            gun[24].eatratio = 105;
            gun[27].eatratio = 110;
            gun[23].eatratio = 115;
            gun[19].eatratio = 105;
            gun[84].eatratio = 105;
            gun[92].eatratio = 110;
            gun[104].eatratio = 105;
            gun[94].eatratio = 125;
            gun[58].eatratio = 110;
            gun[95].eatratio = 115;
            gun[59].eatratio = 115;
            gun[56].eatratio = 120;
            gun[60].eatratio = 110;
            gun[50].eatratio = 115;
            gun[49].eatratio = 110;
            gun[52].eatratio = 120;
            gun[62].eatratio = 105;
            gun[53].eatratio = 110;
            gun[55].eatratio = 120;
            gun[97].eatratio = 110;
            gun[51].eatratio = 110;
            gun[65].eatratio = 115;
            gun[64].eatratio = 130;
            gun[66].eatratio = 125;
            gun[57].eatratio = 120;
            gun[96].eatratio = 105;
            gun[63].eatratio = 115;
            gun[61].eatratio = 125;
            gun[107].eatratio = 110;
            gun[54].eatratio = 110;
            gun[103].eatratio = 140;
            gun[3].eatratio = 130;
            gun[0].eatratio = 130;
            gun[86].eatratio = 125;
            gun[4].eatratio = 105;
            gun[13].eatratio = 110;
            gun[6].eatratio = 130;
            gun[5].eatratio = 110;
            gun[12].eatratio = 120;
            gun[9].eatratio = 130;
            gun[89].eatratio = 110;
            gun[1].eatratio = 120;
            gun[8].eatratio = 125;
            gun[10].eatratio = 100;
            gun[87].eatratio = 115;
            gun[7].eatratio = 125;
            gun[2].eatratio = 110;
            gun[90].eatratio = 115;
            gun[11].eatratio = 110;
            gun[80].eatratio = 110;
            gun[81].eatratio = 120;
            gun[37].eatratio = 105;
            gun[46].eatratio = 115;
            gun[45].eatratio = 135;
            gun[48].eatratio = 130;
            gun[38].eatratio = 130;
            gun[36].eatratio = 105;
            gun[43].eatratio = 120;
            gun[33].eatratio = 110;
            gun[34].eatratio = 110;
            gun[47].eatratio = 95;
            gun[30].eatratio = 105;
            gun[40].eatratio = 115;
            gun[42].eatratio = 115;
            gun[85].eatratio = 120;
            gun[41].eatratio = 135;
            gun[35].eatratio = 130;
            gun[32].eatratio = 125;
            gun[69].eatratio = 115;
            gun[98].eatratio = 110;
            gun[67].eatratio = 125;
            gun[78].eatratio = 110;
            gun[71].eatratio = 110;
            gun[75].eatratio = 110;
            gun[101].eatratio = 135;
            gun[74].eatratio = 130;
            gun[68].eatratio = 95;
            gun[72].eatratio = 95;
            gun[70].eatratio = 135;
            gun[100].eatratio = 90;
            gun[73].eatratio = 125;
            gun[76].eatratio = 115;
            gun[77].eatratio = 110;
            gun[79].eatratio = 120;
            gun[99].eatratio = 115;
            gun[110].eatratio = 100;
            gun[102].eatratio = 115;

            gun[14].ratiohit = 100;
            gun[26].ratiohit = 115;
            gun[91].ratiohit = 120;
            gun[18].ratiohit = 90;
            gun[25].ratiohit = 100;
            gun[15].ratiohit = 105;
            gun[83].ratiohit = 110;
            gun[28].ratiohit = 85;
            gun[17].ratiohit = 105;
            gun[16].ratiohit = 90;
            gun[29].ratiohit = 100;
            gun[82].ratiohit = 105;
            gun[20].ratiohit = 110;
            gun[22].ratiohit = 100;
            gun[24].ratiohit = 115;
            gun[27].ratiohit = 95;
            gun[23].ratiohit = 100;
            gun[19].ratiohit = 85;
            gun[84].ratiohit = 90;
            gun[92].ratiohit = 110;
            gun[104].ratiohit = 130;
            gun[94].ratiohit = 125;
            gun[58].ratiohit = 115;
            gun[95].ratiohit = 105;
            gun[59].ratiohit = 115;
            gun[56].ratiohit = 115;
            gun[60].ratiohit = 90;
            gun[50].ratiohit = 120;
            gun[49].ratiohit = 120;
            gun[52].ratiohit = 120;
            gun[62].ratiohit = 130;
            gun[53].ratiohit = 90;
            gun[55].ratiohit = 110;
            gun[97].ratiohit = 125;
            gun[51].ratiohit = 125;
            gun[65].ratiohit = 120;
            gun[64].ratiohit = 100;
            gun[66].ratiohit = 95;
            gun[57].ratiohit = 110;
            gun[96].ratiohit = 120;
            gun[63].ratiohit = 115;
            gun[61].ratiohit = 100;
            gun[107].ratiohit = 125;
            gun[54].ratiohit = 120;
            gun[103].ratiohit = 125;
            gun[3].ratiohit = 85;
            gun[0].ratiohit = 90;
            gun[86].ratiohit = 100;
            gun[4].ratiohit = 105;
            gun[13].ratiohit = 125;
            gun[6].ratiohit = 115;
            gun[5].ratiohit = 95;
            gun[12].ratiohit = 90;
            gun[9].ratiohit = 85;
            gun[89].ratiohit = 115;
            gun[1].ratiohit = 100;
            gun[8].ratiohit = 115;
            gun[10].ratiohit = 95;
            gun[87].ratiohit = 115;
            gun[7].ratiohit = 95;
            gun[2].ratiohit = 120;
            gun[90].ratiohit = 130;
            gun[11].ratiohit = 100;
            gun[80].ratiohit = 115;
            gun[81].ratiohit = 105;
            gun[37].ratiohit = 100;
            gun[46].ratiohit = 95;
            gun[45].ratiohit = 105;
            gun[48].ratiohit = 105;
            gun[38].ratiohit = 105;
            gun[36].ratiohit = 100;
            gun[43].ratiohit = 125;
            gun[33].ratiohit = 115;
            gun[34].ratiohit = 120;
            gun[47].ratiohit = 95;
            gun[30].ratiohit = 105;
            gun[40].ratiohit = 115;
            gun[42].ratiohit = 90;
            gun[85].ratiohit = 90;
            gun[41].ratiohit = 105;
            gun[35].ratiohit = 120;
            gun[32].ratiohit = 105;
            gun[69].ratiohit = 105;
            gun[98].ratiohit = 115;
            gun[67].ratiohit = 120;
            gun[78].ratiohit = 110;
            gun[71].ratiohit = 110;
            gun[75].ratiohit = 90;
            gun[101].ratiohit = 125;
            gun[74].ratiohit = 125;
            gun[68].ratiohit = 85;
            gun[72].ratiohit = 115;
            gun[70].ratiohit = 125;
            gun[100].ratiohit = 120;
            gun[73].ratiohit = 105;
            gun[76].ratiohit = 95;
            gun[77].ratiohit = 95;
            gun[79].ratiohit = 125;
            gun[99].ratiohit = 115;
            gun[110].ratiohit = 110;
            gun[102].ratiohit = 120;

            gun[14].ratiopow = 120;
            gun[26].ratiopow = 90;
            gun[91].ratiopow = 95;
            gun[18].ratiopow = 115;
            gun[25].ratiopow = 85;
            gun[15].ratiopow = 110;
            gun[83].ratiopow = 90;
            gun[28].ratiopow = 90;
            gun[17].ratiopow = 95;
            gun[16].ratiopow = 105;
            gun[29].ratiopow = 115;
            gun[82].ratiopow = 100;
            gun[20].ratiopow = 130;
            gun[22].ratiopow = 120;
            gun[24].ratiopow = 115;
            gun[27].ratiopow = 125;
            gun[23].ratiopow = 105;
            gun[19].ratiopow = 100;
            gun[84].ratiopow = 105;
            gun[92].ratiopow = 105;
            gun[104].ratiopow = 110;
            gun[94].ratiopow = 90;
            gun[58].ratiopow = 110;
            gun[95].ratiopow = 130;
            gun[59].ratiopow = 115;
            gun[56].ratiopow = 110;
            gun[60].ratiopow = 125;
            gun[50].ratiopow = 105;
            gun[49].ratiopow = 110;
            gun[52].ratiopow = 105;
            gun[62].ratiopow = 105;
            gun[53].ratiopow = 125;
            gun[55].ratiopow = 115;
            gun[97].ratiopow = 100;
            gun[51].ratiopow = 115;
            gun[65].ratiopow = 110;
            gun[64].ratiopow = 105;
            gun[66].ratiopow = 120;
            gun[57].ratiopow = 120;
            gun[96].ratiopow = 100;
            gun[63].ratiopow = 115;
            gun[61].ratiopow = 100;
            gun[107].ratiopow = 95;
            gun[54].ratiopow = 90;
            gun[103].ratiopow = 90;
            gun[3].ratiopow = 110;
            gun[0].ratiopow = 125;
            gun[86].ratiopow = 135;
            gun[4].ratiopow = 120;
            gun[13].ratiopow = 110;
            gun[6].ratiopow = 90;
            gun[5].ratiopow = 105;
            gun[12].ratiopow = 120;
            gun[9].ratiopow = 105;
            gun[89].ratiopow = 110;
            gun[1].ratiopow = 95;
            gun[8].ratiopow = 85;
            gun[10].ratiopow = 115;
            gun[87].ratiopow = 110;
            gun[7].ratiopow = 100;
            gun[2].ratiopow = 110;
            gun[90].ratiopow = 115;
            gun[11].ratiopow = 115;
            gun[80].ratiopow = 105;
            gun[81].ratiopow = 105;
            gun[37].ratiopow = 100;
            gun[46].ratiopow = 105;
            gun[45].ratiopow = 115;
            gun[48].ratiopow = 145;
            gun[38].ratiopow = 140;
            gun[36].ratiopow = 110;
            gun[43].ratiopow = 120;
            gun[33].ratiopow = 105;
            gun[34].ratiopow = 115;
            gun[47].ratiopow = 110;
            gun[30].ratiopow = 120;
            gun[40].ratiopow = 115;
            gun[42].ratiopow = 105;
            gun[85].ratiopow = 100;
            gun[41].ratiopow = 115;
            gun[35].ratiopow = 115;
            gun[32].ratiopow = 115;
            gun[69].ratiopow = 115;
            gun[98].ratiopow = 110;
            gun[67].ratiopow = 115;
            gun[78].ratiopow = 110;
            gun[71].ratiopow = 125;
            gun[75].ratiopow = 125;
            gun[101].ratiopow = 95;
            gun[74].ratiopow = 95;
            gun[68].ratiopow = 145;
            gun[72].ratiopow = 135;
            gun[70].ratiopow = 90;
            gun[100].ratiopow = 115;
            gun[73].ratiopow = 105;
            gun[76].ratiopow = 115;
            gun[77].ratiopow = 110;
            gun[79].ratiopow = 110;
            gun[99].ratiopow = 110;
            gun[110].ratiopow = 125;
            gun[102].ratiopow = 125;

            gun[14].ratiododge = 90;
            gun[26].ratiododge = 110;
            gun[91].ratiododge = 125;
            gun[18].ratiododge = 120;
            gun[25].ratiododge = 130;
            gun[15].ratiododge = 105;
            gun[83].ratiododge = 120;
            gun[28].ratiododge = 125;
            gun[17].ratiododge = 140;
            gun[16].ratiododge = 110;
            gun[29].ratiododge = 105;
            gun[82].ratiododge = 115;
            gun[20].ratiododge = 110;
            gun[22].ratiododge = 130;
            gun[24].ratiododge = 115;
            gun[27].ratiododge = 85;
            gun[23].ratiododge = 90;
            gun[19].ratiododge = 95;
            gun[84].ratiododge = 110;
            gun[92].ratiododge = 120;
            gun[104].ratiododge = 95;
            gun[94].ratiododge = 125;
            gun[58].ratiododge = 105;
            gun[95].ratiododge = 95;
            gun[59].ratiododge = 110;
            gun[56].ratiododge = 95;
            gun[60].ratiododge = 90;
            gun[50].ratiododge = 120;
            gun[49].ratiododge = 115;
            gun[52].ratiododge = 120;
            gun[62].ratiododge = 105;
            gun[53].ratiododge = 85;
            gun[55].ratiododge = 85;
            gun[97].ratiododge = 105;
            gun[51].ratiododge = 115;
            gun[65].ratiododge = 110;
            gun[64].ratiododge = 95;
            gun[66].ratiododge = 85;
            gun[57].ratiododge = 90;
            gun[96].ratiododge = 105;
            gun[63].ratiododge = 90;
            gun[61].ratiododge = 100;
            gun[107].ratiododge = 130;
            gun[54].ratiododge = 125;
            gun[103].ratiododge = 105;
            gun[3].ratiododge = 115;
            gun[0].ratiododge = 95;
            gun[86].ratiododge = 85;
            gun[4].ratiododge = 100;
            gun[13].ratiododge = 125;
            gun[6].ratiododge = 120;
            gun[5].ratiododge = 95;
            gun[12].ratiododge = 90;
            gun[9].ratiododge = 100;
            gun[89].ratiododge = 95;
            gun[1].ratiododge = 100;
            gun[8].ratiododge = 130;
            gun[10].ratiododge = 95;
            gun[87].ratiododge = 95;
            gun[7].ratiododge = 105;
            gun[2].ratiododge = 95;
            gun[90].ratiododge = 115;
            gun[11].ratiododge = 115;
            gun[80].ratiododge = 120;
            gun[81].ratiododge = 100;
            gun[37].ratiododge = 115;
            gun[46].ratiododge = 100;
            gun[45].ratiododge = 105;
            gun[48].ratiododge = 80;
            gun[38].ratiododge = 80;
            gun[36].ratiododge = 115;
            gun[43].ratiododge = 90;
            gun[33].ratiododge = 85;
            gun[34].ratiododge = 85;
            gun[47].ratiododge = 90;
            gun[30].ratiododge = 95;
            gun[40].ratiododge = 85;
            gun[42].ratiododge = 85;
            gun[85].ratiododge = 110;
            gun[41].ratiododge = 110;
            gun[35].ratiododge = 105;
            gun[32].ratiododge = 115;
            gun[69].ratiododge = 105;
            gun[98].ratiododge = 115;
            gun[67].ratiododge = 125;
            gun[78].ratiododge = 90;
            gun[71].ratiododge = 95;
            gun[75].ratiododge = 100;
            gun[101].ratiododge = 130;
            gun[74].ratiododge = 125;
            gun[68].ratiododge = 75;
            gun[72].ratiododge = 105;
            gun[70].ratiododge = 130;
            gun[100].ratiododge = 110;
            gun[73].ratiododge = 120;
            gun[76].ratiododge = 105;
            gun[77].ratiododge = 105;
            gun[79].ratiododge = 110;
            gun[99].ratiododge = 135;
            gun[110].ratiododge = 120;
            gun[102].ratiododge = 95;

            gun[14].ratiohp = 135;
            gun[26].ratiohp = 105;
            gun[91].ratiohp = 100;
            gun[18].ratiohp = 105;
            gun[25].ratiohp = 90;
            gun[15].ratiohp = 105;
            gun[83].ratiohp = 85;
            gun[28].ratiohp = 90;
            gun[17].ratiohp = 80;
            gun[16].ratiohp = 100;
            gun[29].ratiohp = 105;
            gun[82].ratiohp = 100;
            gun[20].ratiohp = 100;
            gun[22].ratiohp = 90;
            gun[24].ratiohp = 95;
            gun[27].ratiohp = 115;
            gun[23].ratiohp = 105;
            gun[19].ratiohp = 110;
            gun[84].ratiohp = 100;
            gun[92].ratiohp = 105;
            gun[104].ratiohp = 125;
            gun[94].ratiohp = 95;
            gun[58].ratiohp = 115;
            gun[95].ratiohp = 120;
            gun[59].ratiohp = 110;
            gun[56].ratiohp = 115;
            gun[60].ratiohp = 125;
            gun[50].ratiohp = 100;
            gun[49].ratiohp = 110;
            gun[52].ratiohp = 95;
            gun[62].ratiohp = 110;
            gun[53].ratiohp = 120;
            gun[55].ratiohp = 115;
            gun[97].ratiohp = 105;
            gun[51].ratiohp = 100;
            gun[65].ratiohp = 95;
            gun[64].ratiohp = 95;
            gun[66].ratiohp = 105;
            gun[57].ratiohp = 100;
            gun[96].ratiohp = 95;
            gun[63].ratiohp = 100;
            gun[61].ratiohp = 85;
            gun[107].ratiohp = 105;
            gun[54].ratiohp = 120;
            gun[103].ratiohp = 120;
            gun[3].ratiohp = 105;
            gun[0].ratiohp = 120;
            gun[86].ratiohp = 130;
            gun[4].ratiohp = 130;
            gun[13].ratiohp = 95;
            gun[6].ratiohp = 95;
            gun[5].ratiohp = 125;
            gun[12].ratiohp = 120;
            gun[9].ratiohp = 105;
            gun[89].ratiohp = 120;
            gun[1].ratiohp = 110;
            gun[8].ratiohp = 85;
            gun[10].ratiohp = 125;
            gun[87].ratiohp = 115;
            gun[7].ratiohp = 100;
            gun[2].ratiohp = 115;
            gun[90].ratiohp = 95;
            gun[11].ratiohp = 95;
            gun[80].ratiohp = 90;
            gun[81].ratiohp = 100;
            gun[37].ratiohp = 105;
            gun[46].ratiohp = 105;
            gun[45].ratiohp = 90;
            gun[48].ratiohp = 105;
            gun[38].ratiohp = 105;
            gun[36].ratiohp = 95;
            gun[43].ratiohp = 100;
            gun[33].ratiohp = 95;
            gun[34].ratiohp = 105;
            gun[47].ratiohp = 110;
            gun[30].ratiohp = 100;
            gun[40].ratiohp = 95;
            gun[42].ratiohp = 90;
            gun[85].ratiohp = 115;
            gun[41].ratiohp = 95;
            gun[35].ratiohp = 100;
            gun[32].ratiohp = 95;
            gun[69].ratiohp = 110;
            gun[98].ratiohp = 120;
            gun[67].ratiohp = 95;
            gun[78].ratiohp = 120;
            gun[71].ratiohp = 110;
            gun[75].ratiohp = 115;
            gun[101].ratiohp = 105;
            gun[74].ratiohp = 100;
            gun[68].ratiohp = 130;
            gun[72].ratiohp = 105;
            gun[70].ratiohp = 95;
            gun[100].ratiohp = 110;
            gun[73].ratiohp = 85;
            gun[76].ratiohp = 100;
            gun[77].ratiohp = 100;
            gun[79].ratiohp = 105;
            gun[99].ratiohp = 90;
            gun[110].ratiohp = 105;
            gun[102].ratiohp = 105;

            gun[14].ratiorate = 105;
            gun[26].ratiorate = 95;
            gun[91].ratiorate = 110;
            gun[18].ratiorate = 130;
            gun[25].ratiorate = 120;
            gun[15].ratiorate = 85;
            gun[83].ratiorate = 90;
            gun[28].ratiorate = 130;
            gun[17].ratiorate = 115;
            gun[16].ratiorate = 115;
            gun[29].ratiorate = 95;
            gun[82].ratiorate = 115;
            gun[20].ratiorate = 95;
            gun[22].ratiorate = 105;
            gun[24].ratiorate = 115;
            gun[27].ratiorate = 95;
            gun[23].ratiorate = 95;
            gun[19].ratiorate = 120;
            gun[84].ratiorate = 120;
            gun[92].ratiorate = 105;
            gun[104].ratiorate = 120;
            gun[94].ratiorate = 105;
            gun[58].ratiorate = 110;
            gun[95].ratiorate = 108;
            gun[59].ratiorate = 115;
            gun[56].ratiorate = 115;
            gun[60].ratiorate = 105;
            gun[50].ratiorate = 120;
            gun[49].ratiorate = 115;
            gun[52].ratiorate = 115;
            gun[62].ratiorate = 125;
            gun[53].ratiorate = 100;
            gun[55].ratiorate = 90;
            gun[97].ratiorate = 115;
            gun[51].ratiorate = 120;
            gun[65].ratiorate = 120;
            gun[64].ratiorate = 95;
            gun[66].ratiorate = 85;
            gun[57].ratiorate = 90;
            gun[96].ratiorate = 125;
            gun[63].ratiorate = 110;
            gun[61].ratiorate = 115;
            gun[107].ratiorate = 120;
            gun[54].ratiorate = 115;
            gun[103].ratiorate = 90;
            gun[3].ratiorate = 80;
            gun[0].ratiorate = 85;
            gun[86].ratiorate = 100;
            gun[4].ratiorate = 100;
            gun[13].ratiorate = 115;
            gun[6].ratiorate = 110;
            gun[5].ratiorate = 125;
            gun[12].ratiorate = 95;
            gun[9].ratiorate = 100;
            gun[89].ratiorate = 120;
            gun[1].ratiorate = 105;
            gun[8].ratiorate = 115;
            gun[10].ratiorate = 120;
            gun[87].ratiorate = 135;
            gun[7].ratiorate = 105;
            gun[2].ratiorate = 115;
            gun[90].ratiorate = 115;
            gun[11].ratiorate = 115;
            gun[80].ratiorate = 115;
            gun[81].ratiorate = 110;
            gun[37].ratiorate = 105;
            gun[46].ratiorate = 95;
            gun[45].ratiorate = 100;
            gun[48].ratiorate = 85;
            gun[38].ratiorate = 80;
            gun[36].ratiorate = 105;
            gun[43].ratiorate = 115;
            gun[33].ratiorate = 130;
            gun[34].ratiorate = 105;
            gun[47].ratiorate = 120;
            gun[30].ratiorate = 115;
            gun[40].ratiorate = 110;
            gun[42].ratiorate = 120;
            gun[85].ratiorate = 90;
            gun[41].ratiorate = 95;
            gun[35].ratiorate = 85;
            gun[32].ratiorate = 90;
            gun[69].ratiorate = 105;
            gun[98].ratiorate = 115;
            gun[67].ratiorate = 105;
            gun[78].ratiorate = 125;
            gun[71].ratiorate = 95;
            gun[75].ratiorate = 80;
            gun[101].ratiorate = 125;
            gun[74].ratiorate = 110;
            gun[68].ratiorate = 100;
            gun[72].ratiorate = 90;
            gun[70].ratiorate = 125;
            gun[100].ratiorate = 120;
            gun[73].ratiorate = 105;
            gun[76].ratiorate = 125;
            gun[77].ratiorate = 115;
            gun[79].ratiorate = 95;
            gun[99].ratiorate = 115;
            gun[110].ratiorate = 110;
            gun[102].ratiorate = 110;


            gun[0].type = 100503;
            gun[1].type = 102401;
            gun[2].type = 102202;
            gun[3].type = 101309;
            gun[4].type = 100602;
            gun[5].type = 100803;
            gun[6].type = 101502;
            gun[7].type = 102501;
            gun[8].type = 105001;
            gun[9].type = 100610;
            gun[10].type = 102502;
            gun[11].type = 102002;
            gun[12].type = 100802;
            gun[13].type = 101302;
            gun[14].type = 103104;
            gun[15].type = 102101;
            gun[16].type = 102402;
            gun[17].type = 100202;
            gun[18].type = 102304;
            gun[19].type = 102101;
            gun[20].type = 102102;
            gun[21].type = 100207;
            gun[22].type = 102101;
            gun[23].type = 102301;
            gun[24].type = 103103;
            gun[25].type = 102302;
            gun[26].type = 102102;
            gun[27].type = 102201;
            gun[28].type = 102302;
            gun[29].type = 102401;
            gun[30].type = 103002;
            gun[31].type = 100417;
            gun[32].type = 102803;
            gun[33].type = 100102;
            gun[34].type = 102602;
            gun[35].type = 102803;
            gun[36].type = 102601;
            gun[37].type = 100401;
            gun[38].type = 102703;
            gun[39].type = 100403;
            gun[40].type = 102702;
            gun[41].type = 102904;
            gun[42].type = 100413;
            gun[43].type = 100404;
            gun[44].type = 100102;
            gun[45].type = 100104;
            gun[46].type = 100101;
            gun[47].type = 100401;
            gun[48].type = 102704;
            gun[49].type = 102203;
            gun[50].type = 100107;
            gun[51].type = 102113;
            gun[52].type = 100407;
            gun[53].type = 101802;
            gun[54].type = 100115;
            gun[55].type = 102106;
            gun[56].type = 100108;
            gun[57].type = 102109;
            gun[58].type = 100107;
            gun[59].type = 102112;
            gun[60].type = 102107;
            gun[61].type = 101701;
            gun[62].type = 102107;
            gun[63].type = 100102;
            gun[64].type = 100301;
            gun[65].type = 101703;
            gun[66].type = 100101;
            gun[67].type = 100111;
            gun[68].type = 301502;
            gun[69].type = 100117;
            gun[70].type = 105101;
            gun[71].type = 105202;
            gun[72].type = 105201;
            gun[73].type = 105102;
            gun[74].type = 100110;
            gun[75].type = 301503;
            gun[76].type = 100110;
            gun[77].type = 100109;
            gun[78].type = 105104;
            gun[79].type = 105103;
            gun[80].type = 101401;
            gun[81].type = 101601;
            gun[82].type = 100201;
            gun[83].type = 100201;
            gun[84].type = 102201;
            gun[85].type = 100114;
            gun[86].type = 100504;
            gun[87].type = 100804;
            gun[88].type = 101403;
            gun[89].type = 100511;
            gun[90].type = 100603;
            gun[91].type = 102203;
            gun[92].type = 102403;
            gun[93].type = 103104;
            gun[94].type = 100406;
            gun[95].type = 102117;
            gun[96].type = 100101;
            gun[97].type = 102106;
            gun[98].type = 301504;
            gun[99].type = 105201;
            gun[100].type = 100121;
            gun[101].type = 200201;
            gun[102].type = 100502;
            gun[103].type = 101504;
            gun[104].type = 100204;
            gun[105].type = 102302;
            gun[106].type = 102803;
            gun[107].type = 100115;
            gun[108].type = 100116;
            gun[109].type = 102110;
            gun[110].type = 105203;
            gun[111].type = 104101;
            gun[112].type = 100602;
            gun[113].type = 102602;
            gun[114].type = 105105;
            gun[115].type = 101604;
            gun[116].type = 102204;
            gun[117].type = 102804;
            gun[118].type = 100118;
            gun[119].type = 100408;
            gun[120].type = 102102;
            gun[121].type = 101410;
            gun[122].type = 100301;
            gun[123].type = 102110;
            gun[124].type = 100120;
            gun[125].type = 102103;
            gun[126].type = 101802;
            gun[127].type = 100501;
            gun[128].type = 105502;
            gun[129].type = 100701;
            gun[130].type = 105604;
            gun[131].type = 103201;
            gun[132].type = 103203;
            gun[133].type = 105302;
            gun[134].type = 105303;
            gun[135].type = 105404;
            gun[136].type = 100122;
            gun[137].type = 103202;
            gun[138].type = 100122;


            gun[0].equiptype1 = "4,13";
            gun[1].equiptype1 = "4,13";
            gun[2].equiptype1 = "4,13";
            gun[3].equiptype1 = "4,13";
            gun[4].equiptype1 = "4,13";
            gun[5].equiptype1 = "4,13";
            gun[6].equiptype1 = "4,13";
            gun[7].equiptype1 = "4,13";
            gun[8].equiptype1 = "4,13";
            gun[9].equiptype1 = "4,13";
            gun[10].equiptype1 = "4,13";
            gun[11].equiptype1 = "4,13";
            gun[12].equiptype1 = "4,13";
            gun[13].equiptype1 = "4,13";
            gun[14].equiptype1 = "9,10,12";
            gun[15].equiptype1 = "9,10,12";
            gun[16].equiptype1 = "9,10,12";
            gun[17].equiptype1 = "9,10,12";
            gun[18].equiptype1 = "9,10,12";
            gun[19].equiptype1 = "9,10,12";
            gun[20].equiptype1 = "9,10,12";
            gun[21].equiptype1 = "9,10,12";
            gun[22].equiptype1 = "9,10,12";
            gun[23].equiptype1 = "9,10,12";
            gun[24].equiptype1 = "9,10,12";
            gun[25].equiptype1 = "9,10,12";
            gun[26].equiptype1 = "9,10,12";
            gun[27].equiptype1 = "9,10,12";
            gun[28].equiptype1 = "9,10,12";
            gun[29].equiptype1 = "9,10,12";
            gun[30].equiptype1 = "5";
            gun[31].equiptype1 = "5";
            gun[32].equiptype1 = "5";
            gun[33].equiptype1 = "5";
            gun[34].equiptype1 = "5";
            gun[35].equiptype1 = "5";
            gun[36].equiptype1 = "5";
            gun[37].equiptype1 = "5";
            gun[38].equiptype1 = "5";
            gun[39].equiptype1 = "5";
            gun[40].equiptype1 = "5";
            gun[41].equiptype1 = "5";
            gun[42].equiptype1 = "5";
            gun[43].equiptype1 = "5";
            gun[44].equiptype1 = "5";
            gun[45].equiptype1 = "5";
            gun[46].equiptype1 = "5";
            gun[47].equiptype1 = "5";
            gun[48].equiptype1 = "5";
            gun[49].equiptype1 = "8";
            gun[50].equiptype1 = "1,2,3,4,13";
            gun[51].equiptype1 = "1,2,3,4,13";
            gun[52].equiptype1 = "1,2,3,4,13";
            gun[53].equiptype1 = "1,2,3,4,13";
            gun[54].equiptype1 = "1,2,3,4,13";
            gun[55].equiptype1 = "1,2,3,4,13";
            gun[56].equiptype1 = "1,2,3,4,13";
            gun[57].equiptype1 = "1,2,3,4,13";
            gun[58].equiptype1 = "1,2,3,4,13";
            gun[59].equiptype1 = "1,2,3,4,13";
            gun[60].equiptype1 = "1,2,3,4,13";
            gun[61].equiptype1 = "1,2,3,4,13";
            gun[62].equiptype1 = "1,2,3,4,13";
            gun[63].equiptype1 = "1,2,3,4,13";
            gun[64].equiptype1 = "1,2,3,4,13";
            gun[65].equiptype1 = "1,2,3,4,13";
            gun[66].equiptype1 = "1,2,3,4,13";
            gun[67].equiptype1 = "5";
            gun[68].equiptype1 = "5";
            gun[69].equiptype1 = "5";
            gun[70].equiptype1 = "5";
            gun[71].equiptype1 = "5";
            gun[72].equiptype1 = "5";
            gun[73].equiptype1 = "5";
            gun[74].equiptype1 = "5";
            gun[75].equiptype1 = "5";
            gun[76].equiptype1 = "5";
            gun[77].equiptype1 = "5";
            gun[78].equiptype1 = "5";
            gun[79].equiptype1 = "5";
            gun[80].equiptype1 = "4,13";
            gun[81].equiptype1 = "4,13";
            gun[82].equiptype1 = "9,10,12";
            gun[83].equiptype1 = "9,10,12";
            gun[84].equiptype1 = "9,10,12";
            gun[85].equiptype1 = "5";
            gun[86].equiptype1 = "4,13";
            gun[87].equiptype1 = "4,13";
            gun[88].equiptype1 = "4,13";
            gun[89].equiptype1 = "4,13";
            gun[90].equiptype1 = "4,13";
            gun[91].equiptype1 = "9,10,12";
            gun[92].equiptype1 = "9,10,12";
            gun[93].equiptype1 = "9,10,12";
            gun[94].equiptype1 = "1,2,3,4,13";
            gun[95].equiptype1 = "1,2,3,4,13";
            gun[96].equiptype1 = "1,2,3,4,13";
            gun[97].equiptype1 = "1,2,3,4,13";
            gun[98].equiptype1 = "5";
            gun[99].equiptype1 = "5";
            gun[100].equiptype1 = "5";
            gun[101].equiptype1 = "5";
            gun[102].equiptype1 = "4,13";
            gun[103].equiptype1 = "4,13";
            gun[104].equiptype1 = "9,10,12";
            gun[105].equiptype1 = "9,10,12";
            gun[106].equiptype1 = "5";
            gun[107].equiptype1 = "1,2,3,4,13";
            gun[108].equiptype1 = "1,2,3,4,13";
            gun[109].equiptype1 = "1,2,3,4,13";
            gun[110].equiptype1 = "5";
            gun[111].equiptype1 = "1,2,3,4,13";
            gun[112].equiptype1 = "4,13";
            gun[113].equiptype1 = "5";
            gun[114].equiptype1 = "5";
            gun[115].equiptype1 = "4,13";
            gun[116].equiptype1 = "9,10,12";
            gun[117].equiptype1 = "5";
            gun[118].equiptype1 = "1,2,3,4,13";
            gun[119].equiptype1 = "1,2,3,4,13";
            gun[120].equiptype1 = "9,10,12";
            gun[121].equiptype1 = "4,13";
            gun[122].equiptype1 = "1,2,3,4,13";
            gun[123].equiptype1 = "1,2,3,4,13";
            gun[124].equiptype1 = "9,10,12";
            gun[125].equiptype1 = "9,10,12";
            if (DateTime.Now > DateTime.Parse("2017-01-21"))
            {
                gun[126].equiptype1 = "1,2,3,4,13";
            }
            gun[131].equiptype1 = "9,11";
            gun[132].equiptype1 = "9,11";
            gun[133].equiptype1 = "9,11";
            gun[134].equiptype1 = "9,11";
            gun[135].equiptype1 = "9,11";
            gun[136].equiptype1 = "9,11";
            gun[137].equiptype1 = "9,11";
            gun[138].equiptype1 = "9,11";

            gun[0].equiptype2 = "6";
            gun[1].equiptype2 = "6";
            gun[2].equiptype2 = "6";
            gun[3].equiptype2 = "6";
            gun[4].equiptype2 = "6";
            gun[5].equiptype2 = "6";
            gun[6].equiptype2 = "6";
            gun[7].equiptype2 = "6";
            gun[8].equiptype2 = "6";
            gun[9].equiptype2 = "6";
            gun[10].equiptype2 = "6";
            gun[11].equiptype2 = "6";
            gun[12].equiptype2 = "6";
            gun[13].equiptype2 = "6";
            gun[14].equiptype2 = "6";
            gun[15].equiptype2 = "6";
            gun[16].equiptype2 = "6";
            gun[17].equiptype2 = "6";
            gun[18].equiptype2 = "6";
            gun[19].equiptype2 = "6";
            gun[20].equiptype2 = "6";
            gun[21].equiptype2 = "6";
            gun[22].equiptype2 = "6";
            gun[23].equiptype2 = "6";
            gun[24].equiptype2 = "6";
            gun[25].equiptype2 = "6";
            gun[26].equiptype2 = "6";
            gun[27].equiptype2 = "6";
            gun[28].equiptype2 = "6";
            gun[29].equiptype2 = "6";
            gun[30].equiptype2 = "1,2,3,13";
            gun[31].equiptype2 = "1,2,3,13";
            gun[32].equiptype2 = "1,2,3,13";
            gun[33].equiptype2 = "1,2,3,13";
            gun[34].equiptype2 = "1,2,3,13";
            gun[35].equiptype2 = "1,2,3,13";
            gun[36].equiptype2 = "1,2,3,13";
            gun[37].equiptype2 = "1,2,3,13";
            gun[38].equiptype2 = "1,2,3,13";
            gun[39].equiptype2 = "1,2,3,13";
            gun[40].equiptype2 = "1,2,3,13";
            gun[41].equiptype2 = "1,2,3,13";
            gun[42].equiptype2 = "1,2,3,13";
            gun[43].equiptype2 = "1,2,3,13";
            gun[44].equiptype2 = "1,2,3,13";
            gun[45].equiptype2 = "1,2,3,13";
            gun[46].equiptype2 = "1,2,3,13";
            gun[47].equiptype2 = "1,2,3,13";
            gun[48].equiptype2 = "1,2,3,13";
            gun[49].equiptype2 = "9,10,11,12";
            gun[50].equiptype2 = "8";
            gun[51].equiptype2 = "1,2,3,4,13";
            gun[52].equiptype2 = "1,2,3,4,13";
            gun[53].equiptype2 = "8";
            gun[54].equiptype2 = "8";
            gun[55].equiptype2 = "8";
            gun[56].equiptype2 = "8";
            gun[57].equiptype2 = "8";
            gun[58].equiptype2 = "8";
            gun[59].equiptype2 = "8";
            gun[60].equiptype2 = "8";
            gun[61].equiptype2 = "8";
            gun[62].equiptype2 = "8";
            gun[63].equiptype2 = "8";
            gun[64].equiptype2 = "8";
            gun[65].equiptype2 = "8";
            gun[66].equiptype2 = "8";
            gun[67].equiptype2 = "1,2,3";
            gun[68].equiptype2 = "1,2,3";
            gun[69].equiptype2 = "1,2,3";
            gun[70].equiptype2 = "1,2,3";
            gun[71].equiptype2 = "1,2,3";
            gun[72].equiptype2 = "1,2,3";
            gun[73].equiptype2 = "1,2,3";
            gun[74].equiptype2 = "1,2,3";
            gun[75].equiptype2 = "1,2,3";
            gun[76].equiptype2 = "1,2,3";
            gun[77].equiptype2 = "1,2,3";
            gun[78].equiptype2 = "1,2,3";
            gun[79].equiptype2 = "1,2,3";
            gun[80].equiptype2 = "6";
            gun[81].equiptype2 = "6";
            gun[82].equiptype2 = "6";
            gun[83].equiptype2 = "6";
            gun[84].equiptype2 = "6";
            gun[85].equiptype2 = "1,2,3,13";
            gun[86].equiptype2 = "6";
            gun[87].equiptype2 = "6";
            gun[88].equiptype2 = "6";
            gun[89].equiptype2 = "6";
            gun[90].equiptype2 = "6";
            gun[91].equiptype2 = "6";
            gun[92].equiptype2 = "6";
            gun[93].equiptype2 = "6";
            gun[94].equiptype2 = "8";
            gun[95].equiptype2 = "8";
            gun[96].equiptype2 = "8";
            gun[97].equiptype2 = "8";
            gun[98].equiptype2 = "1,2,3";
            gun[99].equiptype2 = "1,2,3";
            gun[100].equiptype2 = "1,2,3";
            gun[101].equiptype2 = "1,2,3";
            gun[102].equiptype2 = "6";
            gun[103].equiptype2 = "6";
            gun[104].equiptype2 = "6";
            gun[105].equiptype2 = "6";
            gun[106].equiptype2 = "1,2,3,13";
            gun[107].equiptype2 = "8";
            gun[108].equiptype2 = "8";
            gun[109].equiptype2 = "8";
            gun[110].equiptype2 = "1,2,3";
            gun[111].equiptype2 = "8";
            gun[112].equiptype2 = "6";
            gun[113].equiptype2 = "1,2,3,13";
            gun[114].equiptype2 = "1,2,3";
            gun[115].equiptype2 = "6";
            gun[116].equiptype2 = "6";
            gun[117].equiptype2 = "1,2,3,13";
            gun[118].equiptype2 = "8";
            gun[119].equiptype2 = "8";
            gun[120].equiptype2 = "6";
            gun[121].equiptype2 = "6";
            gun[122].equiptype2 = "8";
            gun[123].equiptype2 = "8";
            gun[124].equiptype2 = "6";
            gun[125].equiptype2 = "6";
            if (DateTime.Now > DateTime.Parse("2017-01-21"))
            {
                gun[126].equiptype2 = "5,8";
            }
            gun[131].equiptype2 = "7";
            gun[132].equiptype2 = "7";
            gun[133].equiptype2 = "7";
            gun[134].equiptype2 = "7";
            gun[135].equiptype2 = "7";
            gun[136].equiptype2 = "7";
            gun[137].equiptype2 = "7";
            gun[138].equiptype2 = "7";

            gun[0].equiptype3 = "9,10,12";
            gun[1].equiptype3 = "9,10,12";
            gun[2].equiptype3 = "9,10,12";
            gun[3].equiptype3 = "9,10,12";
            gun[4].equiptype3 = "9,10,12";
            gun[5].equiptype3 = "9,10,12";
            gun[6].equiptype3 = "9,10,12";
            gun[7].equiptype3 = "9,10,12";
            gun[8].equiptype3 = "9,10,12";
            gun[9].equiptype3 = "9,10,12";
            gun[10].equiptype3 = "9,10,12";
            gun[11].equiptype3 = "9,10,12";
            gun[12].equiptype3 = "9,10,12";
            gun[13].equiptype3 = "9,10,12";
            gun[14].equiptype3 = "1,2,3,4,13";
            gun[15].equiptype3 = "1,2,3,4,13";
            gun[16].equiptype3 = "1,2,3,4,13";
            gun[17].equiptype3 = "1,2,3,4,13";
            gun[18].equiptype3 = "1,2,3,4,13";
            gun[19].equiptype3 = "1,2,3,4,13";
            gun[20].equiptype3 = "1,2,3,4,13";
            gun[21].equiptype3 = "1,2,3,4,13";
            gun[22].equiptype3 = "1,2,3,4,13";
            gun[23].equiptype3 = "1,2,3,4,13";
            gun[24].equiptype3 = "1,2,3,4,13";
            gun[25].equiptype3 = "1,2,3,4,13";
            gun[26].equiptype3 = "1,2,3,4,13";
            gun[27].equiptype3 = "1,2,3,4,13";
            gun[28].equiptype3 = "1,2,3,4,13";
            gun[29].equiptype3 = "1,2,3,4,13";
            gun[30].equiptype3 = "9,15";
            gun[31].equiptype3 = "9,15";
            gun[32].equiptype3 = "9,15";
            gun[33].equiptype3 = "9,15";
            gun[34].equiptype3 = "9,15";
            gun[35].equiptype3 = "9,15";
            gun[36].equiptype3 = "9,15";
            gun[37].equiptype3 = "9,15";
            gun[38].equiptype3 = "9,15";
            gun[39].equiptype3 = "9,15";
            gun[40].equiptype3 = "9,15";
            gun[41].equiptype3 = "9,15";
            gun[42].equiptype3 = "9,15";
            gun[43].equiptype3 = "9,15";
            gun[44].equiptype3 = "9,15";
            gun[45].equiptype3 = "9,15";
            gun[46].equiptype3 = "9,15";
            gun[47].equiptype3 = "9,15";
            gun[48].equiptype3 = "9,15";
            gun[49].equiptype3 = "9,10,11,12";
            gun[50].equiptype3 = "9,10,12";
            gun[51].equiptype3 = "8";
            gun[52].equiptype3 = "8";
            gun[53].equiptype3 = "9,10,12";
            gun[54].equiptype3 = "9,10,12";
            gun[55].equiptype3 = "9,10,12";
            gun[56].equiptype3 = "9,10,12";
            gun[57].equiptype3 = "9,10,12";
            gun[58].equiptype3 = "9,10,12";
            gun[59].equiptype3 = "9,10,12";
            gun[60].equiptype3 = "9,10,12";
            gun[61].equiptype3 = "9,10,12";
            gun[62].equiptype3 = "9,10,12";
            gun[63].equiptype3 = "9,10,12";
            gun[64].equiptype3 = "9,10,12";
            gun[65].equiptype3 = "9,10,12";
            gun[66].equiptype3 = "9,10,12";
            gun[67].equiptype3 = "9,14";
            gun[68].equiptype3 = "9,14";
            gun[69].equiptype3 = "9,14";
            gun[70].equiptype3 = "9,14";
            gun[71].equiptype3 = "9,14";
            gun[72].equiptype3 = "9,14";
            gun[73].equiptype3 = "9,14";
            gun[74].equiptype3 = "9,14";
            gun[75].equiptype3 = "9,14";
            gun[76].equiptype3 = "9,14";
            gun[77].equiptype3 = "9,14";
            gun[78].equiptype3 = "9,14";
            gun[79].equiptype3 = "9,14";
            gun[80].equiptype3 = "9,10,12";
            gun[81].equiptype3 = "9,10,12";
            gun[82].equiptype3 = "1,2,3,4,13";
            gun[83].equiptype3 = "1,2,3,4,13";
            gun[84].equiptype3 = "1,2,3,4,13";
            gun[85].equiptype3 = "9,15";
            gun[86].equiptype3 = "9,10,12";
            gun[87].equiptype3 = "9,10,12";
            gun[88].equiptype3 = "9,10,12";
            gun[89].equiptype3 = "9,10,12";
            gun[90].equiptype3 = "9,10,12";
            gun[91].equiptype3 = "1,2,3,4,13";
            gun[92].equiptype3 = "1,2,3,4,13";
            gun[93].equiptype3 = "1,2,3,4,13";
            gun[94].equiptype3 = "9,10,12";
            gun[95].equiptype3 = "9,10,12";
            gun[96].equiptype3 = "9,10,12";
            gun[97].equiptype3 = "9,10,12";
            gun[98].equiptype3 = "9,14";
            gun[99].equiptype3 = "9,14";
            gun[100].equiptype3 = "9,14";
            gun[101].equiptype3 = "9,14";
            gun[102].equiptype3 = "9,10,12";
            gun[103].equiptype3 = "9,10,12";
            gun[104].equiptype3 = "1,2,3,4,13";
            gun[105].equiptype3 = "1,2,3,4,13";
            gun[106].equiptype3 = "9,15";
            gun[107].equiptype3 = "9,10,12";
            gun[108].equiptype3 = "9,10,12";
            gun[109].equiptype3 = "9,10,12";
            gun[110].equiptype3 = "9,14";
            gun[111].equiptype3 = "9,10,12";
            gun[112].equiptype3 = "9,10,12";
            gun[113].equiptype3 = "9,15";
            gun[114].equiptype3 = "9,14";
            gun[115].equiptype3 = "9,10,12";
            gun[116].equiptype3 = "1,2,3,4,13";
            gun[117].equiptype3 = "9,15";
            gun[118].equiptype3 = "9,10,12";
            gun[119].equiptype3 = "9,10,12";
            gun[120].equiptype3 = "1,2,3,4,13";
            gun[121].equiptype3 = "9,10,12";
            gun[122].equiptype3 = "9,10,12";
            gun[123].equiptype3 = "9,10,12";
            gun[124].equiptype3 = "1,2,3,4,13";
            gun[125].equiptype3 = "1,2,3,4,13";
            if (DateTime.Now > DateTime.Parse("2017-01-21"))
            {
                gun[126].equiptype3 = "9,10,12";
            }
            gun[131].equiptype3 = "1,2,3,4";
            gun[132].equiptype3 = "1,2,3,4";
            gun[133].equiptype3 = "1,2,3,4";
            gun[134].equiptype3 = "1,2,3,4";
            gun[135].equiptype3 = "1,2,3,4";
            gun[136].equiptype3 = "1,2,3,4";
            gun[137].equiptype3 = "1,2,3,4";
            gun[138].equiptype3 = "1,2,3,4";

            gun[0].grid_center = 5;
            gun[1].grid_center = 5;
            gun[2].grid_center = 5;
            gun[3].grid_center = 5;
            gun[4].grid_center = 5;
            gun[5].grid_center = 5;
            gun[6].grid_center = 5;
            gun[7].grid_center = 5;
            gun[8].grid_center = 5;
            gun[9].grid_center = 5;
            gun[10].grid_center = 5;
            gun[11].grid_center = 5;
            gun[12].grid_center = 5;
            gun[13].grid_center = 5;
            gun[14].grid_center = 5;
            gun[15].grid_center = 5;
            gun[16].grid_center = 5;
            gun[17].grid_center = 5;
            gun[18].grid_center = 5;
            gun[19].grid_center = 5;
            gun[20].grid_center = 5;
            gun[21].grid_center = 5;
            gun[22].grid_center = 5;
            gun[23].grid_center = 5;
            gun[24].grid_center = 5;
            gun[25].grid_center = 5;
            gun[26].grid_center = 5;
            gun[27].grid_center = 5;
            gun[28].grid_center = 5;
            gun[29].grid_center = 5;
            gun[30].grid_center = 5;
            gun[31].grid_center = 5;
            gun[32].grid_center = 5;
            gun[33].grid_center = 5;
            gun[34].grid_center = 5;
            gun[35].grid_center = 5;
            gun[36].grid_center = 5;
            gun[37].grid_center = 5;
            gun[38].grid_center = 5;
            gun[39].grid_center = 5;
            gun[40].grid_center = 5;
            gun[41].grid_center = 5;
            gun[42].grid_center = 5;
            gun[43].grid_center = 5;
            gun[44].grid_center = 5;
            gun[45].grid_center = 5;
            gun[46].grid_center = 5;
            gun[47].grid_center = 5;
            gun[48].grid_center = 5;
            gun[49].grid_center = 5;
            gun[50].grid_center = 5;
            gun[51].grid_center = 5;
            gun[52].grid_center = 5;
            gun[53].grid_center = 5;
            gun[54].grid_center = 5;
            gun[55].grid_center = 5;
            gun[56].grid_center = 5;
            gun[57].grid_center = 5;
            gun[58].grid_center = 5;
            gun[59].grid_center = 5;
            gun[60].grid_center = 5;
            gun[61].grid_center = 5;
            gun[62].grid_center = 5;
            gun[63].grid_center = 5;
            gun[64].grid_center = 5;
            gun[65].grid_center = 5;
            gun[66].grid_center = 5;
            gun[67].grid_center = 4;
            gun[68].grid_center = 4;
            gun[69].grid_center = 7;
            gun[70].grid_center = 4;
            gun[71].grid_center = 1;
            gun[72].grid_center = 4;
            gun[73].grid_center = 1;
            gun[74].grid_center = 4;
            gun[75].grid_center = 4;
            gun[76].grid_center = 7;
            gun[77].grid_center = 1;
            gun[78].grid_center = 4;
            gun[79].grid_center = 7;
            gun[80].grid_center = 5;
            gun[81].grid_center = 5;
            gun[82].grid_center = 5;
            gun[83].grid_center = 5;
            gun[84].grid_center = 5;
            gun[85].grid_center = 5;
            gun[86].grid_center = 5;
            gun[87].grid_center = 5;
            gun[88].grid_center = 5;
            gun[89].grid_center = 5;
            gun[90].grid_center = 5;
            gun[91].grid_center = 5;
            gun[92].grid_center = 5;
            gun[93].grid_center = 5;
            gun[94].grid_center = 5;
            gun[95].grid_center = 5;
            gun[96].grid_center = 5;
            gun[97].grid_center = 5;
            gun[98].grid_center = 4;
            gun[99].grid_center = 4;
            gun[100].grid_center = 7;
            gun[101].grid_center = 4;
            gun[102].grid_center = 5;
            gun[103].grid_center = 5;
            gun[104].grid_center = 5;
            gun[105].grid_center = 5;
            gun[106].grid_center = 5;
            gun[107].grid_center = 5;
            gun[108].grid_center = 5;
            gun[109].grid_center = 5;
            gun[110].grid_center = 1;
            gun[111].grid_center = 5;
            gun[112].grid_center = 5;
            gun[113].grid_center = 5;
            gun[114].grid_center = 4;
            gun[115].grid_center = 5;
            gun[116].grid_center = 5;
            gun[117].grid_center = 5;
            gun[118].grid_center = 5;
            gun[119].grid_center = 5;
            gun[120].grid_center = 5;
            gun[121].grid_center = 5;
            gun[122].grid_center = 5;
            gun[123].grid_center = 5;
            gun[124].grid_center = 5;
            gun[125].grid_center = 5;
            gun[126].grid_center = 5;
            gun[127].grid_center = 5;
            gun[128].grid_center = 5;
            gun[129].grid_center = 5;
            gun[130].grid_center = 5;
            gun[131].grid_center = 6;
            gun[132].grid_center = 6;
            gun[133].grid_center = 9;
            gun[134].grid_center = 3;
            gun[135].grid_center = 6;
            gun[136].grid_center = 9;
            gun[137].grid_center = 3;
            gun[138].grid_center = 6;

            gun[0].damageup = 0.12;
            gun[0].hitup = 0.25;
            gun[1].shotspeedup = 0.1;
            gun[1].hitup = 0.25;
            gun[2].dodgeup = 0.1;
            gun[2].damageup = 0.1;
            gun[3].damageup = 0.16;
            gun[3].critup = 0.08;
            gun[4].shotspeedup = 0.1;
            gun[4].hitup = 0.25;
            gun[5].damageup = 0.06;
            gun[5].shotspeedup = 0.12;
            gun[6].damageup = 0.1;
            gun[6].shotspeedup = 0.06;
            gun[7].shotspeedup = 0.07;
            gun[7].hitup = 0.28;
            gun[8].shotspeedup = 0.16;
            gun[8].critup = 0.08;
            gun[9].damageup = 0.07;
            gun[9].hitup = 0.35;
            gun[10].hitup = 0.32;
            gun[10].dodgeup = 0.15;
            gun[11].hitup = 0.25;
            gun[11].dodgeup = 0.2;
            gun[12].shotspeedup = 0.1;
            gun[12].dodgeup = 0.1;
            gun[13].hitup = 0.32;
            gun[13].dodgeup = 0.15;
            gun[14].damageup = 0.12;
            gun[14].dodgeup = 0.15;
            gun[15].hitup = 0.4;
            gun[15].dodgeup = 0.3;
            gun[16].damageup = 0.12;
            gun[17].damageup = 0.1;
            gun[17].dodgeup = 0.12;
            gun[18].shotspeedup = 0.25;
            gun[19].damageup = 0.1;
            gun[19].shotspeedup = 0.05;
            gun[20].damageup = 0.12;
            gun[21].damageup = 0.08;
            gun[21].dodgeup = 0.2;
            gun[22].damageup = 0.1;
            gun[22].hitup = 0.25;
            gun[23].hitup = 0.25;
            gun[23].dodgeup = 0.2;
            gun[24].hitup = 0.4;
            gun[24].critup = 0.2;
            gun[25].shotspeedup = 0.15;
            gun[25].hitup = 0.5;
            gun[26].hitup = 0.1;
            gun[26].dodgeup = 0.3;
            gun[27].damageup = 0.05;
            gun[27].shotspeedup = 0.1;
            gun[28].damageup = 0.18;
            gun[29].shotspeedup = 0.1;
            gun[29].dodgeup = 0.1;
            gun[30].rateup = 0.12;
            gun[31].rateup = 0.12;
            gun[32].rateup = 0.15;
            gun[33].rateup = 0.12;
            gun[34].rateup = 0.12;
            gun[35].rateup = 0.15;
            gun[36].rateup = 0.1;
            gun[37].rateup = 0.1;
            gun[38].rateup = 0.15;
            gun[39].rateup = 0.15;
            gun[40].rateup = 0.12;
            gun[41].rateup = 0.18;
            gun[42].rateup = 0.1;
            gun[43].rateup = 0.18;
            gun[44].rateup = 0.12;
            gun[45].rateup = 0.18;
            gun[46].rateup = 0.1;
            gun[47].rateup = 0.1;
            gun[48].rateup = 0.18;
            gun[49].damageup = 0.1;
            gun[49].dodgeup = 0.12;
            gun[50].damageup = 0.18;
            gun[50].critup = 0.3;
            gun[51].hitup = 0.5;
            gun[51].dodgeup = 0.12;
            gun[52].shotspeedup = 0.1;
            gun[52].dodgeup = 0.12;
            gun[53].dodgeup = 0.18;
            gun[54].damageup = 0.25;
            gun[54].shotspeedup = 0.1;
            gun[55].dodgeup = 0.2;
            gun[55].hitup = 0.6;
            gun[56].hitup = 0.5;
            gun[56].dodgeup = 0.15;
            gun[57].shotspeedup = 0.2;
            gun[57].hitup = 0.5;
            gun[58].damageup = 0.3;
            gun[58].shotspeedup = 0.1;
            gun[59].damageup = 0.4;
            gun[60].dodgeup = 0.15;
            gun[60].critup = 0.1;
            gun[61].damageup = 0.2;
            gun[61].hitup = 0.5;
            gun[62].damageup = 0.25;
            gun[62].hitup = 0.6;
            gun[63].hitup = 0.5;
            gun[63].dodgeup = 0.12;
            gun[64].hitup = 0.5;
            gun[64].dodgeup = 0.1;
            gun[65].dodgeup = 0.18;
            gun[66].damageup = 0.2;
            gun[66].shotspeedup = 0.1;
            gun[67].damageup = 0.15;
            gun[67].armorup = 0.1;
            gun[68].damageup = 0.22;
            gun[69].damageup = 0.1;
            gun[69].shotspeedup = 0.08;
            gun[70].shotspeedup = 0.12;
            gun[70].hitup = 0.1;
            gun[71].hitup = 0.25;
            gun[71].armorup = 0.1;
            gun[72].damageup = 0.1;
            gun[72].shotspeedup = 0.1;
            gun[73].shotspeedup = 0.15;
            gun[74].shotspeedup = 0.16;
            gun[75].damageup = 0.18;
            gun[76].damageup = 0.22;
            gun[77].damageup = 0.2;
            gun[78].damageup = 0.1;
            gun[78].hitup = 0.15;
            gun[79].shotspeedup = 0.1;
            gun[79].hitup = 0.12;
            gun[80].shotspeedup = 0.1;
            gun[80].hitup = 0.2;
            gun[81].damageup = 0.14;
            gun[82].damageup = 0.2;
            gun[83].dodgeup = 0.2;
            gun[84].shotspeedup = 0.2;
            gun[85].rateup = 0.12;
            gun[86].damageup = 0.15;
            gun[86].dodgeup = 0.1;
            gun[87].shotspeedup = 0.15;
            gun[87].hitup = 0.25;
            gun[88].damageup = 0.06;
            gun[88].hitup = 0.45;
            gun[89].damageup = 0.18;
            gun[90].shotspeedup = 0.1;
            gun[90].dodgeup = 0.12;
            gun[91].shotspeedup = 0.12;
            gun[91].hitup = 0.3;
            gun[92].damageup = 0.18;
            gun[92].critup = 0.3;
            gun[93].damageup = 0.1;
            gun[93].shotspeedup = 0.08;
            gun[94].damageup = 0.15;
            gun[94].shotspeedup = 0.2;
            gun[95].dodgeup = 0.2;
            gun[96].damageup = 0.2;
            gun[96].dodgeup = 0.1;
            gun[97].shotspeedup = 0.25;
            gun[97].hitup = 0.5;
            gun[98].damageup = 0.1;
            gun[98].armorup = 0.1;
            gun[99].hitup = 0.3;
            gun[100].shotspeedup = 0.2;
            gun[101].armorup = 0.2;
            gun[102].damageup = 0.12;
            gun[102].hitup = 0.2;
            gun[103].damageup = 0.1;
            gun[103].shotspeedup = 0.08;
            gun[104].shotspeedup = 0.15;
            gun[104].hitup = 0.3;
            gun[105].damageup = 0.12;
            gun[105].dodgeup = 0.1;
            gun[106].rateup = 0.15;
            gun[107].shotspeedup = 0.1;
            gun[107].dodgeup = 0.15;
            gun[108].shotspeedup = 0.25;
            gun[108].hitup = 0.65;
            gun[109].damageup = 0.25;
            gun[109].hitup = 0.5;
            gun[110].shotspeedup = 0.18;
            gun[111].damageup = 0.3;
            gun[111].dodgeup = 0.1;
            gun[112].shotspeedup = 0.06;
            gun[112].dodgeup = 0.18;
            gun[113].rateup = 0.12;
            gun[114].hitup = 0.12;
            gun[114].armorup = 0.15;
            gun[115].damageup = 0.1;
            gun[115].dodgeup = 0.15;
            gun[116].damageup = 0.2;
            gun[117].rateup = 0.18;
            gun[118].damageup = 0.1;
            gun[118].dodgeup = 0.18;
            gun[119].shotspeedup = 0.1;
            gun[119].dodgeup = 0.18;
            gun[120].hitup = 0.55;
            gun[121].damageup = 0.1;
            gun[121].hitup = 0.25;
            gun[122].damageup = 0.1;
            gun[122].shotspeedup = 0.2;
            gun[123].shotspeedup = 0.16;
            gun[123].hitup = 0.75;
            gun[124].shotspeedup = 0.18;
            gun[124].critup = 0.3;
            gun[125].damageup = 0.24;
            gun[126].damageup = 0.35;
            gun[127].damageup = 0.08;
            gun[127].shotspeedup = 0.05;
            gun[128].hitup = 0.28;
            gun[128].dodgeup = 0.18;
            gun[129].shotspeedup = 0.14;
            gun[130].shotspeedup = 0.1;
            gun[130].hitup = 0.35;
            gun[131].damageup = 0.2;
            gun[131].hitup = 0.2;
            gun[132].damageup = 0.18;
            gun[133].damageup = 0.18;
            gun[134].hitup = 0.55;
            gun[135].damageup = 0.2;
            gun[136].damageup = 0.12;
            gun[136].hitup = 0.3;
            gun[137].damageup = 0.12;
            gun[137].hitup = 0.3;
            gun[138].damageup = 0.12;

            gun[0].number = 4; gun[0].effect0 = 4; gun[0].effect1 = 8; gun[0].effect2 = 2; gun[0].effect3 = 6;
            gun[1].number = 4; gun[1].effect0 = 4; gun[1].effect1 = 8; gun[1].effect2 = 2; gun[1].effect3 = 6;
            gun[2].number = 4; gun[2].effect0 = 8; gun[2].effect1 = 2; gun[2].effect2 = 9; gun[2].effect3 = 3;
            gun[3].number = 3; gun[3].effect0 = 4; gun[3].effect1 = 8; gun[3].effect2 = 2;
            gun[4].number = 4; gun[4].effect0 = 8; gun[4].effect1 = 2; gun[4].effect2 = 9; gun[4].effect3 = 3;
            gun[5].number = 4; gun[5].effect0 = 8; gun[5].effect1 = 2; gun[5].effect2 = 9; gun[5].effect3 = 3;
            gun[6].number = 4; gun[6].effect0 = 7; gun[6].effect1 = 4; gun[6].effect2 = 1; gun[6].effect3 = 6;
            gun[7].number = 4; gun[7].effect0 = 8; gun[7].effect1 = 2; gun[7].effect2 = 9; gun[7].effect3 = 3;
            gun[8].number = 4; gun[8].effect0 = 7; gun[8].effect1 = 4; gun[8].effect2 = 1; gun[8].effect3 = 6;
            gun[9].number = 3; gun[9].effect0 = 8; gun[9].effect1 = 2; gun[9].effect2 = 6;
            gun[10].number = 3; gun[10].effect0 = 7; gun[10].effect1 = 1; gun[10].effect2 = 6;
            gun[11].number = 8; gun[11].effect0 = 7; gun[11].effect1 = 4; gun[11].effect2 = 1; gun[11].effect3 = 8; gun[11].effect4 = 2; gun[11].effect5 = 9; gun[11].effect6 = 6; gun[11].effect7 = 3;
            gun[12].number = 4; gun[12].effect0 = 7; gun[12].effect1 = 1; gun[12].effect2 = 9; gun[12].effect3 = 3;
            gun[13].number = 5; gun[13].effect0 = 7; gun[13].effect1 = 1; gun[13].effect2 = 9; gun[13].effect3 = 6; gun[13].effect4 = 3;
            gun[14].number = 2; gun[14].effect0 = 7; gun[14].effect1 = 1;
            gun[15].number = 1; gun[15].effect0 = 4;
            gun[16].number = 3; gun[16].effect0 = 7; gun[16].effect1 = 4; gun[16].effect2 = 1;
            gun[17].number = 2; gun[17].effect0 = 7; gun[17].effect1 = 1;
            gun[18].number = 1; gun[18].effect0 = 4;
            gun[19].number = 2; gun[19].effect0 = 8; gun[19].effect1 = 2;
            gun[20].number = 3; gun[20].effect0 = 7; gun[20].effect1 = 4; gun[20].effect2 = 1;
            gun[21].number = 2; gun[21].effect0 = 7; gun[21].effect1 = 1;
            gun[22].number = 2; gun[22].effect0 = 7; gun[22].effect1 = 1;
            gun[23].number = 2; gun[23].effect0 = 7; gun[23].effect1 = 1;
            gun[24].number = 2; gun[24].effect0 = 7; gun[24].effect1 = 1;
            gun[25].number = 1; gun[25].effect0 = 4;
            gun[26].number = 3; gun[26].effect0 = 7; gun[26].effect1 = 4; gun[26].effect2 = 1;
            gun[27].number = 2; gun[27].effect0 = 7; gun[27].effect1 = 1;
            gun[28].number = 2; gun[28].effect0 = 8; gun[28].effect1 = 2;
            gun[29].number = 2; gun[29].effect0 = 7; gun[29].effect1 = 1;
            gun[30].number = 1; gun[30].effect0 = 6;
            gun[31].number = 2; gun[31].effect0 = 8; gun[31].effect1 = 2;
            gun[32].number = 1; gun[32].effect0 = 9;
            gun[33].number = 2; gun[33].effect0 = 9; gun[33].effect1 = 3;
            gun[34].number = 2; gun[34].effect0 = 8; gun[34].effect1 = 2;
            gun[35].number = 1; gun[35].effect0 = 2;
            gun[36].number = 1; gun[36].effect0 = 6;
            gun[37].number = 2; gun[37].effect0 = 8; gun[37].effect1 = 2;
            gun[38].number = 1; gun[38].effect0 = 8;
            gun[39].number = 2; gun[39].effect0 = 9; gun[39].effect1 = 3;
            gun[40].number = 1; gun[40].effect0 = 3;
            gun[41].number = 2; gun[41].effect0 = 9; gun[41].effect1 = 3;
            gun[42].number = 2; gun[42].effect0 = 9; gun[42].effect1 = 3;
            gun[43].number = 1; gun[43].effect0 = 6;
            gun[44].number = 2; gun[44].effect0 = 8; gun[44].effect1 = 2;
            gun[45].number = 2; gun[45].effect0 = 8; gun[45].effect1 = 2;
            gun[46].number = 2; gun[46].effect0 = 9; gun[46].effect1 = 3;
            gun[47].number = 1; gun[47].effect0 = 6;
            gun[48].number = 1; gun[48].effect0 = 6;
            gun[49].number = 4; gun[49].effect0 = 8; gun[49].effect1 = 2; gun[49].effect2 = 9; gun[49].effect3 = 3;
            gun[50].number = 5; gun[50].effect0 = 8; gun[50].effect1 = 2; gun[50].effect2 = 9; gun[50].effect3 = 6; gun[50].effect4 = 3;
            gun[51].number = 3; gun[51].effect0 = 3; gun[51].effect1 = 6; gun[51].effect2 = 9;
            gun[52].number = 3; gun[52].effect0 = 3; gun[52].effect1 = 6; gun[52].effect2 = 9;
            gun[53].number = 1; gun[53].effect0 = 2;
            gun[54].number = 1; gun[54].effect0 = 8;
            gun[55].number = 1; gun[55].effect0 = 6;
            gun[56].number = 2; gun[56].effect0 = 9; gun[56].effect1 = 3;
            gun[57].number = 1; gun[57].effect0 = 2;
            gun[58].number = 2; gun[58].effect0 = 3; gun[58].effect1 = 6;
            gun[59].number = 1; gun[59].effect0 = 6;
            gun[60].number = 1; gun[60].effect0 = 6;
            gun[61].number = 1; gun[61].effect0 = 8;
            gun[62].number = 1; gun[62].effect0 = 3;
            gun[63].number = 1; gun[63].effect0 = 9;
            gun[64].number = 1; gun[64].effect0 = 6;
            gun[65].number = 2; gun[65].effect0 = 9; gun[65].effect1 = 3;
            gun[66].number = 2; gun[66].effect0 = 9; gun[66].effect1 = 3;//
            gun[67].number = 1; gun[67].effect0 = 6;
            gun[68].number = 1; gun[68].effect0 = 6;
            gun[69].number = 2; gun[69].effect0 = 9; gun[69].effect1 = 3;
            gun[70].number = 2; gun[70].effect0 = 3; gun[70].effect1 = 6;
            gun[71].number = 1; gun[71].effect0 = 9;
            gun[72].number = 1; gun[72].effect0 = 6;
            gun[73].number = 2; gun[73].effect0 = 9; gun[73].effect1 = 3;
            gun[74].number = 2; gun[74].effect0 = 9; gun[74].effect1 = 3;
            gun[75].number = 2; gun[75].effect0 = 9; gun[75].effect1 = 6;
            gun[76].number = 1; gun[76].effect0 = 3;
            gun[77].number = 1; gun[77].effect0 = 9;
            gun[78].number = 2; gun[78].effect0 = 9; gun[78].effect1 = 3;
            gun[79].number = 2; gun[79].effect0 = 9; gun[79].effect1 = 3;//
            gun[80].number = 5; gun[80].effect0 = 8; gun[80].effect1 = 2; gun[80].effect2 = 9; gun[80].effect3 = 6; gun[80].effect4 = 3;
            gun[81].number = 5; gun[81].effect0 = 7; gun[81].effect1 = 4; gun[81].effect2 = 1; gun[81].effect3 = 8; gun[81].effect4 = 2;
            gun[82].number = 1; gun[82].effect0 = 4;
            gun[83].number = 3; gun[83].effect0 = 7; gun[83].effect1 = 4; gun[83].effect2 = 1;
            gun[84].number = 1; gun[84].effect0 = 4;
            gun[85].number = 1; gun[85].effect0 = 6;
            gun[86].number = 5; gun[86].effect0 = 7; gun[86].effect1 = 1; gun[86].effect2 = 8; gun[86].effect3 = 2; gun[86].effect4 = 6;
            gun[87].number = 4; gun[87].effect0 = 7; gun[87].effect1 = 1; gun[87].effect2 = 9; gun[87].effect3 = 3;
            gun[88].number = 4; gun[88].effect0 = 7; gun[88].effect1 = 1; gun[88].effect2 = 8; gun[88].effect3 = 2;
            gun[89].number = 4; gun[89].effect0 = 7; gun[89].effect1 = 4; gun[89].effect2 = 1; gun[89].effect3 = 6;
            gun[90].number = 6; gun[90].effect0 = 7; gun[90].effect1 = 1; gun[90].effect2 = 8; gun[90].effect3 = 2; gun[90].effect4 = 9; gun[90].effect5 = 3;
            gun[91].number = 3; gun[91].effect0 = 7; gun[91].effect1 = 4; gun[91].effect2 = 1;
            gun[92].number = 3; gun[92].effect0 = 7; gun[92].effect1 = 4; gun[92].effect2 = 1;
            gun[93].number = 3; gun[93].effect0 = 7; gun[93].effect1 = 4; gun[93].effect2 = 1;
            gun[94].number = 2; gun[94].effect0 = 6; gun[94].effect1 = 9;
            gun[95].number = 3; gun[95].effect0 = 9; gun[95].effect1 = 6; gun[95].effect2 = 3;
            gun[96].number = 1; gun[96].effect0 = 6;
            gun[97].number = 2; gun[97].effect0 = 9; gun[97].effect1 = 3;//
            gun[98].number = 2; gun[98].effect0 = 9; gun[98].effect1 = 3;
            gun[99].number = 2; gun[99].effect0 = 9; gun[99].effect1 = 3;
            gun[100].number = 1; gun[100].effect0 = 9;
            gun[101].number = 3; gun[101].effect0 = 9; gun[101].effect1 = 3; gun[101].effect2 = 6;//
            gun[102].number = 3; gun[102].effect0 = 4; gun[102].effect1 = 8; gun[102].effect2 = 2;
            gun[103].number = 5; gun[103].effect0 = 7; gun[103].effect1 = 4; gun[103].effect2 = 1; gun[103].effect3 = 8; gun[103].effect4 = 2;
            gun[104].number = 2; gun[104].effect0 = 7; gun[104].effect1 = 1;
            gun[105].number = 2; gun[105].effect0 = 1; gun[105].effect1 = 4;
            gun[106].number = 2; gun[106].effect0 = 8; gun[106].effect1 = 2;
            gun[107].number = 2; gun[107].effect0 = 9; gun[107].effect1 = 3;
            gun[108].number = 3; gun[108].effect0 = 9; gun[108].effect1 = 6; gun[108].effect2 = 3;
            gun[109].number = 1; gun[109].effect0 = 3;//
            gun[110].number = 2; gun[110].effect0 = 9; gun[110].effect1 = 3;//
            gun[111].number = 1; gun[111].effect0 = 6;
            gun[112].number = 3; gun[112].effect0 = 8; gun[112].effect1 = 2; gun[112].effect2 = 6;
            gun[113].number = 1; gun[113].effect0 = 9;//
            gun[114].number = 2; gun[114].effect0 = 9; gun[114].effect1 = 3;//
            gun[115].number = 6; gun[115].effect0 = 4; gun[115].effect1 = 8; gun[115].effect2 = 2; gun[115].effect3 = 9; gun[115].effect4 = 6; gun[115].effect5 = 3;
            gun[116].number = 2; gun[116].effect0 = 7; gun[116].effect1 = 1;
            gun[117].number = 1; gun[117].effect0 = 6;
            gun[118].number = 1; gun[118].effect0 = 3;
            gun[119].number = 1; gun[119].effect0 = 9;
            gun[120].number = 1; gun[120].effect0 = 4;
            gun[121].number = 5; gun[121].effect0 = 8; gun[121].effect1 = 2; gun[121].effect2 = 9; gun[121].effect3 = 6; gun[121].effect4 = 3;
            gun[122].number = 1; gun[122].effect0 = 6;
            gun[123].number = 1; gun[123].effect0 = 9;
            gun[124].number = 3; gun[124].effect0 = 7; gun[124].effect1 = 4; gun[124].effect2 = 1;
            gun[125].number = 1; gun[125].effect0 = 4;
            if (DateTime.Now > DateTime.Parse("2017-01-21"))
            {
                gun[126].number = 1; gun[126].effect0 = 6;
            }
            gun[127].number = 4; gun[127].effect0 = 4; gun[127].effect1 = 8; gun[127].effect2 = 2; gun[127].effect3 = 6;
            gun[128].number = 4; gun[128].effect0 = 4; gun[128].effect1 = 9; gun[128].effect2 = 6; gun[128].effect3 = 3;
            gun[129].number = 3; gun[129].effect0 = 7; gun[129].effect1 = 1; gun[129].effect2 = 6;
            gun[130].number = 5; gun[130].effect0 = 7; gun[130].effect1 = 4; gun[130].effect2 = 1; gun[130].effect3 = 8; gun[130].effect4 = 2;
            gun[131].number = 1; gun[131].effect0 = 4;
            gun[132].number = 2; gun[132].effect0 = 1; gun[132].effect1 = 7;
            gun[133].number = 2; gun[133].effect0 = 1; gun[133].effect1 = 7;
            gun[134].number = 2; gun[134].effect0 = 1; gun[134].effect1 = 7;
            gun[135].number = 2; gun[135].effect0 = 1; gun[135].effect1 = 7;
            gun[136].number = 1; gun[136].effect0 = 1;
            gun[137].number = 1; gun[137].effect0 = 7;
            gun[138].number = 3; gun[138].effect0 = 1; gun[138].effect1 = 4; gun[138].effect2 = 7;

            gun[0].to = 1;
            gun[1].to = 1;
            gun[2].to = 1;
            gun[3].to = 1;
            gun[4].to = 1;
            gun[5].to = 1;
            gun[6].to = 1;
            gun[7].to = 1;
            gun[8].to = 1;
            gun[9].to = 1;
            gun[10].to = 1;
            gun[11].to = 1;
            gun[12].to = 1;
            gun[13].to = 1;
            gun[14].to = 2;
            gun[15].to = 2;
            gun[16].to = 2;
            gun[17].to = 2;
            gun[18].to = 2;
            gun[19].to = 2;
            gun[20].to = 2;
            gun[21].to = 2;
            gun[22].to = 2;
            gun[23].to = 2;
            gun[24].to = 2;
            gun[25].to = 2;
            gun[26].to = 2;
            gun[27].to = 2;
            gun[28].to = 2;
            gun[29].to = 2;
            gun[30].to = 4;
            gun[31].to = 4;
            gun[32].to = 4;
            gun[33].to = 4;
            gun[34].to = 4;
            gun[35].to = 4;
            gun[36].to = 4;
            gun[37].to = 4;
            gun[38].to = 4;
            gun[39].to = 4;
            gun[40].to = 4;
            gun[41].to = 4;
            gun[42].to = 4;
            gun[43].to = 4;
            gun[44].to = 4;
            gun[45].to = 4;
            gun[46].to = 4;
            gun[47].to = 4;
            gun[48].to = 4;
            gun[49].to = 3;
            gun[50].to = 2;
            gun[51].to = 3;
            gun[52].to = 3;
            gun[53].to = 3;
            gun[54].to = 3;
            gun[55].to = 3;
            gun[56].to = 3;
            gun[57].to = 3;
            gun[58].to = 3;
            gun[59].to = 3;
            gun[60].to = 3;
            gun[61].to = 3;
            gun[62].to = 3;
            gun[63].to = 3;
            gun[64].to = 3;
            gun[65].to = 3;
            gun[66].to = 3;
            gun[67].to = 7;
            gun[68].to = 7;
            gun[69].to = 7;
            gun[70].to = 7;
            gun[71].to = 7;
            gun[72].to = 7;
            gun[73].to = 7;
            gun[74].to = 7;
            gun[75].to = 7;
            gun[76].to = 7;
            gun[77].to = 7;
            gun[78].to = 7;
            gun[79].to = 7;
            gun[80].to = 1;
            gun[81].to = 1;
            gun[82].to = 2;
            gun[83].to = 2;
            gun[84].to = 2;
            gun[85].to = 4;
            gun[86].to = 1;
            gun[87].to = 1;
            gun[88].to = 1;
            gun[89].to = 1;
            gun[90].to = 1;
            gun[91].to = 2;
            gun[92].to = 2;
            gun[93].to = 2;
            gun[94].to = 3;
            gun[95].to = 3;
            gun[96].to = 3;
            gun[97].to = 3;
            gun[98].to = 7;
            gun[99].to = 7;
            gun[100].to = 7;
            gun[101].to = 7;
            gun[102].to = 1;
            gun[103].to = 1;
            gun[104].to = 2;
            gun[105].to = 2;
            gun[106].to = 4;
            gun[107].to = 3;
            gun[108].to = 3;
            gun[109].to = 3;
            gun[110].to = 7;
            gun[111].to = 3;
            gun[112].to = 1;
            gun[113].to = 4;
            gun[114].to = 7;
            gun[115].to = 1;
            gun[116].to = 2;
            gun[117].to = 4;
            gun[118].to = 3;
            gun[119].to = 3;
            gun[120].to = 2;
            gun[121].to = 1;
            gun[122].to = 3;
            gun[123].to = 3;
            gun[124].to = 2;
            gun[125].to = 2;
            gun[126].to = 3;
            gun[127].to = 1;
            gun[128].to = 1;
            gun[129].to = 1;
            gun[130].to = 2;
            gun[131].to = 6;
            gun[132].to = 6;
            gun[133].to = 6;
            gun[134].to = 6;
            gun[135].to = 6;
            gun[136].to = 6;
            gun[137].to = 6;
            gun[138].to = 6;


            for (int i = 0; i < EQUIP_NUMBER; i++)
            {
                equip[i] = new Equip();
                equip[i].forwhat = "";
            }
            equip[0].name = "IOP T1外骨骼"; equip[0].property1 = "回避"; equip[0].down1 = 6; equip[0].up1 = 8; equip[0].property2 = "伤害"; equip[0].down2 = -2; equip[0].up2 = -1; equip[0].type = 10; equip[0].rank = 2;
            equip[1].name = "IOP T2外骨骼"; equip[1].bonus1 = 0.4; equip[1].property1 = "回避"; equip[1].down1 = 10; equip[1].up1 = Math.Floor(12 * (1 + equip[1].bonus1)); equip[1].property2 = "伤害"; equip[1].down2 = -4; equip[1].up2 = -3; equip[1].type = 10; equip[1].rank = 3;
            equip[2].name = "IOP T3外骨骼"; equip[2].bonus1 = 0.4; equip[2].property1 = "回避"; equip[2].down1 = 14; equip[2].up1 = Math.Floor(16 * (1 + equip[2].bonus1)); equip[2].property2 = "伤害"; equip[2].down2 = -6; equip[2].up2 = -5; equip[2].type = 10; equip[2].rank = 4;
            equip[3].name = "IOP T4外骨骼"; equip[3].bonus1 = 0.4; equip[3].property1 = "回避"; equip[3].down1 = 20; equip[3].up1 = Math.Floor(25 * (1 + equip[3].bonus1)); equip[3].property2 = "伤害"; equip[3].down2 = -8; equip[3].up2 = -6; equip[3].type = 10; equip[3].rank = 5;
            equip[4].name = "M61穿甲弹"; equip[4].property1 = "穿甲"; equip[4].down1 = 25; equip[4].up1 = 35; equip[4].type = 5; equip[4].rank = 2;
            equip[5].name = "M993穿甲弹"; equip[5].bonus1 = 0.5; equip[5].property1 = "穿甲"; equip[5].down1 = 40; equip[5].up1 = Math.Floor(50 * (1 + equip[5].bonus1)); equip[5].type = 5; equip[5].rank = 3;
            equip[6].name = "Mk169穿甲弹"; equip[6].bonus1 = 0.5; equip[6].property1 = "穿甲"; equip[6].down1 = 55; equip[6].up1 = Math.Floor(65 * (1 + equip[6].bonus1)); equip[6].type = 5; equip[6].rank = 4;
            equip[7].name = "Mk211高爆穿甲弹"; equip[7].bonus1 = 0.5; equip[7].property1 = "穿甲"; equip[7].down1 = 70; equip[7].up1 = Math.Floor(80 * (1 + equip[7].bonus1)); equip[7].type = 5; equip[7].rank = 5;
            equip[8].name = "JHP高速弹"; equip[8].property1 = "伤害"; equip[8].down1 = 2; equip[8].up1 = 2; equip[8].type = 8; equip[8].rank = 2;
            equip[9].name = "三星FMJ高速弹"; equip[9].bonus1 = 1; equip[9].property1 = "伤害"; equip[9].down1 = 3; equip[9].up1 = Math.Floor(4 * (1 + equip[9].bonus1)); equip[9].type = 8; equip[9].rank = 3;
            equip[10].name = "四星FMJ高速弹"; equip[10].bonus1 = 0.8; equip[10].property1 = "伤害"; equip[10].down1 = 5; equip[10].up1 = Math.Floor(7 * (1 + equip[10].bonus1)); equip[10].type = 8; equip[10].rank = 4;
            equip[11].name = "HVAP高速弹"; equip[11].bonus1 = 0.7; equip[11].property1 = "伤害"; equip[11].down1 = 8; equip[11].up1 = Math.Floor(12 * (1 + equip[11].bonus1)); equip[11].type = 8; equip[11].rank = 5;
            equip[12].name = "光瞄 - BM 3-12X40"; equip[12].property1 = "暴击率"; equip[12].down1 = 5; equip[12].up1 = 8; equip[12].type = 1; equip[12].rank = 2;
            equip[13].name = "光瞄 - LRA 2-12X50"; equip[13].bonus1 = 1; equip[13].property1 = "暴击率"; equip[13].down1 = 9; equip[13].up1 = Math.Floor(12 * (1 + equip[13].bonus1)); equip[13].type = 1; equip[13].rank = 3;
            equip[14].name = "光瞄 - PSO-1"; equip[14].bonus1 = 1; equip[14].property1 = "暴击率"; equip[14].down1 = 13; equip[14].up1 = Math.Floor(16 * (1 + equip[14].bonus1)); equip[14].type = 1; equip[14].rank = 4;
            equip[15].name = "光瞄 - VFL 6-24X56"; equip[15].bonus1 = 1; equip[15].property1 = "暴击率"; equip[15].down1 = 17; equip[15].up1 = Math.Floor(24 * (1 + equip[15].bonus1)); equip[15].type = 1; equip[15].rank = 5;
            equip[16].name = "全息 - EOT 506"; equip[16].property1 = "命中"; equip[16].down1 = 1; equip[16].up1 = 1; equip[16].property2 = "伤害"; equip[16].down2 = 1; equip[16].up2 = 1; equip[16].property3 = "射速"; equip[16].down3 = -1; equip[16].up3 = -1; equip[16].type = 2; equip[16].rank = 2;
            equip[17].name = "全息 - EOT 512"; equip[17].bonus1 = 0.5; equip[17].bonus2 = 0.5; equip[17].property1 = "命中"; equip[17].down1 = 2; equip[17].up1 = Math.Floor(2 * (1 + equip[17].bonus1)); equip[17].property2 = "伤害"; equip[17].down2 = 1; equip[17].up2 = Math.Floor(2 * (1 + equip[17].bonus2)); equip[17].property3 = "射速"; equip[17].down3 = -2; equip[17].up3 = -2; equip[17].type = 2; equip[17].rank = 3;
            equip[18].name = "全息 - EOT 516"; equip[18].bonus1 = 0.4; equip[18].bonus2 = 0.4; equip[18].property1 = "命中"; equip[18].down1 = 3; equip[18].up1 = Math.Floor(5 * (1 + equip[18].bonus1)); equip[18].property2 = "伤害"; equip[18].down2 = 2; equip[18].up2 = Math.Floor(3 * (1 + equip[18].bonus2)); equip[18].property3 = "射速"; equip[18].down3 = -4; equip[18].up3 = -3; equip[18].type = 2; equip[18].rank = 4;
            equip[19].name = "全息 - EOT 518"; equip[19].bonus1 = 0.4; equip[19].bonus2 = 0.4; equip[19].property1 = "命中"; equip[19].down1 = 6; equip[19].up1 = Math.Floor(10 * (1 + equip[19].bonus1)); equip[19].property2 = "伤害"; equip[19].down2 = 4; equip[19].up2 = Math.Floor(6 * (1 + equip[19].bonus2)); equip[19].property3 = "射速"; equip[19].down3 = -6; equip[19].up3 = -4; equip[19].type = 2; equip[19].rank = 5;
            equip[20].name = "ACOG - AMP COMPM2"; equip[20].property1 = "命中"; equip[20].down1 = 2; equip[20].up1 = 3; equip[20].property2 = "射速"; equip[20].down2 = -1; equip[20].up2 = -1; equip[20].type = 3; equip[20].rank = 2;
            equip[21].name = "ACOG - AMP COMPM4"; equip[21].bonus1 = 1; equip[21].property1 = "命中"; equip[21].down1 = 4; equip[21].up1 = Math.Floor(6 * (1 + equip[21].bonus1)); equip[21].property2 = "射速"; equip[21].down2 = -2; equip[21].up2 = -1; equip[21].type = 3; equip[21].rank = 3;
            equip[22].name = "ACOG - COG M150"; equip[22].bonus1 = 1; equip[22].property1 = "命中"; equip[22].down1 = 7; equip[22].up1 = Math.Floor(10 * (1 + equip[22].bonus1)); equip[22].property2 = "射速"; equip[22].down2 = -3; equip[22].up2 = -1; equip[22].type = 3; equip[22].rank = 4;
            equip[23].name = "ACOG - ITI MARS"; equip[23].bonus1 = 1; equip[23].property1 = "命中"; equip[23].down1 = 11; equip[23].up1 = Math.Floor(15 * (1 + equip[23].bonus1)); equip[23].property2 = "射速"; equip[23].down2 = -4; equip[23].up2 = -1; equip[23].type = 3; equip[23].rank = 5;
            equip[24].name = "夜视 - PEQ-2"; equip[24].property1 = "夜视抵消"; equip[24].down1 = 51; equip[24].up1 = 55; equip[24].type = 4; equip[24].rank = 2;
            equip[25].name = "夜视 - PEQ-5"; equip[25].property1 = "夜视抵消"; equip[25].down1 = 61; equip[25].up1 = 70; equip[25].type = 4; equip[25].rank = 3;
            equip[26].name = "夜视 - PEQ-15"; equip[26].property1 = "夜视抵消"; equip[26].down1 = 76; equip[26].up1 = 85; equip[26].type = 4; equip[26].rank = 4;
            equip[27].name = "夜视 - PEQ-16A"; equip[27].property1 = "夜视抵消"; equip[27].down1 = 91; equip[27].up1 = 100; equip[27].type = 4; equip[27].rank = 5;
            equip[28].name = "16Lab次口径穿甲弹"; equip[28].bonus1 = 0.5; equip[28].property1 = "穿甲"; equip[28].down1 = 80; equip[28].up1 = Math.Floor(80 * (1 + equip[28].bonus1)); equip[28].type = 5; equip[28].rank = 5;
            equip[29].name = "16Lab红外指示器"; equip[29].property1 = "夜视抵消"; equip[29].down1 = 100; equip[29].up1 = 100; equip[29].type = 4; equip[29].rank = 5;
            equip[30].name = " "; equip[30].type = 13; equip[30].rank = 2; equip[30].forwhat = "-1";
            equip[31].name = "IOP X1外骨骼"; equip[31].property1 = "回避"; equip[31].down1 = 2; equip[31].up1 = 3; equip[31].type = 10; equip[31].rank = 2;
            equip[32].name = "IOP X2外骨骼"; equip[32].bonus1 = 0.8; equip[32].property1 = "回避"; equip[32].down1 = 4; equip[32].up1 = Math.Floor(5 * (1 + equip[32].bonus1)); equip[32].type = 10; equip[32].rank = 3;
            equip[33].name = "IOP X3外骨骼"; equip[33].bonus1 = 0.9; equip[33].property1 = "回避"; equip[33].down1 = 6; equip[33].up1 = Math.Floor(7 * (1 + equip[33].bonus1)); equip[33].type = 10; equip[33].rank = 4;
            equip[34].name = "IOP X4外骨骼"; equip[34].bonus1 = 0.7; equip[34].property1 = "回避"; equip[34].down1 = 8; equip[34].up1 = Math.Floor(12 * (1 + equip[34].bonus1)); equip[34].type = 10; equip[34].rank = 5;
            equip[35].name = "国家竞赛穿甲弹"; equip[35].bonus1 = 0.3; equip[35].bonus2 = 0.5; equip[35].property1 = "射速"; equip[35].down1 = 1; equip[35].up1 = Math.Floor(8 * (1 + equip[35].bonus1)); equip[35].property2 = "穿甲"; equip[35].down2 = 75; equip[35].up2 = Math.Floor(85 * (1 + equip[35].bonus2)); equip[35].type = 5; equip[35].rank = 5; equip[35].forwhat = "32";
            equip[36].name = ".300BLK高速弹"; equip[36].bonus1 = 0.6; equip[36].property1 = "伤害"; equip[36].down1 = 12; equip[36].up1 = Math.Floor(16 * (1 + equip[36].bonus1)); equip[36].property2 = "命中"; equip[36].down2 = -5; equip[36].up2 = -1; equip[36].type = 8; equip[36].rank = 5; equip[36].forwhat = "52";
            equip[37].name = "Titan火控芯片"; equip[37].bonus3 = 0.5; equip[37].property1 = "伤害"; equip[37].down1 = -4; equip[37].up1 = -2; equip[37].property2 = "射速"; equip[37].down2 = -8; equip[37].up2 = -1; equip[37].property3 = "弹链"; equip[37].down3 = 3; equip[37].up3 = Math.Floor(4 * (1 + equip[37].bonus3)); equip[37].type = 9; equip[37].rank = 5; equip[37].forwhat = "67";
            equip[38].name = "GSG UX外骨骼"; equip[38].bonus2 = 0.3; equip[38].property1 = "伤害"; equip[38].down1 = -10; equip[38].up1 = -6; equip[38].property2 = "回避"; equip[38].down2 = 30; equip[38].up2 = Math.Floor(45 * (1 + equip[38].bonus2)); equip[38].type = 10; equip[38].rank = 5; equip[38].forwhat = "24";
            equip[39].name = "AC1消音器"; equip[39].property1 = "暴击率"; equip[39].down1 = 4; equip[39].up1 = 5; equip[39].property2 = "回避"; equip[39].down2 = 2; equip[39].up2 = 2; equip[39].type = 13; equip[39].rank = 2;
            equip[40].name = "AC2消音器"; equip[40].bonus1 = 0.3; equip[40].bonus2 = 0.4; equip[40].property1 = "暴击率"; equip[40].down1 = 6; equip[40].up1 = Math.Floor(8 * (1 + equip[40].bonus1)); equip[40].property2 = "回避"; equip[40].down2 = 3; equip[40].up2 = Math.Floor(3 * (1 + equip[40].bonus2)); equip[40].type = 13; equip[40].rank = 3;
            equip[41].name = "AC3消音器"; equip[41].bonus1 = 0.3; equip[41].bonus2 = 0.4; equip[41].property1 = "暴击率"; equip[41].down1 = 9; equip[41].up1 = Math.Floor(11 * (1 + equip[41].bonus1)); equip[41].property2 = "回避"; equip[41].down2 = 4; equip[41].up2 = Math.Floor(5 * (1 + equip[41].bonus2)); equip[41].type = 13; equip[41].rank = 4;
            equip[42].name = "AC4消音器"; equip[42].bonus1 = 0.3; equip[42].bonus2 = 0.3; equip[42].property1 = "暴击率"; equip[42].down1 = 12; equip[42].up1 = Math.Floor(15 * (1 + equip[42].bonus1)); equip[42].property2 = "回避"; equip[42].down2 = 6; equip[42].up2 = Math.Floor(8 * (1 + equip[42].bonus2)); equip[42].type = 13; equip[42].rank = 5;
            equip[43].name = "IOP大容量弹链箱"; equip[43].bonus1 = 2; equip[43].property1 = "弹链"; equip[43].down1 = 1; equip[43].up1 = Math.Floor(1 * (1 + equip[43].bonus1)); equip[43].property2 = "回避"; equip[43].down2 = -1; equip[43].up2 = -1; equip[43].type = 14; equip[43].rank = 4;
            equip[44].name = "IOP极限弹链箱"; equip[44].bonus1 = 0.7; equip[44].property1 = "弹链"; equip[44].down1 = 2; equip[44].up1 = Math.Floor(3 * (1 + equip[44].bonus1)); equip[44].property2 = "回避"; equip[44].down2 = -3; equip[44].up2 = -2; equip[44].type = 14; equip[44].rank = 5;
            equip[45].name = "ILM二星空尖弹"; equip[45].property1 = "伤害"; equip[45].down1 = 1; equip[45].up1 = 1; equip[45].property2 = "穿甲"; equip[45].down2 = -1; equip[45].up2 = -1; equip[45].type = 6; equip[45].rank = 2;
            equip[46].name = "ILM三星空尖弹"; equip[46].bonus1 = 0.7; equip[46].property1 = "伤害"; equip[46].down1 = 2; equip[46].up1 = Math.Floor(3 * (1 + equip[46].bonus1)); equip[46].property2 = "穿甲"; equip[46].down2 = -3; equip[46].up2 = -2; equip[46].type = 6; equip[46].rank = 3;
            equip[47].name = "ILM四星空尖弹"; equip[47].bonus1 = 0.5; equip[47].property1 = "伤害"; equip[47].down1 = 4; equip[47].up1 = Math.Floor(6 * (1 + equip[47].bonus1)); equip[47].property2 = "穿甲"; equip[47].down2 = -6; equip[47].up2 = -4; equip[47].type = 6; equip[47].rank = 4;
            equip[48].name = "ILM五星空尖弹"; equip[48].bonus1 = 0.5; equip[48].property1 = "伤害"; equip[48].down1 = 7; equip[48].up1 = Math.Floor(10 * (1 + equip[48].bonus1)); equip[48].property2 = "穿甲"; equip[48].down2 = -10; equip[48].up2 = -7; equip[48].type = 6; equip[48].rank = 5;
            equip[49].name = "#1猎鹿弹"; equip[49].property1 = "伤害"; equip[49].down1 = 1; equip[49].up1 = 1; equip[49].property2 = "暴击伤害"; equip[49].down2 = 3; equip[49].up2 = 4; equip[49].type = 7; equip[49].rank = 2;
            equip[50].name = "#0猎鹿弹"; equip[50].bonus1 = 0.5; equip[50].bonus2 = 0.5; equip[50].property1 = "伤害"; equip[50].down1 = 2; equip[50].up1 = Math.Floor(3 * (1 + equip[50].bonus1)); equip[50].property2 = "暴击伤害"; equip[50].down2 = 5; equip[50].up2 = Math.Floor(6 * (1 + equip[50].bonus2)); equip[50].type = 7; equip[50].rank = 3;
            equip[51].name = "#00猎鹿弹"; equip[51].bonus1 = 0.5; equip[51].bonus2 = 0.6; equip[51].property1 = "伤害"; equip[51].down1 = 4; equip[51].up1 = Math.Floor(6 * (1 + equip[51].bonus1)); equip[51].property2 = "暴击伤害"; equip[51].down2 = 7; equip[51].up2 = Math.Floor(9 * (1 + equip[51].bonus2)); equip[51].type = 7; equip[51].rank = 4;
            equip[52].name = "#000猎鹿弹"; equip[52].bonus1 = 0.5; equip[52].bonus2 = 0.5; equip[52].property1 = "伤害"; equip[52].down1 = 7; equip[52].up1 = Math.Floor(10 * (1 + equip[52].bonus1)); equip[52].property2 = "暴击伤害"; equip[52].down2 = 10; equip[52].up2 = Math.Floor(15 * (1 + equip[52].bonus2)); equip[52].type = 7; equip[52].rank = 5;
            equip[57].name = "16Lab奖励鹿弹"; equip[57].bonus1 = 0.5; equip[57].bonus2 = 0.5; equip[57].property1 = "伤害"; equip[57].down1 = 10; equip[57].up1 = Math.Floor(10 * (1 + equip[57].bonus1)); equip[57].property2 = "暴击伤害"; equip[57].down2 = 15; equip[57].up2 = Math.Floor(15 * (1 + equip[57].bonus2)); equip[57].type = 7; equip[57].rank = 5;
            equip[53].name = "BK独头弹"; equip[53].property1 = "命中"; equip[53].down1 = 1; equip[53].up1 = 2; equip[53].property2 = "目标"; equip[53].down2 = -2; equip[53].up2 = -2; equip[53].type = 7; equip[53].rank = 2;
            equip[54].name = "FST独头弹"; equip[54].bonus1 = 1; equip[54].property1 = "命中"; equip[54].down1 = 3; equip[54].up1 = Math.Floor(4 * (1 + equip[54].bonus1)); equip[54].property2 = "目标"; equip[54].down2 = -2; equip[54].up2 = -2; equip[54].type = 7; equip[54].rank = 3;
            equip[55].name = "WAD独头弹"; equip[55].bonus1 = 0.9; equip[55].property1 = "命中"; equip[55].down1 = 5; equip[55].up1 = Math.Floor(7 * (1 + equip[55].bonus1)); equip[55].property2 = "目标"; equip[55].down2 = -2; equip[55].up2 = -2; equip[55].type = 7; equip[55].rank = 4;
            equip[56].name = "SABOT独头弹"; equip[56].bonus1 = 0.7; equip[56].property1 = "命中"; equip[56].down1 = 8; equip[56].up1 = Math.Floor(12 * (1 + equip[56].bonus1)); equip[56].property2 = "目标"; equip[56].down2 = -2; equip[56].up2 = -2; equip[56].type = 7; equip[56].rank = 5;
            if (DateTime.Now > DateTime.Parse("2017-03-01"))
            {
                equip[58].name = "KSTSP"; equip[58].bonus1 = 0.5; equip[58].bonus2 = 0.1; equip[58].property1 = "暴击率"; equip[58].down1 = 32; equip[58].up1 = Math.Floor(32 * (1 + equip[58].bonus1)); equip[58].property2 = "暴击伤害"; equip[58].down2 = 40; equip[58].up2 = Math.Floor(40 * (1 + equip[58].bonus2)); equip[58].type = 1; equip[58].rank = 5; equip[58].forwhat = "53,60";
                equip[59].name = "KST1P8"; equip[59].bonus1 = 0.5; equip[59].bonus2 = 0.2; equip[59].property1 = "暴击率"; equip[59].down1 = 32; equip[59].up1 = Math.Floor(32 * (1 + equip[59].bonus1)); equip[59].property2 = "暴击伤害"; equip[59].down2 = 25; equip[59].up2 = Math.Floor(25 * (1 + equip[59].bonus2)); equip[59].type = 1; equip[59].rank = 5; equip[59].forwhat = "53,60";
                equip[60].name = "KST1P7"; equip[60].bonus1 = 0.5; equip[60].bonus2 = 0.5; equip[60].property1 = "暴击率"; equip[60].down1 = 32; equip[60].up1 = Math.Floor(32 * (1 + equip[60].bonus1)); equip[60].property2 = "暴击伤害"; equip[60].down2 = 10; equip[60].up2 = Math.Floor(10 * (1 + equip[60].bonus2)); equip[60].type = 1; equip[60].rank = 5; equip[60].forwhat = "53,60";
            }
            equip[61].name = "Type1防弹插板"; equip[61].bonus1 = 0.4; equip[61].property1 = "护甲"; equip[61].down1 = 3; equip[61].up1 = Math.Floor(3 * (1 + equip[61].bonus1)); equip[61].property2 = "回避"; equip[61].down2 = -1; equip[61].up2 = -1; equip[61].type = 11; equip[61].rank = 3;
            equip[62].name = "Type2防弹插板"; equip[62].bonus1 = 0.4; equip[62].property1 = "护甲"; equip[62].down1 = 4; equip[62].up1 = Math.Floor(5 * (1 + equip[62].bonus1)); equip[62].property2 = "回避"; equip[62].down2 = -1; equip[62].up2 = -1; equip[62].type = 11; equip[62].rank = 4;
            equip[63].name = "Type3防弹插板"; equip[63].bonus1 = 0.4; equip[63].property1 = "护甲"; equip[63].down1 = 6; equip[63].up1 = Math.Floor(8 * (1 + equip[63].bonus1)); equip[63].property2 = "回避"; equip[63].down2 = -3; equip[63].up2 = -2; equip[63].type = 11; equip[63].rank = 5;
            equip[64].name = "16Lab防弹插板"; equip[64].bonus1 = 0.4; equip[64].property1 = "护甲"; equip[64].down1 = 8; equip[64].up1 = Math.Floor(8 * (1 + equip[64].bonus1)); equip[64].property2 = "回避"; equip[64].down2 = -2; equip[64].up2 = -2; equip[64].type = 11; equip[64].rank = 5;
            equip[65].name = "Hayha记忆芯片"; equip[65].bonus1 = 0.2; equip[65].bonus2 = 0.3; equip[65].bonus3 = 0.5; equip[65].property1 = "伤害"; equip[65].down1 = 18; equip[65].up1 = Math.Floor(25 * (1 + equip[65].bonus1)); equip[65].property2 = "回避"; equip[65].down2 = 2; equip[65].up2 = Math.Floor(4 * (1 + equip[65].bonus2)); equip[65].property3 = "暴击伤害"; equip[65].down3 = 15; equip[65].up3 = Math.Floor(20 * (1 + equip[65].bonus3)); equip[65].type = 9; equip[65].rank = 5; equip[65].forwhat = "35";
            equip[66].name = "破旧披风"; equip[66].property1 = "暴击伤害"; equip[66].down1 = 3; equip[66].up1 = 4; equip[66].property2 = "移速"; equip[66].down2 = -3; equip[66].up2 = -3; equip[66].type = 15; equip[66].rank = 2;
            equip[67].name = "伪装披风"; equip[67].bonus1 = 0.9; equip[67].property1 = "暴击伤害"; equip[67].down1 = 5; equip[67].up1 = Math.Floor(7 * (1 + equip[67].bonus1)); equip[67].property2 = "移速"; equip[67].down2 = -3; equip[67].up2 = -3; equip[67].type = 15; equip[67].rank = 3;
            equip[68].name = "城市迷彩披风"; equip[68].bonus1 = 0.8; equip[68].property1 = "暴击伤害"; equip[68].down1 = 8; equip[68].up1 = Math.Floor(10 * (1 + equip[68].bonus1)); equip[68].property2 = "移速"; equip[68].down2 = -3; equip[68].up2 = -3; equip[68].type = 15; equip[68].rank = 4;
            equip[69].name = "热光学迷彩披风"; equip[69].bonus1 = 0.7; equip[69].property1 = "暴击伤害"; equip[69].down1 = 11; equip[69].up1 = Math.Floor(15 * (1 + equip[69].bonus1)); equip[69].property2 = "移速"; equip[69].down2 = -3; equip[69].up2 = -3; equip[69].type = 15; equip[69].rank = 5;

            equip[70].name = "特殊战机动装甲"; equip[70].bonus1 = 0.3; equip[70].bonus2 = 0.3; equip[70].property1 = "回避"; equip[70].down1 = 8; equip[70].up1 = Math.Floor(8 * (1 + equip[70].bonus1)); equip[70].property2 = "护甲"; equip[70].down2 = 15; equip[70].up2 = Math.Floor(15 * (1 + equip[70].bonus2)); equip[70].property3 = "命中-20,射速-10"; equip[70].down3 = -20; equip[70].up3 = -20; equip[70].type = 11; equip[70].rank = 5; equip[70].forwhat = "49";
            equip[71].name = "UMP UX外骨骼"; equip[71].bonus1 = 0.4; equip[71].bonus2 = 0.7; equip[71].property1 = "回避"; equip[71].down1 = 20; equip[71].up1 = Math.Floor(25 * (1 + equip[71].bonus1)); equip[71].property2 = "暴击伤害"; equip[71].down2 = 11; equip[71].up2 = Math.Floor(15 * (1 + equip[71].bonus2)); equip[71].type = 10; equip[71].rank = 5; equip[71].forwhat = "91,92,163";
            if (DateTime.Now > DateTime.Parse("2017-08-31"))
            {
                equip[72].name = "PKN03M夜视瞄具"; equip[72].bonus2 = 0.6; equip[72].property1 = "夜视抵消"; equip[72].down1 = 100; equip[72].up1 = 100; equip[72].property2 = "伤害"; equip[72].down2 = 4; equip[72].up2 = Math.Floor(4 * (1 + equip[72].bonus2)); equip[72].type = 4; equip[72].rank = 5; equip[72].forwhat = "107";
            }

            for (int i = 0; i < EQUIP_NUMBER; i++)
            {
                if (!String.IsNullOrEmpty(equip[i].property1))
                {
                    equip[i].tooltip += equip[i].property1;
                    if (equip[i].down1 > 0)
                        equip[i].tooltip += "+";
                    equip[i].tooltip += equip[i].down1;
                    if (equip[i].property1 == "夜视抵消")
                        equip[i].tooltip += "%";
                    equip[i].tooltip += " 至 ";
                    if (equip[i].up1 > 0)
                        equip[i].tooltip += "+";
                    equip[i].tooltip += equip[i].up1;
                    if (equip[i].property1 == "夜视抵消")
                        equip[i].tooltip += "%";
                }
                if (!String.IsNullOrEmpty(equip[i].property2))
                {
                    equip[i].tooltip += " " + equip[i].property2;
                    if (equip[i].down2 > 0)
                        equip[i].tooltip += "+";
                    equip[i].tooltip += equip[i].down2;
                    if (equip[i].property2 == "暴击伤害")
                        equip[i].tooltip += "%";
                    equip[i].tooltip += " 至 ";
                    if (equip[i].up2 > 0)
                        equip[i].tooltip += "+";
                    equip[i].tooltip += equip[i].up2;
                    if (equip[i].property2 == "暴击伤害")
                        equip[i].tooltip += "%";
                }
                if (!String.IsNullOrEmpty(equip[i].property3))
                {
                    if (equip[i].property3 == "命中-20,射速-10")
                    {
                        equip[i].tooltip += " " + equip[i].property3;
                    }
                    else
                    {
                        equip[i].tooltip += " " + equip[i].property3;
                        if (equip[i].down3 > 0)
                            equip[i].tooltip += "+";
                        equip[i].tooltip += equip[i].down3;
                        equip[i].tooltip += " 至 ";
                        if (equip[i].up3 > 0)
                            equip[i].tooltip += "+";
                        equip[i].tooltip += equip[i].up3;
                    }
                }
            }

            gridlist[0].Add(buffGrid01); gridlist[0].Add(buffGrid02); gridlist[0].Add(buffGrid03); gridlist[0].Add(buffGrid04); gridlist[0].Add(buffGrid05); gridlist[0].Add(buffGrid06); gridlist[0].Add(buffGrid07); gridlist[0].Add(buffGrid08); gridlist[0].Add(buffGrid09);
            gridlist[1].Add(buffGrid11); gridlist[1].Add(buffGrid12); gridlist[1].Add(buffGrid13); gridlist[1].Add(buffGrid14); gridlist[1].Add(buffGrid15); gridlist[1].Add(buffGrid16); gridlist[1].Add(buffGrid17); gridlist[1].Add(buffGrid18); gridlist[1].Add(buffGrid19);
            gridlist[2].Add(buffGrid21); gridlist[2].Add(buffGrid22); gridlist[2].Add(buffGrid23); gridlist[2].Add(buffGrid24); gridlist[2].Add(buffGrid25); gridlist[2].Add(buffGrid26); gridlist[2].Add(buffGrid27); gridlist[2].Add(buffGrid28); gridlist[2].Add(buffGrid29);
            gridlist[3].Add(buffGrid31); gridlist[3].Add(buffGrid32); gridlist[3].Add(buffGrid33); gridlist[3].Add(buffGrid34); gridlist[3].Add(buffGrid35); gridlist[3].Add(buffGrid36); gridlist[3].Add(buffGrid37); gridlist[3].Add(buffGrid38); gridlist[3].Add(buffGrid39);
            gridlist[4].Add(buffGrid41); gridlist[4].Add(buffGrid42); gridlist[4].Add(buffGrid43); gridlist[4].Add(buffGrid44); gridlist[4].Add(buffGrid45); gridlist[4].Add(buffGrid46); gridlist[4].Add(buffGrid47); gridlist[4].Add(buffGrid48); gridlist[4].Add(buffGrid49);
            gridlist[5].Add(buffGrid51); gridlist[5].Add(buffGrid52); gridlist[5].Add(buffGrid53); gridlist[5].Add(buffGrid54); gridlist[5].Add(buffGrid55); gridlist[5].Add(buffGrid56); gridlist[5].Add(buffGrid57); gridlist[5].Add(buffGrid58); gridlist[5].Add(buffGrid59);
            gridlist[6].Add(buffGrid61); gridlist[6].Add(buffGrid62); gridlist[6].Add(buffGrid63); gridlist[6].Add(buffGrid64); gridlist[6].Add(buffGrid65); gridlist[6].Add(buffGrid66); gridlist[6].Add(buffGrid67); gridlist[6].Add(buffGrid68); gridlist[6].Add(buffGrid69);
            gridlist[7].Add(buffGrid71); gridlist[7].Add(buffGrid72); gridlist[7].Add(buffGrid73); gridlist[7].Add(buffGrid74); gridlist[7].Add(buffGrid75); gridlist[7].Add(buffGrid76); gridlist[7].Add(buffGrid77); gridlist[7].Add(buffGrid78); gridlist[7].Add(buffGrid79);
            gridlist[8].Add(buffGrid81); gridlist[8].Add(buffGrid82); gridlist[8].Add(buffGrid83); gridlist[8].Add(buffGrid84); gridlist[8].Add(buffGrid85); gridlist[8].Add(buffGrid86); gridlist[8].Add(buffGrid87); gridlist[8].Add(buffGrid88); gridlist[8].Add(buffGrid89);


            for (int i = 0; i < FAIRY_NUMBER + 1; i++)
                fairy[i] = new Fairy();
            fairy[1].name = "勇士妖精"; fairy[1].pow = 160; fairy[1].hit = 160; fairy[1].dodge = 100; fairy[1].armor = 100; fairy[1].critharm = 0; fairy[1].grow = 100; fairy[1].type = 900110;
            fairy[2].name = "暴怒妖精"; fairy[2].pow = 100; fairy[2].hit = 0; fairy[2].dodge = 100; fairy[2].armor = 100; fairy[2].critharm = 199; fairy[2].grow = 100; fairy[2].type = 900111;
            fairy[3].name = "盾甲妖精"; fairy[3].pow = 145; fairy[3].hit = 0; fairy[3].dodge = 0; fairy[3].armor = 242; fairy[3].critharm = 101; fairy[3].grow = 100; fairy[3].type = 900103;
            fairy[4].name = "护盾妖精"; fairy[4].pow = 130; fairy[4].hit = 120; fairy[4].dodge = 200; fairy[4].armor = 0; fairy[4].critharm = 0; fairy[4].grow = 100; fairy[4].type = 900101;
            fairy[5].name = "防御妖精"; fairy[5].pow = 131; fairy[5].hit = 0; fairy[5].dodge = 180; fairy[5].armor = 180; fairy[5].critharm = 0; fairy[5].grow = 121; fairy[5].type = 6;
            fairy[6].name = "嘲讽妖精"; fairy[6].pow = 101; fairy[6].hit = 100; fairy[6].dodge = 60; fairy[6].armor = 61; fairy[6].critharm = 101; fairy[6].grow = 130; fairy[6].type = 900104;
            fairy[7].name = "狙击妖精"; fairy[7].pow = 0; fairy[7].hit = 175; fairy[7].dodge = 70; fairy[7].armor = 141; fairy[7].critharm = 175; fairy[7].grow = 100; fairy[7].type = 900102;
            fairy[8].name = "炮击妖精"; fairy[8].pow = 372; fairy[8].hit = 0; fairy[8].dodge = 140; fairy[8].armor = 60; fairy[8].critharm = 0; fairy[8].grow = 100; fairy[8].type = 900108;
            fairy[9].name = "空袭妖精"; fairy[9].pow = 159; fairy[9].hit = 79; fairy[9].dodge = 79; fairy[9].armor = 79; fairy[9].critharm = 0; fairy[9].grow = 150; fairy[9].type = 900109;
            fairy[10].name = "增援妖精"; fairy[10].pow = 60; fairy[10].hit = 0; fairy[10].dodge = 175; fairy[10].armor = 81; fairy[10].critharm = 60; fairy[10].grow = 150; fairy[10].type = 8;
            fairy[11].name = "空降妖精"; fairy[11].pow = 190; fairy[11].hit = 0; fairy[11].dodge = 62; fairy[11].armor = 60; fairy[11].critharm = 155; fairy[11].grow = 150; fairy[11].type = 9;
            fairy[12].name = "布雷妖精"; fairy[12].pow = 200; fairy[12].hit = 100; fairy[12].dodge = 242; fairy[12].armor = 0; fairy[12].critharm = 0; fairy[12].grow = 73; fairy[12].type = 10;
            fairy[13].name = "火箭妖精"; fairy[13].pow = 0; fairy[13].hit = 100; fairy[13].dodge = 0; fairy[13].armor = 241; fairy[13].critharm = 200; fairy[13].grow = 75; fairy[13].type = 11;
            fairy[14].name = "工事妖精"; fairy[14].pow = 120; fairy[14].hit = 120; fairy[14].dodge = 120; fairy[14].armor = 120; fairy[14].critharm = 120; fairy[14].grow = 65; fairy[14].type = 12;
            fairy[15].name = "指挥妖精"; fairy[15].pow = 285; fairy[15].hit = 0; fairy[15].dodge = 92; fairy[15].armor = 85; fairy[15].critharm = 201; fairy[15].grow = 70; fairy[15].type = 13;
            fairy[16].name = "搜救妖精"; fairy[16].pow = 270; fairy[16].hit = 200; fairy[16].dodge = 200; fairy[16].armor = 0; fairy[16].critharm = 0; fairy[16].grow = 60; fairy[16].type = 14;
            fairy[17].name = "照明妖精"; fairy[17].pow = 0; fairy[17].hit = 200; fairy[17].dodge = 87; fairy[17].armor = 80; fairy[17].critharm = 201; fairy[17].grow = 80; fairy[17].type = 15;
            if (DateTime.Now > DateTime.Parse("2017-08-31"))
            {
                fairy[18].name = "黄金妖精"; fairy[18].pow = 60; fairy[18].hit = 58; fairy[18].dodge = 58; fairy[18].armor = 56; fairy[18].critharm = 58; fairy[18].grow = 320; fairy[18].type = 900117;
            }
            for (int i = 0; i < FAIRY_NUMBER; i++)
            {
                fairynamecombo.Items.Add(BrushEquipCombobox(2, fairy[i].name));
                fairy[i].powbuff = 1; fairy[i].armorbuff = 1; fairy[i].dodgebuff = 1; fairy[i].hitbuff = 1; fairy[i].critharmbuff = 1;

            }
            //  fairynamecombo.Items.Add(BrushEquipCombobox(2, fairy[1].name));
            for (int i = 1; i <= 100; i++)
                fairylevel.Items.Add(i);
            for (int i = 1; i <= 10; i++)
                fairyskilllevel.Items.Add(i);
            for (int i = 0; i < FAIRY_TALENT_NUMBER + 1; i++)
                fairytalent[i] = new FairyTalent();
            fairytalent[1].name = "杀伤型I"; fairytalent[1].rateswitch = 1;
            fairytalent[2].name = "杀伤型II"; fairytalent[2].rateswitch = 2;
            fairytalent[3].name = "精准型I"; fairytalent[3].rateswitch = 1;
            fairytalent[4].name = "精准型II"; fairytalent[4].rateswitch = 2;
            fairytalent[5].name = "回避型I"; fairytalent[5].rateswitch = 1;
            fairytalent[6].name = "回避型II"; fairytalent[6].rateswitch = 2;
            fairytalent[7].name = "护甲型I"; fairytalent[7].rateswitch = 1;
            fairytalent[8].name = "护甲型II"; fairytalent[8].rateswitch = 2;
            fairytalent[9].name = "必杀型I"; fairytalent[9].rateswitch = 1;
            fairytalent[10].name = "必杀型II"; fairytalent[10].rateswitch = 2;
            fairytalent[11].name = "冲锋型"; fairytalent[11].rateswitch = 3;
            fairytalent[12].name = "突击型"; fairytalent[12].rateswitch = 3;
            fairytalent[13].name = "瞄准型"; fairytalent[13].rateswitch = 3;
            fairytalent[14].name = "坚韧型"; fairytalent[14].rateswitch = 3;
            fairytalent[15].name = "镇压型"; fairytalent[15].rateswitch = 3;
            fairytalent[16].name = "敏锐型"; fairytalent[16].rateswitch = 3;
            fairytalent[17].name = "激昂型"; fairytalent[17].rateswitch = 2;
            if (DateTime.Now > DateTime.Parse("2017-08-31"))
            {
                fairytalent[18].name = "黄金型"; fairytalent[18].rateswitch = 1;
            }
            for (int i = 0; i < FAIRY_TALENT_NUMBER; i++)
                fairytalentcombo.Items.Add(BrushEquipCombobox(2, fairytalent[i].name));
            //检查更新
            string strGatherJsonUrl = "http://jyying.cn/snqxap/AssemblyInfo";
            //string strGatherJsonUrl = "http://www.google.com";
            string strContent = Get(strGatherJsonUrl);
            if (strContent == "弃坑")
            {
                MessageBox.Show("弃坑啦。");
                this.Close();
            }
            string Pattren = @"^\d[\d\.]+\d$";
            Regex regex = new Regex(Pattren);
            Match m = regex.Match(strContent);
            if (!m.Success || strContent.Length > 10)
            {
                UpdateTb.Text = "无法获取服务器版本信息";
            }
            else if (System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString() == strContent)
            {
                UpdateTb.Text = "已是最新版";
            }
            else
            {
                hyperLink.IsEnabled = true;
                MessageBox.Show("有新版本，请及时更新。");
            }
            innight = false;
        }
        /// <summary>
        /// 改变选取枪娘时计算光环
        /// </summary>
        /// <param name="nextselect">临近格所选枪娘index</param>
        /// <param name="select">该格所选枪娘index</param>
        /// <param name="grid">临近格在该格的哪个方向（电脑小键盘）</param>
        /// <param name="ggi">哪一格</param>
        /// <param name="ggf">从哪一格</param>
        public void othercombochange(int nextselect, int select, int grid, int ggi, int ggf)
        {
            switch (gun[nextselect].number)
            {

                case 1:
                    {
                        if (gun[nextselect].effect0 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        break;
                    }
                case 2:
                    {
                        if (gun[nextselect].effect0 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect1 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        break;
                    }
                case 3:
                    {
                        if (gun[nextselect].effect0 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect1 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect2 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        break;
                    }
                case 4:
                    {
                        if (gun[nextselect].effect0 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect1 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect2 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect3 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        break;
                    }
                case 5:
                    {
                        if (gun[nextselect].effect0 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect1 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect2 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect3 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect4 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        break;
                    }
                case 6:
                    {
                        if (gun[nextselect].effect0 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect1 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect2 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect3 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect4 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect5 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        break;
                    }
                case 7:
                    {
                        if (gun[nextselect].effect0 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect1 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect2 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect3 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect4 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect5 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect6 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        break;
                    }
                case 8:
                    {
                        if (gun[nextselect].effect0 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect1 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect2 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect3 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect4 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect5 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect6 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        else if (gun[nextselect].effect7 == grid && (gun[nextselect].to == gun[select].what || gun[nextselect].to == 1))
                        {
                            gg[ggi].critup += gun[nextselect].critup * multiple[ggf];
                            gg[ggi].damageup += gun[nextselect].damageup * multiple[ggf];
                            gg[ggi].dodgeup += gun[nextselect].dodgeup * multiple[ggf];
                            gg[ggi].shotspeedup += gun[nextselect].shotspeedup * multiple[ggf];
                            gg[ggi].hitup += gun[nextselect].hitup * multiple[ggf];
                            gg[ggi].rateup -= gun[nextselect].rateup * multiple[ggf]; gg[ggi].armorup += gun[nextselect].armorup * multiple[ggf];
                        }
                        break;
                    }
                default:
                    break;
            }


        }
        /// <summary>
        /// 更新伤害指数
        /// </summary>
        /// <param name="comboi">哪一个九宫格</param>
        public void renewindex(int comboi)
        {
            int select = 0;
            switch (comboi)
            {
                case 0:
                    {

                        select = Combo0.SelectedIndex;
                        int levelselect = Level0.SelectedIndex;
                        int skillselect = SkillLevel0.SelectedIndex;
                        calclevel(select, levelselect, 0, skillselect);
                        break;
                    }
                case 1:
                    {
                        select = Combo1.SelectedIndex;
                        int levelselect = Level1.SelectedIndex;
                        int skillselect = SkillLevel1.SelectedIndex;
                        calclevel(select, levelselect, 1, skillselect);
                        break;
                    }
                case 2:
                    {
                        select = Combo2.SelectedIndex;
                        int levelselect = Level2.SelectedIndex;
                        int skillselect = SkillLevel2.SelectedIndex;
                        calclevel(select, levelselect, 2, skillselect);
                        break;
                    }
                case 3:
                    {
                        select = Combo3.SelectedIndex;
                        int levelselect = Level3.SelectedIndex;
                        int skillselect = SkillLevel3.SelectedIndex;
                        calclevel(select, levelselect, 3, skillselect);
                        break;
                    }
                case 4:
                    {
                        select = Combo4.SelectedIndex;
                        int levelselect = Level4.SelectedIndex;
                        int skillselect = SkillLevel4.SelectedIndex;
                        calclevel(select, levelselect, 4, skillselect);
                        break;
                    }
                case 5:
                    {
                        select = Combo5.SelectedIndex;
                        int levelselect = Level5.SelectedIndex;
                        int skillselect = SkillLevel5.SelectedIndex;
                        calclevel(select, levelselect, 5, skillselect);
                        break;
                    }
                case 6:
                    {
                        select = Combo6.SelectedIndex;
                        int levelselect = Level6.SelectedIndex;
                        int skillselect = SkillLevel6.SelectedIndex;
                        calclevel(select, levelselect, 6, skillselect);
                        break;
                    }
                case 7:
                    {
                        select = Combo7.SelectedIndex;
                        int levelselect = Level7.SelectedIndex;
                        int skillselect = SkillLevel7.SelectedIndex;
                        calclevel(select, levelselect, 7, skillselect);
                        break;
                    }
                case 8:
                    {
                        select = Combo8.SelectedIndex;
                        int levelselect = Level8.SelectedIndex;
                        int skillselect = SkillLevel8.SelectedIndex;
                        calclevel(select, levelselect, 8, skillselect);
                        break;
                    }
                default:
                    break;
            }
        }
        /// <summary>
        /// 计算伤害指数
        /// </summary>
        /// <param name="shotspeed">射速</param>
        /// <param name="damage">伤害</param>
        /// <param name="crit">暴击</param>
        /// <param name="enemydodge">敌方回避</param>
        /// <param name="hit">命中</param>
        /// <param name="belt">弹链</param>
        /// <param name="combo">哪一格（目前没有用该参数）</param>
        /// <param name="damageagain">是否有二次伤害（对应突击者之眼）</param>
        /// <returns></returns>
        public double Index(double shotspeed, double damage, double crit, double enemydodge, double hit, double belt, int combo, double damageagain)
        {
            double frame = Math.Ceiling(50 / shotspeed / 0.03333334);
            double slidertime = slider.Value;
            if (slidertime == 0)
                slidertime = 1;
            if (hit == 0)
                return 0;
            else if (belt == 0)
                return 30 * damage / frame * (1 - crit + crit * (1.5 + equipcritharm[combo])) / (1 + enemydodge / hit) * damageagain;
            else if (belt > 7)
            {

                if (slidertime != 0)
                {
                    // if (skillupbelt[combo] != 0)
                    // {
                    //     double shottime1 = (double)belt / 3;
                    //     double roletime1 = (double)belt / 3 + 4 + 200 / shotspeed;
                    //     double shottime0 = (double)(belt - skillupbelt[combo]) / 3;
                    //     double roletime0 = (double)(belt - skillupbelt[combo]) / 3 + 4 + 200 / shotspeed;

                    ////     skilltime[combo]
                    //            double role = Math.Ceiling(slidertime / roletime0);
                    //            double skillrole = Math.Ceiling(skilltime[combo]/roletime0);

                    // }
                    double shottime = (double)belt / 3;
                    double roletime = (double)belt / 3 + 4 + 200 / shotspeed;

                    if (skillupnegev[combo] != 0)
                    {
                        double role = Math.Ceiling(slidertime / roletime);
                        if (slidertime % roletime > shottime && (slidertime + 1) % roletime > 1)
                            return 0;
                        else if ((slidertime + 1) % roletime > shottime)
                        {
                            if (role > 4)
                            {
                                return (shottime - (slidertime % roletime)) * 3 * damage * (1 - crit + crit * (1.5 + equipcritharm[combo])) / (1 + enemydodge / hit) * Math.Pow(1 + skillupnegev[combo], 3);

                            }
                            else
                                return (shottime - (slidertime % roletime)) * 3 * damage * (1 - crit + crit * (1.5 + equipcritharm[combo])) / (1 + enemydodge / hit) * Math.Pow(1 + skillupnegev[combo], (role - 1));
                        }
                        else if ((slidertime + 1) % roletime < 1)
                        {
                            if (role > 4)
                            {
                                return (((slidertime + 1) % roletime)) * 3 * damage * (1 - crit + crit * (1.5 + equipcritharm[combo])) / (1 + enemydodge / hit) * Math.Pow(1 + skillupnegev[combo], 3);

                            }
                            else
                                return (((slidertime + 1) % roletime)) * 3 * damage * (1 - crit + crit * (1.5 + equipcritharm[combo])) / (1 + enemydodge / hit) * Math.Pow(1 + skillupnegev[combo], (role - 1));

                        }
                        else
                        {
                            if (role > 4)
                            {
                                return 3 * damage * (1 - crit + crit * (1.5 + equipcritharm[combo])) / (1 + enemydodge / hit) * Math.Pow(1 + skillupnegev[combo], 3);
                            }
                            else
                                return 3 * damage * (1 - crit + crit * (1.5 + equipcritharm[combo])) / (1 + enemydodge / hit) * Math.Pow(1 + skillupnegev[combo], (role - 1));
                        }

                    }

                    else if (skillupboom[combo] != 0)
                    {
                        if (slidertime % roletime > shottime && (slidertime + 1) % roletime > 1)
                            return 0;
                        else if ((slidertime + 1) % roletime > shottime)
                        {
                            return (shottime - (slidertime % roletime)) * 3 * damage * (1 - crit + crit * (1.5 + equipcritharm[combo])) / (1 + enemydodge / hit) + (shottime - (slidertime % roletime)) * 3 * skillupboom[combo] * (1 - crit + crit * (1.5 + equipcritharm[combo])) * (1.5 + equipcritharm[combo]) * damage / (1 + enemydodge / hit);
                        }
                        else if ((slidertime + 1) % roletime < 1)
                        {
                            return (((slidertime + 1) % roletime)) * 3 * damage * (1 - crit + crit * (1.5 + equipcritharm[combo])) / (1 + enemydodge / hit) + ((slidertime + 1) % roletime) * 3 * skillupboom[combo] * (1 - crit + crit * (1.5 + equipcritharm[combo])) * (1.5 + equipcritharm[combo]) * damage / (1 + enemydodge / hit);
                        }
                        else
                        {
                            return 3 * damage * (1 - crit + crit * (1.5 + equipcritharm[combo])) / (1 + enemydodge / hit) + 3 * skillupboom[combo] * (1 - crit + crit * (1.5 + equipcritharm[combo])) * (1.5 + equipcritharm[combo]) * damage / (1 + enemydodge / hit);
                        }
                    }

                    else if (skilluprenju[combo] == 1)
                    {
                        if (slidertime % roletime > shottime && (slidertime + 1) % roletime > 1)
                            return 0;
                        else if ((slidertime + 1) % roletime > shottime)
                        {
                            return (shottime - (slidertime % roletime)) * 3 * damage * (1 - crit + crit * (1.5 + equipcritharm[combo])) * skilluprenju[combo] / (1 + enemydodge / hit);
                        }
                        else if ((slidertime + 1) % roletime < 1)
                        {
                            return (((slidertime + 1) % roletime)) * 3 * damage * (1 - crit + crit * (1.5 + equipcritharm[combo])) * skilluprenju[combo] / (1 + enemydodge / hit);
                        }
                        else
                        {
                            return 3 * damage * (1 - crit + crit * (1.5 + equipcritharm[combo])) * skilluprenju[combo] / (1 + enemydodge / hit);
                        }
                        //double shotdamage = belt * damage * (1 - crit + crit * (1.5 + equipcritharm[combo])) / (1 + enemydodge / hit);
                        //if (slidertime < shottime)
                        //    return (shotdamage / shottime);
                        //else if (slidertime < roletime)
                        //    return (shotdamage / slidertime);
                        //else if (slidertime < (shottime + roletime))
                        //    return ((shotdamage + shotdamage / shottime * (slidertime-roletime)) / slidertime);
                        //else if (slidertime < 2 * roletime)
                        //    return 2 * shotdamage / slidertime;
                        //else if (slidertime < 2 * roletime + 3 * shottime)
                        //    return ((2 * shotdamage + shotdamage / shottime * (slidertime-2*roletime)) / slidertime);
                        //else
                        //    return 3 * shotdamage / slidertime;
                    }
                    else
                    {
                        double renjucrit = (crit * 3 + 1) / 4;
                        double renjucritharm = ((1.5 + equipcritharm[combo]) * 3 + skilluprenju[combo]) / 4;
                        //Console.WriteLine(renjucrit);
                        //Console.WriteLine(renjucritharm);
                        if (slidertime % roletime > shottime && (slidertime + 1) % roletime > 1)
                            return 0;
                        else if ((slidertime + 1) % roletime > shottime)
                        {
                            return (shottime - (slidertime % roletime)) * 3 * damage * (1 - renjucrit + renjucrit * renjucritharm) / (1 + enemydodge / hit);
                        }
                        else if ((slidertime + 1) % roletime < 1)
                        {
                            return (((slidertime + 1) % roletime)) * 3 * damage * (1 - renjucrit + renjucrit * renjucritharm) / (1 + enemydodge / hit);
                        }
                        else
                        {
                            return 3 * damage * (1 - renjucrit + renjucrit * renjucritharm) / (1 + enemydodge / hit);
                        }
                    }
                }
                else
                    return 0;
            }
            else
            {

                if (slidertime != 0)
                {
                    int index = 0;
                    double shottime = (50 / shotspeed + 0.5) * belt;
                    double roletime = 0;
                    switch (combo)
                    {
                        case 0: { index = Combo0.SelectedIndex; break; }
                        case 1: { index = Combo1.SelectedIndex; break; }
                        case 2: { index = Combo2.SelectedIndex; break; }
                        case 3: { index = Combo3.SelectedIndex; break; }
                        case 4: { index = Combo4.SelectedIndex; break; }
                        case 5: { index = Combo5.SelectedIndex; break; }
                        case 6: { index = Combo6.SelectedIndex; break; }
                        case 7: { index = Combo7.SelectedIndex; break; }
                        case 8: { index = Combo8.SelectedIndex; break; }
                    }
                    if (index == 137)
                        roletime = (50 / shotspeed + 0.5) * belt + 1 + belt * 0.5;
                    else
                        roletime = (50 / shotspeed + 0.5) * belt + 1.5 + belt * 0.5;

                    int target = 1;
                    if (!equiprifledslug[combo])
                        target = 3;
                    if (skilltarget[combo] == 5)
                        target = 5;
                    double shotdamage = belt * damage * (1 - crit + crit * (1.5 + equipcritharm[combo])) / (1 + enemydodge / hit) * target;
                    if (slidertime < shottime)
                        return (shotdamage / shottime);
                    else if (slidertime < roletime)
                        return (shotdamage / slidertime);
                    else if (slidertime < (shottime + roletime))
                        return ((shotdamage + shotdamage / shottime * (slidertime - roletime)) / slidertime);
                    else if (slidertime < 2 * roletime)
                        return 2 * shotdamage / slidertime;
                    else if (slidertime < 2 * roletime + 3 * shottime)
                        return ((2 * shotdamage + shotdamage / shottime * (slidertime - 2 * roletime)) / slidertime);
                    else
                        return 3 * shotdamage / slidertime;


                }
                else
                    return 0;
            }
        }
        /// <summary>
        /// 得到该格枪娘名称
        /// </summary>
        /// <param name="combo">哪一格</param>
        /// <returns></returns>
        string getcombogunname(int combo)
        {
            switch (combo)
            {
                case 0:
                    {
                        if (Combo0.SelectedIndex != -1)
                            return gun[Combo0.SelectedIndex].name;
                        else
                            return "";
                    }
                case 1:
                    {
                        if (Combo1.SelectedIndex != -1)
                            return gun[Combo1.SelectedIndex].name;
                        else
                            return "";
                    }
                case 2:
                    {
                        if (Combo2.SelectedIndex != -1)
                            return gun[Combo2.SelectedIndex].name;
                        else
                            return "";
                    }
                case 3:
                    {
                        if (Combo3.SelectedIndex != -1)
                            return gun[Combo3.SelectedIndex].name;
                        else
                            return "";
                    }
                case 4:
                    {
                        if (Combo4.SelectedIndex != -1)
                            return gun[Combo4.SelectedIndex].name;
                        else
                            return "";
                    }
                case 5:
                    {
                        if (Combo5.SelectedIndex != -1)
                            return gun[Combo5.SelectedIndex].name;
                        else
                            return "";
                    }
                case 6:
                    {
                        if (Combo6.SelectedIndex != -1)
                            return gun[Combo6.SelectedIndex].name;
                        else
                            return "";
                    }
                case 7:
                    {
                        if (Combo7.SelectedIndex != -1)
                            return gun[Combo7.SelectedIndex].name;
                        else
                            return "";
                    }
                case 8:
                    {
                        if (Combo8.SelectedIndex != -1)
                            return gun[Combo8.SelectedIndex].name;
                        else
                            return "";
                    }
                default:
                    return "";
            }
        }

        int getcombogunindex(int combo)
        {
            switch (combo)
            {
                case 0: return Combo0.SelectedIndex;
                case 1: return Combo1.SelectedIndex;
                case 2: return Combo2.SelectedIndex;
                case 3: return Combo3.SelectedIndex;
                case 4: return Combo4.SelectedIndex;
                case 5: return Combo5.SelectedIndex;
                case 6: return Combo6.SelectedIndex;
                case 7: return Combo7.SelectedIndex;
                case 8: return Combo8.SelectedIndex;
                default: return -1;
            }
        }
        /// <summary>
        /// 计算左上格光环
        /// </summary>
        void calccombo0buff()
        {

            gg[0].cleargg();

            int index0 = Combo0.SelectedIndex;
            int index1 = Combo1.SelectedIndex;
            int index3 = Combo3.SelectedIndex;
            int index4 = Combo4.SelectedIndex;

            int index2 = Combo2.SelectedIndex;
            int index5 = Combo5.SelectedIndex;
            int index8 = Combo8.SelectedIndex;
            int index6 = Combo6.SelectedIndex;
            int index7 = Combo7.SelectedIndex;
            if (index0 == -1 || index0 == GUN_NUMBER)
            {
                Combo0.SelectedIndex = GUN_NUMBER;
                renewindex(0);
                return;
            }
            else
            {
                if (index1 != -1 && gun[index1].grid_center == 5)
                {
                    switch (gun[index1].grid_center)
                    {
                        case 2: { othercombochange(index1, index0, 1, 0, 1); break; }
                        case 3: { othercombochange(index1, index0, 2, 0, 1); break; }
                        case 5: { othercombochange(index1, index0, 4, 0, 1); break; }
                        case 6: { othercombochange(index1, index0, 5, 0, 1); break; }
                        case 8: { othercombochange(index1, index0, 7, 0, 1); break; }
                        case 9: { othercombochange(index1, index0, 8, 0, 1); break; }
                            //   case 4: { othercombochange(index3, index0, 7, 0, 3); break; }
                            //  case 3: { othercombochange(index2, index0, 1, 0, 2); break; }
                    }

                }
                if (index3 != -1)
                {
                    switch (gun[index3].grid_center)
                    {
                        case 1: { othercombochange(index3, index0, 4, 0, 3); break; }
                        case 2: { othercombochange(index3, index0, 5, 0, 3); break; }
                        case 3: { othercombochange(index3, index0, 6, 0, 3); break; }
                        case 4: { othercombochange(index3, index0, 7, 0, 3); break; }
                        case 5: { othercombochange(index3, index0, 8, 0, 3); break; }
                        case 6: { othercombochange(index3, index0, 9, 0, 3); break; }

                            //  case 3: { othercombochange(index2, index0, 1, 0, 2); break; }
                    }
                }
                if (index4 != -1)
                {
                    switch (gun[index4].grid_center)
                    {
                        case 2: { othercombochange(index4, index0, 4, 0, 4); break; }
                        case 3: { othercombochange(index4, index0, 5, 0, 4); break; }
                        case 5: { othercombochange(index4, index0, 7, 0, 4); break; }
                        case 6: { othercombochange(index4, index0, 8, 0, 4); break; }
                            //   case 4: { othercombochange(index3, index0, 7, 0, 3); break; }
                            //  case 3: { othercombochange(index2, index0, 1, 0, 2); break; }
                    }

                }
                if (index2 != -1)
                {
                    switch (gun[index2].grid_center)
                    {
                        case 9: { othercombochange(index2, index0, 7, 0, 2); break; }
                        case 6: { othercombochange(index2, index0, 4, 0, 2); break; }
                        case 3: { othercombochange(index2, index0, 1, 0, 2); break; }
                    }

                }
                if (index5 != -1)
                {
                    switch (gun[index5].grid_center)
                    {
                        case 6: { othercombochange(index5, index0, 7, 0, 5); break; }
                        case 3: { othercombochange(index5, index0, 4, 0, 5); break; }
                    }
                }
                if (index8 != -1)
                {
                    switch (gun[index8].grid_center)
                    {
                        case 3: { othercombochange(index8, index0, 7, 0, 8); break; }
                    }
                }
                if (index6 != -1)
                {
                    switch (gun[index6].grid_center)
                    {
                        case 1: { othercombochange(index6, index0, 7, 0, 6); break; }
                        case 2: { othercombochange(index6, index0, 8, 0, 6); break; }
                        case 3: { othercombochange(index6, index0, 9, 0, 6); break; }
                    }
                }
                if (index7 != -1)
                {
                    switch (gun[index7].grid_center)
                    {
                        case 2: { othercombochange(index8, index0, 7, 0, 7); break; }
                        case 3: { othercombochange(index8, index0, 8, 0, 7); break; }
                    }
                }
                renewindex(0);
                if (rb0.IsChecked == true)
                    calctank(0);
                if (rbf0.IsChecked == true)
                    calcftank(0);
                return;
            }
        }
        /// <summary>
        /// 计算上格光环
        /// </summary>
        void calccombo1buff()
        {

            gg[1].cleargg();

            int index0 = Combo0.SelectedIndex;
            int index1 = Combo1.SelectedIndex;
            int index2 = Combo2.SelectedIndex;
            int index3 = Combo3.SelectedIndex;
            int index4 = Combo4.SelectedIndex;
            int index5 = Combo5.SelectedIndex;
            int index6 = Combo6.SelectedIndex;
            int index7 = Combo7.SelectedIndex;
            int index8 = Combo8.SelectedIndex;

            if (index1 == -1 || index1 == GUN_NUMBER)
            {
                Combo1.SelectedIndex = GUN_NUMBER;
                renewindex(1);
                return;
            }
            else
            {
                if (index0 != -1)
                {
                    switch (gun[index0].grid_center)
                    {
                        case 1: { othercombochange(index0, index1, 2, 1, 0); break; }
                        case 2: { othercombochange(index0, index1, 3, 1, 0); break; }
                        case 4: { othercombochange(index0, index1, 5, 1, 0); break; }
                        case 5: { othercombochange(index0, index1, 6, 1, 0); break; }
                        case 7: { othercombochange(index0, index1, 8, 1, 0); break; }
                        case 8: { othercombochange(index0, index1, 9, 1, 0); break; }
                    }
                }
                if (index2 != -1)
                {
                    switch (gun[index2].grid_center)
                    {
                        case 2: { othercombochange(index2, index1, 1, 1, 2); break; }
                        case 3: { othercombochange(index2, index1, 2, 1, 2); break; }
                        case 5: { othercombochange(index2, index1, 4, 1, 2); break; }
                        case 6: { othercombochange(index2, index1, 5, 1, 2); break; }
                        case 8: { othercombochange(index2, index1, 7, 1, 2); break; }
                        case 9: { othercombochange(index2, index1, 8, 1, 2); break; }
                    }
                }
                if (index3 != -1)
                {
                    switch (gun[index3].grid_center)
                    {
                        case 1: { othercombochange(index3, index1, 5, 1, 3); break; }
                        case 2: { othercombochange(index3, index1, 6, 1, 3); break; }
                        case 4: { othercombochange(index3, index1, 8, 1, 3); break; }
                        case 5: { othercombochange(index3, index1, 9, 1, 3); break; }
                    }
                }
                if (index4 != -1)
                {
                    switch (gun[index4].grid_center)
                    {
                        case 1: { othercombochange(index4, index1, 4, 1, 4); break; }
                        case 2: { othercombochange(index4, index1, 5, 1, 4); break; }
                        case 3: { othercombochange(index4, index1, 6, 1, 4); break; }
                        case 4: { othercombochange(index4, index1, 7, 1, 4); break; }
                        case 5: { othercombochange(index4, index1, 8, 1, 4); break; }
                        case 6: { othercombochange(index4, index1, 9, 1, 4); break; }
                    }
                }
                if (index5 != -1)
                {
                    switch (gun[index5].grid_center)
                    {
                        case 2: { othercombochange(index5, index1, 4, 1, 5); break; }
                        case 3: { othercombochange(index5, index1, 5, 1, 5); break; }
                        case 5: { othercombochange(index5, index1, 7, 1, 5); break; }
                        case 6: { othercombochange(index5, index1, 8, 1, 5); break; }
                    }
                }
                if (index6 != -1)
                {
                    switch (gun[index6].grid_center)
                    {
                        case 1: { othercombochange(index6, index1, 8, 1, 6); break; }
                        case 2: { othercombochange(index6, index1, 9, 1, 6); break; }
                    }
                }
                if (index7 != -1)
                {
                    switch (gun[index7].grid_center)
                    {
                        case 1: { othercombochange(index7, index1, 7, 1, 7); break; }
                        case 2: { othercombochange(index7, index1, 8, 1, 7); break; }
                        case 3: { othercombochange(index7, index1, 9, 1, 7); break; }
                    }
                }
                if (index8 != -1)
                {
                    switch (gun[index8].grid_center)
                    {
                        case 2: { othercombochange(index8, index1, 7, 1, 8); break; }
                        case 3: { othercombochange(index8, index1, 8, 1, 8); break; }
                    }
                }
                renewindex(1);
                if (rb1.IsChecked == true)
                    calctank(1);
                if (rbf1.IsChecked == true)
                    calcftank(1);
                return;
            }
        }
        /// <summary>
        /// 计算右上格光环
        /// </summary>
        void calccombo2buff()
        {

            gg[2].cleargg();

            int index2 = Combo2.SelectedIndex;
            int index1 = Combo1.SelectedIndex;
            int index4 = Combo4.SelectedIndex;
            int index5 = Combo5.SelectedIndex;

            int index0 = Combo0.SelectedIndex;
            int index3 = Combo3.SelectedIndex;
            int index6 = Combo6.SelectedIndex;
            int index7 = Combo7.SelectedIndex;
            int index8 = Combo8.SelectedIndex;

            if (index2 == -1 || index2 == GUN_NUMBER)
            {
                Combo2.SelectedIndex = GUN_NUMBER;
                renewindex(2);
                return;
            }
            else
            {
                if (index1 != -1)
                {
                    switch (gun[index1].grid_center)
                    {
                        case 1: { othercombochange(index1, index2, 2, 2, 1); break; }
                        case 2: { othercombochange(index1, index2, 3, 2, 1); break; }
                        case 4: { othercombochange(index1, index2, 5, 2, 1); break; }
                        case 5: { othercombochange(index1, index2, 6, 2, 1); break; }
                        case 7: { othercombochange(index1, index2, 8, 2, 1); break; }
                        case 8: { othercombochange(index1, index2, 9, 2, 1); break; }
                    }

                }
                if (index4 != -1)
                {
                    switch (gun[index4].grid_center)
                    {
                        case 1: { othercombochange(index4, index2, 5, 2, 4); break; }
                        case 2: { othercombochange(index4, index2, 6, 2, 4); break; }
                        case 4: { othercombochange(index4, index2, 8, 2, 4); break; }
                        case 5: { othercombochange(index4, index2, 9, 2, 4); break; }
                    }

                }
                if (index5 != -1)
                {
                    switch (gun[index5].grid_center)
                    {
                        case 1: { othercombochange(index5, index2, 4, 2, 5); break; }
                        case 2: { othercombochange(index5, index2, 5, 2, 5); break; }
                        case 3: { othercombochange(index5, index2, 6, 2, 5); break; }
                        case 4: { othercombochange(index5, index2, 7, 2, 5); break; }
                        case 5: { othercombochange(index5, index2, 8, 2, 5); break; }
                        case 6: { othercombochange(index5, index2, 9, 2, 5); break; }
                    }

                }
                if (index0 != -1)
                {
                    switch (gun[index0].grid_center)
                    {
                        case 7: { othercombochange(index0, index2, 9, 2, 0); break; }
                        case 4: { othercombochange(index0, index2, 6, 2, 0); break; }
                        case 1: { othercombochange(index0, index2, 3, 2, 0); break; }
                    }
                }
                if (index3 != -1)
                {
                    switch (gun[index3].grid_center)
                    {
                        case 4: { othercombochange(index3, index2, 9, 2, 3); break; }
                        case 1: { othercombochange(index3, index2, 6, 2, 3); break; }
                    }
                }
                if (index6 != -1)
                {
                    switch (gun[index6].grid_center)
                    {
                        case 1: { othercombochange(index6, index2, 9, 2, 6); break; }
                    }
                }
                if (index7 != -1)
                {
                    switch (gun[index7].grid_center)
                    {
                        case 1: { othercombochange(index7, index2, 8, 2, 7); break; }
                        case 2: { othercombochange(index7, index2, 9, 2, 7); break; }
                    }
                }
                if (index8 != -1)
                {
                    switch (gun[index8].grid_center)
                    {
                        case 1: { othercombochange(index8, index2, 7, 2, 8); break; }
                        case 2: { othercombochange(index8, index2, 8, 2, 8); break; }
                        case 3: { othercombochange(index8, index2, 9, 2, 8); break; }
                    }
                }
                renewindex(2);
                if (rb2.IsChecked == true)
                    calctank(2);
                if (rbf2.IsChecked == true)
                    calcftank(2);
                return;
            }
        }
        /// <summary>
        /// 计算左中格光环
        /// </summary>
        void calccombo3buff()
        {

            gg[3].cleargg();

            int index0 = Combo0.SelectedIndex;
            int index1 = Combo1.SelectedIndex;
            int index6 = Combo6.SelectedIndex;
            int index3 = Combo3.SelectedIndex;
            int index4 = Combo4.SelectedIndex;
            int index7 = Combo7.SelectedIndex;

            int index2 = Combo2.SelectedIndex;
            int index5 = Combo5.SelectedIndex;
            int index8 = Combo8.SelectedIndex;

            if (index3 == -1 || index3 == GUN_NUMBER)
            {
                Combo3.SelectedIndex = GUN_NUMBER;
                renewindex(3);
                return;
            }
            else
            {
                if (index0 != -1)
                {
                    switch (gun[index0].grid_center)
                    {
                        case 4: { othercombochange(index0, index3, 1, 3, 0); break; }
                        case 5: { othercombochange(index0, index3, 2, 3, 0); break; }
                        case 6: { othercombochange(index0, index3, 3, 3, 0); break; }
                        case 7: { othercombochange(index0, index3, 4, 3, 0); break; }
                        case 8: { othercombochange(index0, index3, 5, 3, 0); break; }
                        case 9: { othercombochange(index0, index3, 6, 3, 0); break; }
                    }

                }
                if (index1 != -1)
                {
                    switch (gun[index1].grid_center)
                    {
                        case 5: { othercombochange(index1, index3, 1, 3, 1); break; }
                        case 6: { othercombochange(index1, index3, 2, 3, 1); break; }
                        case 8: { othercombochange(index1, index3, 4, 3, 1); break; }
                        case 9: { othercombochange(index1, index3, 5, 3, 1); break; }
                    }
                }
                if (index4 != -1)
                {
                    switch (gun[index4].grid_center)
                    {
                        case 2: { othercombochange(index4, index3, 1, 3, 4); break; }
                        case 3: { othercombochange(index4, index3, 2, 3, 4); break; }
                        case 5: { othercombochange(index4, index3, 4, 3, 4); break; }
                        case 6: { othercombochange(index4, index3, 5, 3, 4); break; }
                        case 8: { othercombochange(index4, index3, 7, 3, 4); break; }
                        case 9: { othercombochange(index4, index3, 8, 3, 4); break; }
                    }
                }
                if (index6 != -1)
                {
                    switch (gun[index6].grid_center)
                    {
                        case 1: { othercombochange(index6, index3, 4, 3, 6); break; }
                        case 2: { othercombochange(index6, index3, 5, 3, 6); break; }
                        case 3: { othercombochange(index6, index3, 6, 3, 6); break; }
                        case 4: { othercombochange(index6, index3, 7, 3, 6); break; }
                        case 5: { othercombochange(index6, index3, 8, 3, 6); break; }
                        case 6: { othercombochange(index6, index3, 9, 3, 6); break; }
                    }

                }
                if (index7 != -1)
                {
                    switch (gun[index7].grid_center)
                    {
                        case 2: { othercombochange(index7, index3, 4, 3, 7); break; }
                        case 3: { othercombochange(index7, index3, 5, 3, 7); break; }
                        case 5: { othercombochange(index7, index3, 7, 3, 7); break; }
                        case 6: { othercombochange(index7, index3, 8, 3, 7); break; }
                    }

                }
                if (index2 != -1)
                {
                    switch (gun[index2].grid_center)
                    {
                        case 9: { othercombochange(index2, index3, 4, 3, 2); break; }
                        case 6: { othercombochange(index2, index3, 1, 3, 2); break; }
                    }

                }
                if (index5 != -1)
                {
                    switch (gun[index5].grid_center)
                    {
                        case 9: { othercombochange(index5, index3, 7, 3, 5); break; }
                        case 6: { othercombochange(index5, index3, 4, 3, 5); break; }
                        case 3: { othercombochange(index5, index3, 1, 3, 5); break; }
                    }
                }
                if (index8 != -1)
                {
                    switch (gun[index8].grid_center)
                    {
                        case 6: { othercombochange(index8, index3, 7, 3, 8); break; }
                        case 3: { othercombochange(index8, index3, 4, 3, 8); break; }
                    }
                }
                renewindex(3);
                if (rb3.IsChecked == true)
                    calctank(3);
                if (rbf3.IsChecked == true)
                    calcftank(3);
                return;
            }
        }
        /// <summary>
        /// 计算中格光环
        /// </summary>
        void calccombo4buff()
        {

            gg[4].cleargg();

            int index0 = Combo0.SelectedIndex;
            int index1 = Combo1.SelectedIndex;
            int index2 = Combo2.SelectedIndex;
            int index3 = Combo3.SelectedIndex;
            int index4 = Combo4.SelectedIndex;
            int index5 = Combo5.SelectedIndex;
            int index6 = Combo6.SelectedIndex;
            int index7 = Combo7.SelectedIndex;
            int index8 = Combo8.SelectedIndex;

            if (index4 == -1 || index4 == GUN_NUMBER)
            {
                Combo4.SelectedIndex = GUN_NUMBER;
                renewindex(4);
                return;
            }
            else
            {
                if (index0 != -1)
                {
                    switch (gun[index0].grid_center)
                    {
                        case 4: { othercombochange(index0, index4, 2, 4, 0); break; }
                        case 5: { othercombochange(index0, index4, 3, 4, 0); break; }
                        case 7: { othercombochange(index0, index4, 5, 4, 0); break; }
                        case 8: { othercombochange(index0, index4, 6, 4, 0); break; }
                    }
                }
                if (index1 != -1)
                {
                    switch (gun[index1].grid_center)
                    {
                        case 4: { othercombochange(index1, index4, 1, 4, 1); break; }
                        case 5: { othercombochange(index1, index4, 2, 4, 1); break; }
                        case 6: { othercombochange(index1, index4, 3, 4, 1); break; }
                        case 7: { othercombochange(index1, index4, 4, 4, 1); break; }
                        case 8: { othercombochange(index1, index4, 5, 4, 1); break; }
                        case 9: { othercombochange(index1, index4, 6, 4, 1); break; }
                    }

                }
                if (index3 != -1)
                {
                    switch (gun[index3].grid_center)
                    {
                        case 1: { othercombochange(index3, index4, 2, 4, 3); break; }
                        case 2: { othercombochange(index3, index4, 3, 4, 3); break; }
                        case 4: { othercombochange(index3, index4, 5, 4, 3); break; }
                        case 5: { othercombochange(index3, index4, 6, 4, 3); break; }
                        case 7: { othercombochange(index3, index4, 8, 4, 3); break; }
                        case 8: { othercombochange(index3, index4, 9, 4, 3); break; }
                    }

                }
                if (index2 != -1)
                {
                    switch (gun[index2].grid_center)
                    {
                        case 5: { othercombochange(index2, index4, 1, 4, 2); break; }
                        case 6: { othercombochange(index2, index4, 2, 4, 2); break; }
                        case 8: { othercombochange(index2, index4, 4, 4, 2); break; }
                        case 9: { othercombochange(index2, index4, 5, 4, 2); break; }
                    }

                }
                if (index5 != -1)
                {
                    switch (gun[index5].grid_center)
                    {
                        case 2: { othercombochange(index5, index4, 1, 4, 5); break; }
                        case 3: { othercombochange(index5, index4, 2, 4, 5); break; }
                        case 5: { othercombochange(index5, index4, 4, 4, 5); break; }
                        case 6: { othercombochange(index5, index4, 5, 4, 5); break; }
                        case 8: { othercombochange(index5, index4, 7, 4, 5); break; }
                        case 9: { othercombochange(index5, index4, 8, 4, 5); break; }
                    }

                }
                if (index6 != -1)
                {
                    switch (gun[index6].grid_center)
                    {
                        case 1: { othercombochange(index6, index4, 5, 4, 6); break; }
                        case 2: { othercombochange(index6, index4, 6, 4, 6); break; }
                        case 4: { othercombochange(index6, index4, 8, 4, 6); break; }
                        case 5: { othercombochange(index6, index4, 9, 4, 6); break; }
                    }

                }
                if (index7 != -1)
                {
                    switch (gun[index7].grid_center)
                    {
                        case 1: { othercombochange(index7, index4, 4, 4, 7); break; }
                        case 2: { othercombochange(index7, index4, 5, 4, 7); break; }
                        case 3: { othercombochange(index7, index4, 6, 4, 7); break; }
                        case 4: { othercombochange(index7, index4, 7, 4, 7); break; }
                        case 5: { othercombochange(index7, index4, 8, 4, 7); break; }
                        case 6: { othercombochange(index7, index4, 9, 4, 7); break; }
                    }

                }
                if (index8 != -1)
                {
                    switch (gun[index8].grid_center)
                    {
                        case 2: { othercombochange(index8, index4, 4, 4, 8); ; break; }
                        case 3: { othercombochange(index8, index4, 5, 4, 8); ; break; }
                        case 5: { othercombochange(index8, index4, 7, 4, 8); ; break; }
                        case 6: { othercombochange(index8, index4, 8, 4, 8); ; break; }
                    }

                }
                renewindex(4);
                if (rb4.IsChecked == true)
                    calctank(4);
                if (rbf4.IsChecked == true)
                    calcftank(4);
                return;
            }
        }
        /// <summary>
        /// 计算右中格光环
        /// </summary>
        void calccombo5buff()
        {
            gg[5].cleargg();

            int index2 = Combo2.SelectedIndex;
            int index1 = Combo1.SelectedIndex;
            int index8 = Combo8.SelectedIndex;
            int index5 = Combo5.SelectedIndex;
            int index4 = Combo4.SelectedIndex;
            int index7 = Combo7.SelectedIndex;

            int index0 = Combo0.SelectedIndex;
            int index3 = Combo3.SelectedIndex;
            int index6 = Combo6.SelectedIndex;

            if (index5 == -1 || index5 == GUN_NUMBER)
            {
                Combo5.SelectedIndex = GUN_NUMBER;
                renewindex(5);
                return;
            }
            else
            {
                if (index1 != -1)
                {
                    switch (gun[index1].grid_center)
                    {
                        case 4: { othercombochange(index1, index5, 2, 5, 1); break; }
                        case 5: { othercombochange(index1, index5, 3, 5, 1); break; }
                        case 7: { othercombochange(index1, index5, 5, 5, 1); break; }
                        case 8: { othercombochange(index1, index5, 6, 5, 1); break; }
                    }

                }
                if (index2 != -1)
                {
                    switch (gun[index2].grid_center)
                    {
                        case 4: { othercombochange(index2, index5, 1, 5, 2); break; }
                        case 5: { othercombochange(index2, index5, 2, 5, 2); break; }
                        case 6: { othercombochange(index2, index5, 3, 5, 2); break; }
                        case 7: { othercombochange(index2, index5, 4, 5, 2); break; }
                        case 8: { othercombochange(index2, index5, 5, 5, 2); break; }
                        case 9: { othercombochange(index2, index5, 6, 5, 2); break; }
                    }

                }
                if (index4 != -1)
                {
                    switch (gun[index4].grid_center)
                    {
                        case 1: { othercombochange(index4, index5, 2, 5, 4); ; break; }
                        case 2: { othercombochange(index4, index5, 3, 5, 4); ; break; }
                        case 4: { othercombochange(index4, index5, 5, 5, 4); ; break; }
                        case 5: { othercombochange(index4, index5, 6, 5, 4); ; break; }
                        case 7: { othercombochange(index4, index5, 8, 5, 4); ; break; }
                        case 8: { othercombochange(index4, index5, 9, 5, 4); ; break; }
                    }

                }
                if (index7 != -1)
                {
                    switch (gun[index7].grid_center)
                    {
                        case 1: { othercombochange(index7, index5, 5, 5, 7); break; }
                        case 2: { othercombochange(index7, index5, 6, 5, 7); break; }
                        case 4: { othercombochange(index7, index5, 8, 5, 7); break; }
                        case 5: { othercombochange(index7, index5, 9, 5, 7); break; }
                    }

                }
                if (index8 != -1)
                {
                    switch (gun[index8].grid_center)
                    {
                        case 1: { othercombochange(index8, index5, 4, 5, 8); break; }
                        case 2: { othercombochange(index8, index5, 5, 5, 8); break; }
                        case 3: { othercombochange(index8, index5, 6, 5, 8); break; }
                        case 4: { othercombochange(index8, index5, 7, 5, 8); break; }
                        case 5: { othercombochange(index8, index5, 8, 5, 8); break; }
                        case 6: { othercombochange(index8, index5, 9, 5, 8); break; }
                    }

                }
                if (index0 != -1)
                {
                    switch (gun[index0].grid_center)
                    {
                        case 7: { othercombochange(index0, index5, 6, 5, 0); break; }
                        case 4: { othercombochange(index0, index5, 3, 5, 0); break; }
                    }
                }
                if (index3 != -1)
                {
                    switch (gun[index3].grid_center)
                    {
                        case 7: { othercombochange(index3, index5, 9, 5, 3); break; }
                        case 4: { othercombochange(index3, index5, 6, 5, 3); break; }
                        case 1: { othercombochange(index3, index5, 3, 5, 3); break; }
                    }
                }
                if (index6 != -1)
                {
                    switch (gun[index6].grid_center)
                    {
                        case 4: { othercombochange(index6, index5, 9, 5, 6); break; }
                        case 1: { othercombochange(index6, index5, 6, 5, 6); break; }
                    }
                }
                renewindex(5);
                if (rb5.IsChecked == true)
                    calctank(5);
                if (rbf5.IsChecked == true)
                    calcftank(5);
                return;
            }
        }
        /// <summary>
        /// 计算左下格光环
        /// </summary>
        void calccombo6buff()
        {
            gg[6].cleargg();

            int index6 = Combo6.SelectedIndex;
            int index7 = Combo7.SelectedIndex;
            int index4 = Combo4.SelectedIndex;
            int index3 = Combo3.SelectedIndex;

            int index2 = Combo2.SelectedIndex;
            int index5 = Combo5.SelectedIndex;
            int index8 = Combo8.SelectedIndex;
            int index0 = Combo0.SelectedIndex;
            int index1 = Combo1.SelectedIndex;
            if (index6 == -1 || index6 == GUN_NUMBER)
            {
                Combo6.SelectedIndex = GUN_NUMBER;
                renewindex(6);
                return;
            }
            else
            {
                if (index3 != -1)
                {
                    switch (gun[index3].grid_center)
                    {
                        case 4: { othercombochange(index3, index6, 1, 6, 3); break; }
                        case 5: { othercombochange(index3, index6, 2, 6, 3); break; }
                        case 6: { othercombochange(index3, index6, 3, 6, 3); break; }
                        case 7: { othercombochange(index3, index6, 4, 6, 3); break; }
                        case 8: { othercombochange(index3, index6, 5, 6, 3); break; }
                        case 9: { othercombochange(index3, index6, 6, 6, 3); break; }
                    }

                }
                if (index4 != -1)
                {
                    switch (gun[index4].grid_center)
                    {
                        case 5: { othercombochange(index4, index6, 1, 6, 4); break; }
                        case 6: { othercombochange(index4, index6, 2, 6, 4); break; }
                        case 8: { othercombochange(index4, index6, 4, 6, 4); break; }
                        case 9: { othercombochange(index4, index6, 5, 6, 4); break; }
                    }

                }
                if (index7 != -1)
                {
                    switch (gun[index7].grid_center)
                    {
                        case 2: { othercombochange(index7, index6, 1, 6, 7); break; }
                        case 3: { othercombochange(index7, index6, 2, 6, 7); break; }
                        case 5: { othercombochange(index7, index6, 4, 6, 7); break; }
                        case 6: { othercombochange(index7, index6, 5, 6, 7); break; }
                        case 8: { othercombochange(index7, index6, 7, 6, 7); break; }
                        case 9: { othercombochange(index7, index6, 8, 6, 7); break; }
                    }

                }
                if (index2 != -1)
                {
                    switch (gun[index2].grid_center)
                    {
                        case 9: { othercombochange(index2, index6, 1, 6, 2); break; }
                    }

                }
                if (index0 != -1)
                {
                    switch (gun[index0].grid_center)
                    {
                        case 7: { othercombochange(index0, index6, 1, 6, 0); break; }
                    }

                }
                if (index1 != -1)
                {
                    switch (gun[index1].grid_center)
                    {
                        case 8: { othercombochange(index1, index6, 1, 6, 1); break; }
                        case 9: { othercombochange(index1, index6, 2, 6, 1); break; }
                    }

                }
                if (index5 != -1)
                {
                    switch (gun[index5].grid_center)
                    {
                        case 9: { othercombochange(index5, index6, 4, 6, 5); break; }
                        case 6: { othercombochange(index5, index6, 1, 6, 5); break; }
                    }
                }
                if (index8 != -1)
                {
                    switch (gun[index8].grid_center)
                    {
                        case 9: { othercombochange(index8, index6, 7, 6, 8); break; }
                        case 6: { othercombochange(index8, index6, 4, 6, 8); break; }
                        case 3: { othercombochange(index8, index6, 1, 6, 8); break; }
                    }
                }
                renewindex(6);
                if (rb6.IsChecked == true)
                    calctank(6);
                if (rbf6.IsChecked == true)
                    calcftank(6);
                return;
            }
        }
        /// <summary>
        /// 计算下格光环
        /// </summary>
        void calccombo7buff()
        {
            gg[7].cleargg();

            int index3 = Combo3.SelectedIndex;
            int index6 = Combo6.SelectedIndex;
            int index8 = Combo8.SelectedIndex;
            int index5 = Combo5.SelectedIndex;
            int index4 = Combo4.SelectedIndex;
            int index7 = Combo7.SelectedIndex;
            int index0 = Combo0.SelectedIndex;
            int index1 = Combo1.SelectedIndex;
            int index2 = Combo2.SelectedIndex;
            if (index7 == -1 || index7 == GUN_NUMBER)
            {
                Combo7.SelectedIndex = GUN_NUMBER;
                renewindex(7);
                return;
            }
            else
            {
                if (index3 != -1)
                {
                    switch (gun[index3].grid_center)
                    {
                        case 4: { othercombochange(index3, index7, 2, 7, 3); break; }
                        case 5: { othercombochange(index3, index7, 3, 7, 3); break; }
                        case 7: { othercombochange(index3, index7, 5, 7, 3); break; }
                        case 8: { othercombochange(index3, index7, 6, 7, 3); break; }
                    }

                }
                if (index4 != -1)
                {
                    switch (gun[index4].grid_center)
                    {
                        case 4: { othercombochange(index4, index7, 1, 7, 4); break; }
                        case 5: { othercombochange(index4, index7, 2, 7, 4); break; }
                        case 6: { othercombochange(index4, index7, 3, 7, 4); break; }
                        case 7: { othercombochange(index4, index7, 4, 7, 4); break; }
                        case 8: { othercombochange(index4, index7, 5, 7, 4); break; }
                        case 9: { othercombochange(index4, index7, 6, 7, 4); break; }
                    }

                }
                if (index5 != -1)
                {
                    switch (gun[index5].grid_center)
                    {
                        case 5: { othercombochange(index5, index7, 1, 7, 5); break; }
                        case 6: { othercombochange(index5, index7, 2, 7, 5); break; }
                        case 8: { othercombochange(index5, index7, 4, 7, 5); break; }
                        case 9: { othercombochange(index5, index7, 5, 7, 5); break; }
                    }

                }
                if (index6 != -1)
                {
                    switch (gun[index6].grid_center)
                    {
                        case 1: { othercombochange(index6, index7, 2, 7, 6); break; }
                        case 2: { othercombochange(index6, index7, 3, 7, 6); break; }
                        case 4: { othercombochange(index6, index7, 5, 7, 6); break; }
                        case 5: { othercombochange(index6, index7, 6, 7, 6); break; }
                        case 7: { othercombochange(index6, index7, 8, 7, 6); break; }
                        case 8: { othercombochange(index6, index7, 9, 7, 6); break; }
                    }

                }
                if (index8 != -1)
                {
                    switch (gun[index8].grid_center)
                    {
                        case 2: { othercombochange(index8, index7, 1, 7, 8); break; }
                        case 3: { othercombochange(index8, index7, 2, 7, 8); break; }
                        case 5: { othercombochange(index8, index7, 4, 7, 8); break; }
                        case 6: { othercombochange(index8, index7, 5, 7, 8); break; }
                        case 8: { othercombochange(index8, index7, 7, 7, 8); break; }
                        case 9: { othercombochange(index8, index7, 8, 7, 8); break; }
                    }

                }
                if (index0 != -1)
                {
                    switch (gun[index0].grid_center)
                    {
                        case 7: { othercombochange(index0, index7, 2, 7, 0); break; }
                        case 8: { othercombochange(index0, index7, 3, 7, 8); break; }

                    }

                }
                if (index1 != -1)
                {
                    switch (gun[index1].grid_center)
                    {
                        case 7: { othercombochange(index1, index7, 1, 7, 1); break; }
                        case 8: { othercombochange(index1, index7, 2, 7, 1); break; }
                        case 9: { othercombochange(index1, index7, 3, 7, 1); break; }
                    }

                }
                if (index2 != -1)
                {
                    switch (gun[index2].grid_center)
                    {
                        case 8: { othercombochange(index2, index7, 2, 7, 2); break; }
                        case 9: { othercombochange(index2, index7, 3, 7, 2); break; }
                    }

                }

                renewindex(7);
                if (rb7.IsChecked == true)
                    calctank(7);
                if (rbf7.IsChecked == true)
                    calcftank(7);
                return;
            }
        }
        /// <summary>
        /// 计算右下格光环
        /// </summary>
        void calccombo8buff()
        {
            gg[8].cleargg();

            int index5 = Combo5.SelectedIndex;
            int index7 = Combo7.SelectedIndex;
            int index4 = Combo4.SelectedIndex;
            int index8 = Combo8.SelectedIndex;

            int index0 = Combo0.SelectedIndex;
            int index3 = Combo3.SelectedIndex;
            int index6 = Combo6.SelectedIndex;
            int index1 = Combo1.SelectedIndex;
            int index2 = Combo2.SelectedIndex;
            if (index8 == -1 || index8 == GUN_NUMBER)
            {
                Combo8.SelectedIndex = GUN_NUMBER;
                renewindex(8);
                return;
            }
            else
            {
                if (index4 != -1)
                {
                    switch (gun[index4].grid_center)
                    {
                        case 4: { othercombochange(index4, index8, 2, 8, 4); break; }
                        case 5: { othercombochange(index4, index8, 3, 8, 4); break; }
                        case 7: { othercombochange(index4, index8, 5, 8, 4); break; }
                        case 8: { othercombochange(index4, index8, 6, 8, 4); break; }
                    }

                }
                if (index5 != -1)
                {
                    switch (gun[index5].grid_center)
                    {
                        case 4: { othercombochange(index5, index8, 1, 8, 5); ; break; }
                        case 5: { othercombochange(index5, index8, 2, 8, 5); ; break; }
                        case 6: { othercombochange(index5, index8, 3, 8, 5); ; break; }
                        case 7: { othercombochange(index5, index8, 4, 8, 5); ; break; }
                        case 8: { othercombochange(index5, index8, 5, 8, 5); ; break; }
                        case 9: { othercombochange(index5, index8, 6, 8, 5); ; break; }
                    }

                }
                if (index7 != -1)
                {
                    switch (gun[index7].grid_center)
                    {
                        case 1: { othercombochange(index7, index8, 2, 8, 7); break; }
                        case 2: { othercombochange(index7, index8, 3, 8, 7); break; }
                        case 4: { othercombochange(index7, index8, 5, 8, 7); break; }
                        case 5: { othercombochange(index7, index8, 6, 8, 7); break; }
                        case 7: { othercombochange(index7, index8, 8, 8, 7); break; }
                        case 8: { othercombochange(index7, index8, 9, 8, 7); break; }
                    }

                }
                if (index0 != -1)
                {
                    switch (gun[index0].grid_center)
                    {
                        case 7: { othercombochange(index0, index8, 3, 8, 0); break; }
                    }
                }
                if (index1 != -1)
                {
                    switch (gun[index1].grid_center)
                    {
                        case 7: { othercombochange(index1, index8, 2, 8, 1); break; }
                        case 8: { othercombochange(index1, index8, 3, 8, 1); break; }
                    }
                }
                if (index2 != -1)
                {
                    switch (gun[index2].grid_center)
                    {
                        case 7: { othercombochange(index2, index8, 1, 8, 2); break; }
                        case 8: { othercombochange(index2, index8, 2, 8, 2); break; }
                        case 9: { othercombochange(index2, index8, 3, 8, 2); break; }
                    }
                }
                if (index3 != -1)
                {
                    switch (gun[index3].grid_center)
                    {
                        case 7: { othercombochange(index3, index8, 6, 8, 3); break; }
                        case 4: { othercombochange(index3, index8, 3, 8, 3); break; }
                    }
                }
                if (index6 != -1)
                {
                    switch (gun[index6].grid_center)
                    {
                        case 7: { othercombochange(index6, index8, 9, 8, 6); break; }
                        case 4: { othercombochange(index6, index8, 6, 8, 6); break; }
                        case 1: { othercombochange(index6, index8, 3, 8, 6); break; }
                    }
                }
                renewindex(8);
                if (rb8.IsChecked == true)
                    calctank(8);
                if (rbf8.IsChecked == true)
                    calcftank(8);
                return;
            }
        }



        /// <summary>
        /// 左上格ComboBox改变选中项事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Combo0_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

            int select = Combo0.SelectedIndex;
            if (select == -1)
            {

                return;
            }

            for (int i = 0; i < 9; i++)
            {
                if (getcombogunname(i) != "" && getcombogunname(i) != null)
                    howmany++;
                if (getcombogunname(i) == gun[select].name && getcombogunname(i) != "" && getcombogunname(i) != null && i != 0)
                {
                    switch (i)
                    {
                        case 0:
                            {
                                Combo0.SelectedIndex = GUN_NUMBER;
                                Image0.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb0.Text = "无";
                                Lskilldamage0.Content = 0;
                                Ltime0.Content = 0;
                                Lskillread0.Content = 0;
                                break;
                            }
                        case 1:
                            {
                                Combo1.SelectedIndex = GUN_NUMBER;
                                Image1.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb1.Text = "无";
                                Lskilldamage1.Content = 0;
                                Ltime1.Content = 0;
                                Lskillread1.Content = 0;
                                break;
                            }
                        case 2:
                            {
                                Combo2.SelectedIndex = GUN_NUMBER;
                                Image2.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb2.Text = "无";
                                Lskilldamage2.Content = 0;
                                Ltime2.Content = 0;
                                Lskillread2.Content = 0;
                                break;
                            }
                        case 3:
                            {
                                Combo3.SelectedIndex = GUN_NUMBER;
                                Image3.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb3.Text = "无";
                                Lskilldamage3.Content = 0;
                                Ltime3.Content = 0;
                                Lskillread3.Content = 0;
                                break;
                            }
                        case 4:
                            {
                                Combo4.SelectedIndex = GUN_NUMBER;
                                Image4.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb4.Text = "无";
                                Lskilldamage4.Content = 0;
                                Ltime4.Content = 0;
                                Lskillread4.Content = 0;
                                break;
                            }
                        case 5:
                            {
                                Combo5.SelectedIndex = GUN_NUMBER;
                                Image5.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb5.Text = "无";
                                Lskilldamage5.Content = 0;
                                Ltime5.Content = 0;
                                Lskillread5.Content = 0;
                                break;
                            }
                        case 6:
                            {
                                Combo6.SelectedIndex = GUN_NUMBER;
                                Image6.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb6.Text = "无";
                                Lskilldamage6.Content = 0;
                                Ltime6.Content = 0;
                                Lskillread6.Content = 0;
                                break;
                            }
                        case 7:
                            {
                                Combo7.SelectedIndex = GUN_NUMBER;
                                Image7.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb7.Text = "无";
                                Lskilldamage7.Content = 0;
                                Ltime7.Content = 0;
                                Lskillread7.Content = 0;
                                break;
                            }
                        case 8:
                            {
                                Combo8.SelectedIndex = GUN_NUMBER;
                                Image8.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb8.Text = "无";
                                Lskilldamage8.Content = 0;
                                Ltime8.Content = 0;
                                Lskillread8.Content = 0;
                                break;
                            }
                        default:
                            break;
                    }


                    break;
                }
            }

            if (howmany == 6)
            {
                howmany = 0;
                Combo0.SelectedIndex = GUN_NUMBER;
                return;
            }
            else
                howmany = 0;
            if (select != -1 && select != GUN_NUMBER)
                if (gun[select].name == getcombogunname(1) || gun[select].name == getcombogunname(2) || gun[select].name == getcombogunname(3) || gun[select].name == getcombogunname(4) || gun[select].name == getcombogunname(5) || gun[select].name == getcombogunname(6) || gun[select].name == getcombogunname(7) || gun[select].name == getcombogunname(8))
                {
                    Combo0.SelectedIndex = lastgunindex[0];
                    return;
                }
            if (gun[select].what == 2)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                Combo0.Foreground = br;
            }
            else if (gun[select].what == 3)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                Combo0.Foreground = br;
            }
            else if (gun[select].what == 4)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                Combo0.Foreground = br;
            }
            else if (gun[select].what == 5)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                Combo0.Foreground = br;
            }
            else if (gun[select].what == 6)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                Combo0.Foreground = br;
            }
            int levelselect = Level0.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            multiple[0] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[0] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[0] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[0] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[0] = 1.25;
                }
            }
            cb0.IsChecked = false;
            if (select != -1)
                calccombo0buff();
            calccombo1buff();
            calccombo2buff();
            calccombo3buff();
            calccombo4buff();
            calccombo5buff();
            calccombo6buff();
            calccombo7buff();
            calccombo8buff();
            lastgunindex[0] = select;
            clearequip(0);
            renewskill();
            calceat();

            equipcb01.Items.Clear();
            equipcb01.ToolTip = null;
            equipcb01.IsEnabled = false;
            equipcb02.Items.Clear();
            equipcb02.ToolTip = null;
            equipcb02.IsEnabled = false;
            equipcb03.Items.Clear();
            equipcb03.ToolTip = null;
            equipcb03.IsEnabled = false;
            loadequipcb(select, Level0.SelectedIndex, 0);
        }
        /// <summary>
        /// 上格ComboBox改变选中项事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Combo1_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

            int select = Combo1.SelectedIndex;
            if (select == -1)
                return;
            for (int i = 0; i < 9; i++)
            {
                if (getcombogunname(i) != "" && getcombogunname(i) != null)
                    howmany++;
                if (getcombogunname(i) == gun[select].name && getcombogunname(i) != "" && getcombogunname(i) != null && i != 1)
                {
                    switch (i)
                    {
                        case 0:
                            {
                                Combo0.SelectedIndex = GUN_NUMBER;
                                Image0.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb0.Text = "无";
                                Lskilldamage0.Content = 0;
                                Ltime0.Content = 0;
                                Lskillread0.Content = 0;
                                break;
                            }
                        case 1:
                            {
                                Combo1.SelectedIndex = GUN_NUMBER;
                                Image1.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb1.Text = "无";
                                Lskilldamage1.Content = 0;
                                Ltime1.Content = 0;
                                Lskillread1.Content = 0;
                                break;
                            }
                        case 2:
                            {
                                Combo2.SelectedIndex = GUN_NUMBER;
                                Image2.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb2.Text = "无";
                                Lskilldamage2.Content = 0;
                                Ltime2.Content = 0;
                                Lskillread2.Content = 0;
                                break;
                            }
                        case 3:
                            {
                                Combo3.SelectedIndex = GUN_NUMBER;
                                Image3.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb3.Text = "无";
                                Lskilldamage3.Content = 0;
                                Ltime3.Content = 0;
                                Lskillread3.Content = 0;
                                break;
                            }
                        case 4:
                            {
                                Combo4.SelectedIndex = GUN_NUMBER;
                                Image4.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb4.Text = "无";
                                Lskilldamage4.Content = 0;
                                Ltime4.Content = 0;
                                Lskillread4.Content = 0;
                                break;
                            }
                        case 5:
                            {
                                Combo5.SelectedIndex = GUN_NUMBER;
                                Image5.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb5.Text = "无";
                                Lskilldamage5.Content = 0;
                                Ltime5.Content = 0;
                                Lskillread5.Content = 0;
                                break;
                            }
                        case 6:
                            {
                                Combo6.SelectedIndex = GUN_NUMBER;
                                Image6.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb6.Text = "无";
                                Lskilldamage6.Content = 0;
                                Ltime6.Content = 0;
                                Lskillread6.Content = 0;
                                break;
                            }
                        case 7:
                            {
                                Combo7.SelectedIndex = GUN_NUMBER;
                                Image7.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb7.Text = "无";
                                Lskilldamage7.Content = 0;
                                Ltime7.Content = 0;
                                Lskillread7.Content = 0;
                                break;
                            }
                        case 8:
                            {
                                Combo8.SelectedIndex = GUN_NUMBER;
                                Image8.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb8.Text = "无";
                                Lskilldamage8.Content = 0;
                                Ltime8.Content = 0;
                                Lskillread8.Content = 0;
                                break;
                            }
                        default:
                            break;
                    }
                    break;
                }
            }

            if (howmany == 6)
            {
                howmany = 0;
                Combo1.SelectedIndex = GUN_NUMBER;
                return;
            }
            else
                howmany = 0;
            if (select != -1 && select != GUN_NUMBER)
                if (gun[select].name == getcombogunname(0) || gun[select].name == getcombogunname(2) || gun[select].name == getcombogunname(3) || gun[select].name == getcombogunname(4) || gun[select].name == getcombogunname(5) || gun[select].name == getcombogunname(6) || gun[select].name == getcombogunname(7) || gun[select].name == getcombogunname(8))
                {
                    Combo1.SelectedIndex = lastgunindex[1];
                    return;
                }
            if (gun[select].what == 2)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                Combo1.Foreground = br;
            }
            else if (gun[select].what == 3)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                Combo1.Foreground = br;
            }
            else if (gun[select].what == 4)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                Combo1.Foreground = br;
            }
            else if (gun[select].what == 5)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                Combo1.Foreground = br;
            }
            else if (gun[select].what == 6)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                Combo1.Foreground = br;
            }
            int levelselect = Level1.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            multiple[1] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[1] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[1] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[1] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[1] = 1.25;
                }
            }
            cb1.IsChecked = false;
            if (select != -1)
                calccombo1buff();
            calccombo0buff();
            calccombo2buff();
            calccombo3buff();
            calccombo4buff();
            calccombo5buff();
            calccombo6buff();
            calccombo7buff();
            calccombo8buff();
            clearequip(1);
            lastgunindex[1] = select;
            renewskill();
            calceat();
            equipcb11.Items.Clear();
            equipcb11.IsEnabled = false;
            equipcb11.ToolTip = null;
            equipcb12.Items.Clear();
            equipcb12.IsEnabled = false;
            equipcb12.ToolTip = null;
            equipcb13.Items.Clear();
            equipcb13.IsEnabled = false;
            equipcb13.ToolTip = null;
            loadequipcb(select, Level1.SelectedIndex, 1);
        }
        /// <summary>
        /// 右上格ComboBox改变选中项事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Combo2_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

            int select = Combo2.SelectedIndex;
            if (select == -1)
                return;
            for (int i = 0; i < 9; i++)
            {
                if (getcombogunname(i) != "" && getcombogunname(i) != null)
                    howmany++;
                if (getcombogunname(i) == gun[select].name && getcombogunname(i) != "" && getcombogunname(i) != null && i != 2)
                {
                    switch (i)
                    {
                        case 0:
                            {
                                Combo0.SelectedIndex = GUN_NUMBER;
                                Image0.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb0.Text = "无";
                                Lskilldamage0.Content = 0;
                                Ltime0.Content = 0;
                                Lskillread0.Content = 0;
                                break;
                            }
                        case 1:
                            {
                                Combo1.SelectedIndex = GUN_NUMBER;
                                Image1.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb1.Text = "无";
                                Lskilldamage1.Content = 0;
                                Ltime1.Content = 0;
                                Lskillread1.Content = 0;
                                break;
                            }
                        case 2:
                            {
                                Combo2.SelectedIndex = GUN_NUMBER;
                                Image2.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb2.Text = "无";
                                Lskilldamage2.Content = 0;
                                Ltime2.Content = 0;
                                Lskillread2.Content = 0;
                                break;
                            }
                        case 3:
                            {
                                Combo3.SelectedIndex = GUN_NUMBER;
                                Image3.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb3.Text = "无";
                                Lskilldamage3.Content = 0;
                                Ltime3.Content = 0;
                                Lskillread3.Content = 0;
                                break;
                            }
                        case 4:
                            {
                                Combo4.SelectedIndex = GUN_NUMBER;
                                Image4.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb4.Text = "无";
                                Lskilldamage4.Content = 0;
                                Ltime4.Content = 0;
                                Lskillread4.Content = 0;
                                break;
                            }
                        case 5:
                            {
                                Combo5.SelectedIndex = GUN_NUMBER;
                                Image5.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb5.Text = "无";
                                Lskilldamage5.Content = 0;
                                Ltime5.Content = 0;
                                Lskillread5.Content = 0;
                                break;
                            }
                        case 6:
                            {
                                Combo6.SelectedIndex = GUN_NUMBER;
                                Image6.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb6.Text = "无";
                                Lskilldamage6.Content = 0;
                                Ltime6.Content = 0;
                                Lskillread6.Content = 0;
                                break;
                            }
                        case 7:
                            {
                                Combo7.SelectedIndex = GUN_NUMBER;
                                Image7.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb7.Text = "无";
                                Lskilldamage7.Content = 0;
                                Ltime7.Content = 0;
                                Lskillread7.Content = 0;
                                break;
                            }
                        case 8:
                            {
                                Combo8.SelectedIndex = GUN_NUMBER;
                                Image8.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb8.Text = "无";
                                Lskilldamage8.Content = 0;
                                Ltime8.Content = 0;
                                Lskillread8.Content = 0;
                                break;
                            }
                        default:
                            break;
                    }
                    break;
                }
            }

            if (howmany == 6)
            {
                howmany = 0;
                Combo2.SelectedIndex = GUN_NUMBER;
                return;
            }
            else
                howmany = 0;
            if (select != -1 && select != GUN_NUMBER)
                if (gun[select].name == getcombogunname(0) || gun[select].name == getcombogunname(1) || gun[select].name == getcombogunname(3) || gun[select].name == getcombogunname(4) || gun[select].name == getcombogunname(5) || gun[select].name == getcombogunname(6) || gun[select].name == getcombogunname(7) || gun[select].name == getcombogunname(8))
                {
                    Combo2.SelectedIndex = lastgunindex[2];
                    return;
                }
            if (gun[select].what == 2)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                Combo2.Foreground = br;
            }
            else if (gun[select].what == 3)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                Combo2.Foreground = br;
            }
            else if (gun[select].what == 4)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                Combo2.Foreground = br;
            }
            else if (gun[select].what == 5)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                Combo2.Foreground = br;
            }
            else if (gun[select].what == 6)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                Combo2.Foreground = br;
            }
            int levelselect = Level2.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            multiple[2] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[2] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[2] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[2] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[2] = 1.25;
                }
            }
            cb2.IsChecked = false;
            if (select != -1)
                calccombo2buff();
            calccombo0buff();
            calccombo1buff();
            calccombo3buff();
            calccombo4buff();
            calccombo5buff();
            calccombo6buff();
            calccombo7buff();
            calccombo8buff();
            clearequip(2);
            lastgunindex[2] = select;
            renewskill();
            calceat();
            equipcb21.Items.Clear();
            equipcb21.IsEnabled = false;
            equipcb21.ToolTip = null;
            equipcb22.Items.Clear();
            equipcb22.IsEnabled = false;
            equipcb22.ToolTip = null;
            equipcb23.Items.Clear();
            equipcb23.IsEnabled = false;
            equipcb23.ToolTip = null;
            loadequipcb(select, Level2.SelectedIndex, 2);
        }
        /// <summary>
        /// 左中格ComboBox改变选中项事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Combo3_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

            int select = Combo3.SelectedIndex;
            if (select == -1)
                return;
            for (int i = 0; i < 9; i++)
            {
                if (getcombogunname(i) != "" && getcombogunname(i) != null)
                    howmany++;
                if (getcombogunname(i) == gun[select].name && getcombogunname(i) != "" && getcombogunname(i) != null && i != 3)
                {
                    switch (i)
                    {
                        case 0:
                            {
                                Combo0.SelectedIndex = GUN_NUMBER;
                                Image0.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb0.Text = "无";
                                Lskilldamage0.Content = 0;
                                Ltime0.Content = 0;
                                Lskillread0.Content = 0;
                                break;
                            }
                        case 1:
                            {
                                Combo1.SelectedIndex = GUN_NUMBER;
                                Image1.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb1.Text = "无";
                                Lskilldamage1.Content = 0;
                                Ltime1.Content = 0;
                                Lskillread1.Content = 0;
                                break;
                            }
                        case 2:
                            {
                                Combo2.SelectedIndex = GUN_NUMBER;
                                Image2.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb2.Text = "无";
                                Lskilldamage2.Content = 0;
                                Ltime2.Content = 0;
                                Lskillread2.Content = 0;
                                break;
                            }
                        case 3:
                            {
                                Combo3.SelectedIndex = GUN_NUMBER;
                                Image3.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb3.Text = "无";
                                Lskilldamage3.Content = 0;
                                Ltime3.Content = 0;
                                Lskillread3.Content = 0;
                                break;
                            }
                        case 4:
                            {
                                Combo4.SelectedIndex = GUN_NUMBER;
                                Image4.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb4.Text = "无";
                                Lskilldamage4.Content = 0;
                                Ltime4.Content = 0;
                                Lskillread4.Content = 0;
                                break;
                            }
                        case 5:
                            {
                                Combo5.SelectedIndex = GUN_NUMBER;
                                Image5.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb5.Text = "无";
                                Lskilldamage5.Content = 0;
                                Ltime5.Content = 0;
                                Lskillread5.Content = 0;
                                break;
                            }
                        case 6:
                            {
                                Combo6.SelectedIndex = GUN_NUMBER;
                                Image6.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb6.Text = "无";
                                Lskilldamage6.Content = 0;
                                Ltime6.Content = 0;
                                Lskillread6.Content = 0;
                                break;
                            }
                        case 7:
                            {
                                Combo7.SelectedIndex = GUN_NUMBER;
                                Image7.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb7.Text = "无";
                                Lskilldamage7.Content = 0;
                                Ltime7.Content = 0;
                                Lskillread7.Content = 0;
                                break;
                            }
                        case 8:
                            {
                                Combo8.SelectedIndex = GUN_NUMBER;
                                Image8.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb8.Text = "无";
                                Lskilldamage8.Content = 0;
                                Ltime8.Content = 0;
                                Lskillread8.Content = 0;
                                break;
                            }
                        default:
                            break;
                    }


                    break;
                }
            }

            if (howmany == 6)
            {
                howmany = 0;
                Combo3.SelectedIndex = GUN_NUMBER;
                return;
            }
            else
                howmany = 0;
            if (select != -1 && select != GUN_NUMBER)
                if (gun[select].name == getcombogunname(0) || gun[select].name == getcombogunname(1) || gun[select].name == getcombogunname(2) || gun[select].name == getcombogunname(4) || gun[select].name == getcombogunname(5) || gun[select].name == getcombogunname(6) || gun[select].name == getcombogunname(7) || gun[select].name == getcombogunname(8))
                {
                    Combo3.SelectedIndex = lastgunindex[3];
                    return;
                }

            if (gun[select].what == 2)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                Combo3.Foreground = br;
            }
            else if (gun[select].what == 3)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                Combo3.Foreground = br;
            }
            else if (gun[select].what == 4)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                Combo3.Foreground = br;
            }
            else if (gun[select].what == 5)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                Combo3.Foreground = br;
            }
            else if (gun[select].what == 6)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                Combo3.Foreground = br;
            }
            int levelselect = Level3.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            multiple[3] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[3] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[3] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[3] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[3] = 1.25;
                }
            }
            cb3.IsChecked = false;
            if (select != -1)
                calccombo3buff();
            calccombo0buff();
            calccombo1buff();
            calccombo2buff();
            calccombo4buff();
            calccombo5buff();
            calccombo6buff();
            calccombo7buff();
            calccombo8buff();
            lastgunindex[3] = select;
            /*
                        cb3.IsChecked = false;
                        if (isnightskill(gun[select].type) && cbIsnight.IsChecked == false)
                            cb3.IsEnabled = false;
                        else
                            cb3.IsEnabled = true;*/
            clearequip(3);
            renewskill();
            calceat();
            equipcb31.Items.Clear();
            equipcb31.IsEnabled = false;
            equipcb31.ToolTip = null;
            equipcb32.Items.Clear();
            equipcb32.IsEnabled = false;
            equipcb32.ToolTip = null;
            equipcb33.Items.Clear();
            equipcb33.IsEnabled = false;
            equipcb33.ToolTip = null;
            loadequipcb(select, Level3.SelectedIndex, 3);
        }

        /// <summary>
        /// 更新技能加成
        /// </summary>
        private void renewskill()
        {
            clearskill();
            calcskill(0, Combo0.SelectedIndex, SkillLevel0.SelectedIndex, cb0.IsChecked == true, Level0.SelectedIndex);
            calcskill(1, Combo1.SelectedIndex, SkillLevel1.SelectedIndex, cb1.IsChecked == true, Level1.SelectedIndex);
            calcskill(2, Combo2.SelectedIndex, SkillLevel2.SelectedIndex, cb2.IsChecked == true, Level2.SelectedIndex);
            calcskill(3, Combo3.SelectedIndex, SkillLevel3.SelectedIndex, cb3.IsChecked == true, Level3.SelectedIndex);
            calcskill(4, Combo4.SelectedIndex, SkillLevel4.SelectedIndex, cb4.IsChecked == true, Level4.SelectedIndex);
            calcskill(5, Combo5.SelectedIndex, SkillLevel5.SelectedIndex, cb5.IsChecked == true, Level5.SelectedIndex);
            calcskill(6, Combo6.SelectedIndex, SkillLevel6.SelectedIndex, cb6.IsChecked == true, Level6.SelectedIndex);
            calcskill(7, Combo7.SelectedIndex, SkillLevel7.SelectedIndex, cb7.IsChecked == true, Level7.SelectedIndex);
            calcskill(8, Combo8.SelectedIndex, SkillLevel8.SelectedIndex, cb8.IsChecked == true, Level8.SelectedIndex);
            calcfairyskill();
            calctalent();
            for (int i = 0; i < 9; i++)
                renewindex(i);
            renewtank();
        }
        /// <summary>
        /// 更新肉度
        /// </summary>
        private void renewtank()
        {
            if (rb0.IsChecked == true)
            {
                calctank(0);
            }
            else if (rb1.IsChecked == true)
            {
                calctank(1);
            }
            else if (rb2.IsChecked == true)
            {
                calctank(2);
            }
            else if (rb3.IsChecked == true)
            {
                calctank(3);
            }
            else if (rb4.IsChecked == true)
            {
                calctank(4);
            }
            else if (rb5.IsChecked == true)
            {
                calctank(5);
            }
            else if (rb6.IsChecked == true)
            {
                calctank(6);
            }
            else if (rb7.IsChecked == true)
            {
                calctank(7);
            }
            else if (rb8.IsChecked == true)
            {
                calctank(8);
            }
            if (rbf0.IsChecked == true)
            {
                calcftank(0);
            }
            else if (rbf1.IsChecked == true)
            {
                calcftank(1);
            }
            else if (rbf2.IsChecked == true)
            {
                calcftank(2);
            }
            else if (rbf3.IsChecked == true)
            {
                calcftank(3);
            }
            else if (rbf4.IsChecked == true)
            {
                calcftank(4);
            }
            else if (rbf5.IsChecked == true)
            {
                calcftank(5);
            }
            else if (rbf6.IsChecked == true)
            {
                calcftank(6);
            }
            else if (rbf7.IsChecked == true)
            {
                calcftank(7);
            }
            else if (rbf8.IsChecked == true)
            {
                calcftank(8);
            }
        }
        /// <summary>
        /// 中格ComboBox改变选中项事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Combo4_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

            int select = Combo4.SelectedIndex;
            if (select == -1)
                return;
            for (int i = 0; i < 9; i++)
            {
                if (getcombogunname(i) != "" && getcombogunname(i) != null)
                    howmany++;
                if (getcombogunname(i) == gun[select].name && getcombogunname(i) != "" && getcombogunname(i) != null && i != 4)
                {
                    switch (i)
                    {
                        case 0:
                            {
                                Combo0.SelectedIndex = GUN_NUMBER;
                                Image0.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb0.Text = "无";
                                Lskilldamage0.Content = 0;
                                Ltime0.Content = 0;
                                Lskillread0.Content = 0;
                                break;
                            }
                        case 1:
                            {
                                Combo1.SelectedIndex = GUN_NUMBER;
                                Image1.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb1.Text = "无";
                                Lskilldamage1.Content = 0;
                                Ltime1.Content = 0;
                                Lskillread1.Content = 0;
                                break;
                            }
                        case 2:
                            {
                                Combo2.SelectedIndex = GUN_NUMBER;
                                Image2.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb2.Text = "无";
                                Lskilldamage2.Content = 0;
                                Ltime2.Content = 0;
                                Lskillread2.Content = 0;
                                break;
                            }
                        case 3:
                            {
                                Combo3.SelectedIndex = GUN_NUMBER;
                                Image3.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb3.Text = "无";
                                Lskilldamage3.Content = 0;
                                Ltime3.Content = 0;
                                Lskillread3.Content = 0;
                                break;
                            }
                        case 4:
                            {
                                Combo4.SelectedIndex = GUN_NUMBER;
                                Image4.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb4.Text = "无";
                                Lskilldamage4.Content = 0;
                                Ltime4.Content = 0;
                                Lskillread4.Content = 0;
                                break;
                            }
                        case 5:
                            {
                                Combo5.SelectedIndex = GUN_NUMBER;
                                Image5.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb5.Text = "无";
                                Lskilldamage5.Content = 0;
                                Ltime5.Content = 0;
                                Lskillread5.Content = 0;
                                break;
                            }
                        case 6:
                            {
                                Combo6.SelectedIndex = GUN_NUMBER;
                                Image6.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb6.Text = "无";
                                Lskilldamage6.Content = 0;
                                Ltime6.Content = 0;
                                Lskillread6.Content = 0;
                                break;
                            }
                        case 7:
                            {
                                Combo7.SelectedIndex = GUN_NUMBER;
                                Image7.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb7.Text = "无";
                                Lskilldamage7.Content = 0;
                                Ltime7.Content = 0;
                                Lskillread7.Content = 0;
                                break;
                            }
                        case 8:
                            {
                                Combo8.SelectedIndex = GUN_NUMBER;
                                Image8.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb8.Text = "无";
                                Lskilldamage8.Content = 0;
                                Ltime8.Content = 0;
                                Lskillread8.Content = 0;
                                break;
                            }
                        default:
                            break;
                    }


                    break;
                }
            }

            if (howmany == 6)
            {
                howmany = 0;
                Combo4.SelectedIndex = GUN_NUMBER;
                return;
            }
            else
                howmany = 0;
            if (select != -1 && select != GUN_NUMBER)
                if (gun[select].name == getcombogunname(0) || gun[select].name == getcombogunname(1) || gun[select].name == getcombogunname(2) || gun[select].name == getcombogunname(3) || gun[select].name == getcombogunname(5) || gun[select].name == getcombogunname(6) || gun[select].name == getcombogunname(7) || gun[select].name == getcombogunname(8))
                {
                    Combo4.SelectedIndex = lastgunindex[4];
                    return;
                }

            if (gun[select].what == 2)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                Combo4.Foreground = br;
            }
            else if (gun[select].what == 3)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                Combo4.Foreground = br;
            }
            else if (gun[select].what == 4)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                Combo4.Foreground = br;
            }
            else if (gun[select].what == 5)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                Combo4.Foreground = br;
            }
            else if (gun[select].what == 6)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                Combo4.Foreground = br;
            }
            int levelselect = Level4.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            multiple[4] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[4] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[4] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[4] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[4] = 1.25;
                }
            }
            cb4.IsChecked = false;
            if (select != -1)
                calccombo4buff();
            calccombo0buff();
            calccombo1buff();
            calccombo2buff();
            calccombo3buff();
            calccombo5buff();
            calccombo6buff();
            calccombo7buff();
            calccombo8buff();

            lastgunindex[4] = select;
            /*        cb4.IsChecked = false;
                    if (isnightskill(gun[select].type) && cbIsnight.IsChecked == false)
                        cb4.IsEnabled = false;
                    else
                        cb4.IsEnabled = true;*/
            clearequip(4);
            renewskill();
            calceat();
            equipcb41.Items.Clear();
            equipcb41.IsEnabled = false;
            equipcb41.ToolTip = null;
            equipcb42.Items.Clear();
            equipcb42.IsEnabled = false;
            equipcb42.ToolTip = null;
            equipcb43.Items.Clear();
            equipcb43.IsEnabled = false;
            equipcb43.ToolTip = null;
            loadequipcb(select, Level4.SelectedIndex, 4);
        }
        /// <summary>
        /// 右中格ComboBox改变选中项事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Combo5_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

            int select = Combo5.SelectedIndex;
            if (select == -1)
                return;
            for (int i = 0; i < 9; i++)
            {
                if (getcombogunname(i) != "" && getcombogunname(i) != null)
                    howmany++;
                if (getcombogunname(i) == gun[select].name && getcombogunname(i) != "" && getcombogunname(i) != null && i != 5)
                {
                    switch (i)
                    {
                        case 0:
                            {
                                Combo0.SelectedIndex = GUN_NUMBER;
                                Image0.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb0.Text = "无";
                                Lskilldamage0.Content = 0;
                                Ltime0.Content = 0;
                                Lskillread0.Content = 0;
                                break;
                            }
                        case 1:
                            {
                                Combo1.SelectedIndex = GUN_NUMBER;
                                Image1.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb1.Text = "无";
                                Lskilldamage1.Content = 0;
                                Ltime1.Content = 0;
                                Lskillread1.Content = 0;
                                break;
                            }
                        case 2:
                            {
                                Combo2.SelectedIndex = GUN_NUMBER;
                                Image2.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb2.Text = "无";
                                Lskilldamage2.Content = 0;
                                Ltime2.Content = 0;
                                Lskillread2.Content = 0;
                                break;
                            }
                        case 3:
                            {
                                Combo3.SelectedIndex = GUN_NUMBER;
                                Image3.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb3.Text = "无";
                                Lskilldamage3.Content = 0;
                                Ltime3.Content = 0;
                                Lskillread3.Content = 0;
                                break;
                            }
                        case 4:
                            {
                                Combo4.SelectedIndex = GUN_NUMBER;
                                Image4.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb4.Text = "无";
                                Lskilldamage4.Content = 0;
                                Ltime4.Content = 0;
                                Lskillread4.Content = 0;
                                break;
                            }
                        case 5:
                            {
                                Combo5.SelectedIndex = GUN_NUMBER;
                                Image5.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb5.Text = "无";
                                Lskilldamage5.Content = 0;
                                Ltime5.Content = 0;
                                Lskillread5.Content = 0;
                                break;
                            }
                        case 6:
                            {
                                Combo6.SelectedIndex = GUN_NUMBER;
                                Image6.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb6.Text = "无";
                                Lskilldamage6.Content = 0;
                                Ltime6.Content = 0;
                                Lskillread6.Content = 0;
                                break;
                            }
                        case 7:
                            {
                                Combo7.SelectedIndex = GUN_NUMBER;
                                Image7.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb7.Text = "无";
                                Lskilldamage7.Content = 0;
                                Ltime7.Content = 0;
                                Lskillread7.Content = 0;
                                break;
                            }
                        case 8:
                            {
                                Combo8.SelectedIndex = GUN_NUMBER;
                                Image8.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb8.Text = "无";
                                Lskilldamage8.Content = 0;
                                Ltime8.Content = 0;
                                Lskillread8.Content = 0;
                                break;
                            }
                        default:
                            break;
                    }
                    break;
                }
            }

            if (howmany == 6)
            {
                howmany = 0;
                Combo5.SelectedIndex = GUN_NUMBER;
                return;
            }
            else
                howmany = 0;
            if (select != -1 && select != GUN_NUMBER)
                if (gun[select].name == getcombogunname(0) || gun[select].name == getcombogunname(1) || gun[select].name == getcombogunname(2) || gun[select].name == getcombogunname(3) || gun[select].name == getcombogunname(4) || gun[select].name == getcombogunname(6) || gun[select].name == getcombogunname(7) || gun[select].name == getcombogunname(8))
                {
                    Combo5.SelectedIndex = lastgunindex[5];
                    return;
                }

            if (gun[select].what == 2)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                Combo5.Foreground = br;
            }
            else if (gun[select].what == 3)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                Combo5.Foreground = br;
            }
            else if (gun[select].what == 4)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                Combo5.Foreground = br;
            }
            else if (gun[select].what == 5)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                Combo5.Foreground = br;
            }
            else if (gun[select].what == 6)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                Combo5.Foreground = br;
            }
            int levelselect = Level5.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            multiple[5] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[5] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[5] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[5] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[5] = 1.25;
                }
            }
            cb5.IsChecked = false;
            if (select != -1)
                calccombo5buff();
            calccombo0buff();
            calccombo1buff();
            calccombo2buff();
            calccombo3buff();
            calccombo4buff();
            calccombo6buff();
            calccombo7buff();
            calccombo8buff();

            lastgunindex[5] = select;
            /*         cb5.IsChecked = false;
                     if (isnightskill(gun[select].type) && cbIsnight.IsChecked == false)
                         cb5.IsEnabled = false;
                     else
                         cb5.IsEnabled = true;*/
            clearequip(5);
            renewskill();
            calceat();
            equipcb51.Items.Clear();
            equipcb51.IsEnabled = false;
            equipcb51.ToolTip = null;
            equipcb52.Items.Clear();
            equipcb52.IsEnabled = false;
            equipcb52.ToolTip = null;
            equipcb53.Items.Clear();
            equipcb53.IsEnabled = false;
            equipcb53.ToolTip = null;
            loadequipcb(select, Level5.SelectedIndex, 5);
        }
        /// <summary>
        /// 左下格ComboBox改变选中项事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Combo6_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

            int select = Combo6.SelectedIndex;
            if (select == -1)
                return;
            for (int i = 0; i < 9; i++)
            {
                if (getcombogunname(i) != "" && getcombogunname(i) != null)
                    howmany++;
                if (getcombogunname(i) == gun[select].name && getcombogunname(i) != "" && getcombogunname(i) != null && i != 6)
                {
                    switch (i)
                    {
                        case 0:
                            {
                                Combo0.SelectedIndex = GUN_NUMBER;
                                Image0.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb0.Text = "无";
                                Lskilldamage0.Content = 0;
                                Ltime0.Content = 0;
                                Lskillread0.Content = 0;
                                break;
                            }
                        case 1:
                            {
                                Combo1.SelectedIndex = GUN_NUMBER;
                                Image1.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb1.Text = "无";
                                Lskilldamage1.Content = 0;
                                Ltime1.Content = 0;
                                Lskillread1.Content = 0;
                                break;
                            }
                        case 2:
                            {
                                Combo2.SelectedIndex = GUN_NUMBER;
                                Image2.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb2.Text = "无";
                                Lskilldamage2.Content = 0;
                                Ltime2.Content = 0;
                                Lskillread2.Content = 0;
                                break;
                            }
                        case 3:
                            {
                                Combo3.SelectedIndex = GUN_NUMBER;
                                Image3.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb3.Text = "无";
                                Lskilldamage3.Content = 0;
                                Ltime3.Content = 0;
                                Lskillread3.Content = 0;
                                break;
                            }
                        case 4:
                            {
                                Combo4.SelectedIndex = GUN_NUMBER;
                                Image4.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb4.Text = "无";
                                Lskilldamage4.Content = 0;
                                Ltime4.Content = 0;
                                Lskillread4.Content = 0;
                                break;
                            }
                        case 5:
                            {
                                Combo5.SelectedIndex = GUN_NUMBER;
                                Image5.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb5.Text = "无";
                                Lskilldamage5.Content = 0;
                                Ltime5.Content = 0;
                                Lskillread5.Content = 0;
                                break;
                            }
                        case 6:
                            {
                                Combo6.SelectedIndex = GUN_NUMBER;
                                Image6.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb6.Text = "无";
                                Lskilldamage6.Content = 0;
                                Ltime6.Content = 0;
                                Lskillread6.Content = 0;
                                break;
                            }
                        case 7:
                            {
                                Combo7.SelectedIndex = GUN_NUMBER;
                                Image7.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb7.Text = "无";
                                Lskilldamage7.Content = 0;
                                Ltime7.Content = 0;
                                Lskillread7.Content = 0;
                                break;
                            }
                        case 8:
                            {
                                Combo8.SelectedIndex = GUN_NUMBER;
                                Image8.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb8.Text = "无";
                                Lskilldamage8.Content = 0;
                                Ltime8.Content = 0;
                                Lskillread8.Content = 0;
                                break;
                            }
                        default:
                            break;
                    }


                    break;
                }
            }

            if (howmany == 6)
            {
                howmany = 0;
                Combo6.SelectedIndex = GUN_NUMBER;
                return;
            }
            else
                howmany = 0;
            if (select != -1 && select != GUN_NUMBER)
                if (gun[select].name == getcombogunname(0) || gun[select].name == getcombogunname(1) || gun[select].name == getcombogunname(2) || gun[select].name == getcombogunname(3) || gun[select].name == getcombogunname(4) || gun[select].name == getcombogunname(5) || gun[select].name == getcombogunname(7) || gun[select].name == getcombogunname(8))
                {
                    Combo6.SelectedIndex = lastgunindex[6];
                    return;
                }

            if (gun[select].what == 2)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                Combo6.Foreground = br;
            }
            else if (gun[select].what == 3)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                Combo6.Foreground = br;
            }
            else if (gun[select].what == 4)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                Combo6.Foreground = br;
            }
            else if (gun[select].what == 5)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                Combo6.Foreground = br;
            }
            else if (gun[select].what == 6)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                Combo6.Foreground = br;
            }
            int levelselect = Level6.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            multiple[6] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[6] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[6] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[6] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[6] = 1.25;
                }
            }
            cb6.IsChecked = false;
            if (select != -1)
                calccombo6buff();
            calccombo0buff();
            calccombo1buff();
            calccombo2buff();
            calccombo3buff();
            calccombo4buff();
            calccombo5buff();
            calccombo7buff();
            calccombo8buff();
            lastgunindex[6] = select;
            /*        cb6.IsChecked = false;
                    if (isnightskill(gun[select].type) && cbIsnight.IsChecked == false)
                        cb6.IsEnabled = false;
                    else
                        cb6.IsEnabled = true;*/
            clearequip(6);
            renewskill();
            calceat();
            equipcb61.Items.Clear();
            equipcb61.IsEnabled = false;
            equipcb61.ToolTip = null;
            equipcb62.Items.Clear();
            equipcb62.IsEnabled = false;
            equipcb62.ToolTip = null;
            equipcb63.Items.Clear();
            equipcb63.IsEnabled = false;
            equipcb63.ToolTip = null;
            loadequipcb(select, Level6.SelectedIndex, 6);
        }
        /// <summary>
        /// 下格ComboBox改变选中项事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Combo7_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

            int select = Combo7.SelectedIndex;
            if (select == -1)
                return;
            for (int i = 0; i < 9; i++)
            {
                if (getcombogunname(i) != "" && getcombogunname(i) != null)
                    howmany++;
                if (getcombogunname(i) == gun[select].name && getcombogunname(i) != "" && getcombogunname(i) != null && i != 7)
                {
                    switch (i)
                    {
                        case 0:
                            {
                                Combo0.SelectedIndex = GUN_NUMBER;
                                Image0.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb0.Text = "无";
                                Lskilldamage0.Content = 0;
                                Ltime0.Content = 0;
                                Lskillread0.Content = 0;
                                break;
                            }
                        case 1:
                            {
                                Combo1.SelectedIndex = GUN_NUMBER;
                                Image1.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb1.Text = "无";
                                Lskilldamage1.Content = 0;
                                Ltime1.Content = 0;
                                Lskillread1.Content = 0;
                                break;
                            }
                        case 2:
                            {
                                Combo2.SelectedIndex = GUN_NUMBER;
                                Image2.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb2.Text = "无";
                                Lskilldamage2.Content = 0;
                                Ltime2.Content = 0;
                                Lskillread2.Content = 0;
                                break;
                            }
                        case 3:
                            {
                                Combo3.SelectedIndex = GUN_NUMBER;
                                Image3.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb3.Text = "无";
                                Lskilldamage3.Content = 0;
                                Ltime3.Content = 0;
                                Lskillread3.Content = 0;
                                break;
                            }
                        case 4:
                            {
                                Combo4.SelectedIndex = GUN_NUMBER;
                                Image4.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb4.Text = "无";
                                Lskilldamage4.Content = 0;
                                Ltime4.Content = 0;
                                Lskillread4.Content = 0;
                                break;
                            }
                        case 5:
                            {
                                Combo5.SelectedIndex = GUN_NUMBER;
                                Image5.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb5.Text = "无";
                                Lskilldamage5.Content = 0;
                                Ltime5.Content = 0;
                                Lskillread5.Content = 0;
                                break;
                            }
                        case 6:
                            {
                                Combo6.SelectedIndex = GUN_NUMBER;
                                Image6.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb6.Text = "无";
                                Lskilldamage6.Content = 0;
                                Ltime6.Content = 0;
                                Lskillread6.Content = 0;
                                break;
                            }
                        case 7:
                            {
                                Combo7.SelectedIndex = GUN_NUMBER;
                                Image7.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb7.Text = "无";
                                Lskilldamage7.Content = 0;
                                Ltime7.Content = 0;
                                Lskillread7.Content = 0;
                                break;
                            }
                        case 8:
                            {
                                Combo8.SelectedIndex = GUN_NUMBER;
                                Image8.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb8.Text = "无";
                                Lskilldamage8.Content = 0;
                                Ltime8.Content = 0;
                                Lskillread8.Content = 0;
                                break;
                            }
                        default:
                            break;
                    }
                    break;
                }
            }

            if (howmany == 6)
            {
                howmany = 0;
                Combo7.SelectedIndex = GUN_NUMBER;
                return;
            }
            else
                howmany = 0;
            if (select != -1 && select != GUN_NUMBER)
                if (gun[select].name == getcombogunname(0) || gun[select].name == getcombogunname(1) || gun[select].name == getcombogunname(2) || gun[select].name == getcombogunname(3) || gun[select].name == getcombogunname(4) || gun[select].name == getcombogunname(5) || gun[select].name == getcombogunname(6) || gun[select].name == getcombogunname(8))
                {
                    Combo7.SelectedIndex = lastgunindex[7];
                    return;
                }

            if (gun[select].what == 2)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                Combo7.Foreground = br;
            }
            else if (gun[select].what == 3)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                Combo7.Foreground = br;
            }
            else if (gun[select].what == 4)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                Combo7.Foreground = br;
            }
            else if (gun[select].what == 5)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                Combo7.Foreground = br;
            }
            else if (gun[select].what == 6)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                Combo7.Foreground = br;
            }
            int levelselect = Level7.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            multiple[7] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[7] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[7] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[7] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[7] = 1.25;
                }
            }
            cb7.IsChecked = false;
            if (select != -1)
                calccombo7buff();
            calccombo0buff();
            calccombo1buff();
            calccombo2buff();
            calccombo3buff();
            calccombo4buff();
            calccombo5buff();
            calccombo6buff();
            calccombo8buff();

            lastgunindex[7] = select;
            /*     cb7.IsChecked = false;
                 if (isnightskill(gun[select].type) && cbIsnight.IsChecked == false)
                     cb7.IsEnabled = false;
                 else
                     cb7.IsEnabled = true;*/
            clearequip(7);
            renewskill();

            calceat();
            equipcb71.Items.Clear();
            equipcb71.IsEnabled = false;
            equipcb71.ToolTip = null;
            equipcb72.Items.Clear();
            equipcb72.IsEnabled = false;
            equipcb72.ToolTip = null;
            equipcb73.Items.Clear();
            equipcb73.IsEnabled = false;
            equipcb73.ToolTip = null;
            loadequipcb(select, Level7.SelectedIndex, 7);
        }
        /// <summary>
        /// 右下格ComboBox改变选中项事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Combo8_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

            int select = Combo8.SelectedIndex;
            if (select == -1)
                return;
            for (int i = 0; i < 9; i++)
            {
                if (getcombogunname(i) != "" && getcombogunname(i) != null)
                    howmany++;
                if (getcombogunname(i) == gun[select].name && getcombogunname(i) != "" && getcombogunname(i) != null && i != 8)
                {
                    switch (i)
                    {
                        case 0:
                            {
                                Combo0.SelectedIndex = GUN_NUMBER;
                                Image0.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb0.Text = "无";
                                Lskilldamage0.Content = 0;
                                Ltime0.Content = 0;
                                Lskillread0.Content = 0;
                                break;
                            }
                        case 1:
                            {
                                Combo1.SelectedIndex = GUN_NUMBER;
                                Image1.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb1.Text = "无";
                                Lskilldamage1.Content = 0;
                                Ltime1.Content = 0;
                                Lskillread1.Content = 0;
                                break;
                            }
                        case 2:
                            {
                                Combo2.SelectedIndex = GUN_NUMBER;
                                Image2.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb2.Text = "无";
                                Lskilldamage2.Content = 0;
                                Ltime2.Content = 0;
                                Lskillread2.Content = 0;
                                break;
                            }
                        case 3:
                            {
                                Combo3.SelectedIndex = GUN_NUMBER;
                                Image3.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb3.Text = "无";
                                Lskilldamage3.Content = 0;
                                Ltime3.Content = 0;
                                Lskillread3.Content = 0;
                                break;
                            }
                        case 4:
                            {
                                Combo4.SelectedIndex = GUN_NUMBER;
                                Image4.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb4.Text = "无";
                                Lskilldamage4.Content = 0;
                                Ltime4.Content = 0;
                                Lskillread4.Content = 0;
                                break;
                            }
                        case 5:
                            {
                                Combo5.SelectedIndex = GUN_NUMBER;
                                Image5.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb5.Text = "无";
                                Lskilldamage5.Content = 0;
                                Ltime5.Content = 0;
                                Lskillread5.Content = 0;
                                break;
                            }
                        case 6:
                            {
                                Combo6.SelectedIndex = GUN_NUMBER;
                                Image6.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb6.Text = "无";
                                Lskilldamage6.Content = 0;
                                Ltime6.Content = 0;
                                Lskillread6.Content = 0;
                                break;
                            }
                        case 7:
                            {
                                Combo7.SelectedIndex = GUN_NUMBER;
                                Image7.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb7.Text = "无";
                                Lskilldamage7.Content = 0;
                                Ltime7.Content = 0;
                                Lskillread7.Content = 0;
                                break;
                            }
                        case 8:
                            {
                                Combo8.SelectedIndex = GUN_NUMBER;
                                Image8.Source = new BitmapImage(new Uri(@"", UriKind.Relative));
                                tb8.Text = "无";
                                Lskilldamage8.Content = 0;
                                Ltime8.Content = 0;
                                Lskillread8.Content = 0;
                                break;
                            }
                        default:
                            break;
                    }


                    break;
                }
            }

            if (howmany == 6)
            {
                howmany = 0;
                Combo8.SelectedIndex = GUN_NUMBER;
                return;
            }
            else
                howmany = 0;
            if (select != -1 && select != GUN_NUMBER)
                if (gun[select].name == getcombogunname(0) || gun[select].name == getcombogunname(1) || gun[select].name == getcombogunname(2) || gun[select].name == getcombogunname(3) || gun[select].name == getcombogunname(4) || gun[select].name == getcombogunname(5) || gun[select].name == getcombogunname(6) || gun[select].name == getcombogunname(7))
                {
                    Combo8.SelectedIndex = lastgunindex[8];
                    return;
                }

            if (gun[select].what == 2)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                Combo8.Foreground = br;
            }
            else if (gun[select].what == 3)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("darkviolet"));
                Combo8.Foreground = br;
            }
            else if (gun[select].what == 4)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                Combo8.Foreground = br;
            }
            else if (gun[select].what == 5)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                Combo8.Foreground = br;
            }
            else if (gun[select].what == 6)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("red"));
                Combo8.Foreground = br;
            }
            int levelselect = Level0.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            multiple[8] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[8] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[8] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[8] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[8] = 1.25;
                }
            }
            cb8.IsChecked = false;
            if (select != -1)
                calccombo8buff();
            calccombo0buff();
            calccombo1buff();
            calccombo2buff();
            calccombo3buff();
            calccombo4buff();
            calccombo5buff();
            calccombo6buff();
            calccombo7buff();

            lastgunindex[8] = select;
            /*         cb8.IsChecked = false;
                     if (isnightskill(gun[select].type) && cbIsnight.IsChecked == false)
                         cb8.IsEnabled = false;
                     else
                         cb8.IsEnabled = true;*/
            clearequip(8);
            renewskill();

            calceat();
            equipcb81.Items.Clear();
            equipcb81.IsEnabled = false;
            equipcb81.ToolTip = null;
            equipcb82.Items.Clear();
            equipcb82.IsEnabled = false;
            equipcb82.ToolTip = null;
            equipcb83.Items.Clear();
            equipcb83.IsEnabled = false;
            equipcb83.ToolTip = null;
            loadequipcb(select, Level8.SelectedIndex, 8);
        }
        /// <summary>
        /// 判断string是否为数字
        /// </summary>
        /// <param name="strNumber">string</param>
        /// <returns></returns>
        public bool IsNumber(String strNumber)
        {
            Regex objNotNumberPattern = new Regex("[^0-9.-]");

            Regex objTwoDotPattern = new Regex("[0-9]*[.][0-9]*[.][0-9]*");

            Regex objTwoMinusPattern = new Regex("[0-9]*[-][0-9]*[-][0-9]*");

            String strValidRealPattern = "^([-]|[.]|[-.]|[0-9])[0-9]*[.]*[0-9]+$";

            String strValidIntegerPattern = "^([-]|[0-9])[0-9]*$";

            Regex objNumberPattern = new Regex("(" + strValidRealPattern + ")|(" + strValidIntegerPattern + ")");

            return !objNotNumberPattern.IsMatch(strNumber) &&

                   !objTwoDotPattern.IsMatch(strNumber) &&

                   !objTwoMinusPattern.IsMatch(strNumber) &&

                   objNumberPattern.IsMatch(strNumber);
        }
        /// <summary>
        /// 回避输入框数值改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void TextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (!IsNumber(enemydodge.Text))
                enemydodge.Text = "0";
            int select = Combo0.SelectedIndex;
            if (select != -1)
                renewindex(0);
            select = Combo1.SelectedIndex;
            if (select != -1)
                renewindex(1);
            select = Combo2.SelectedIndex;
            if (select != -1)
                renewindex(2);
            select = Combo3.SelectedIndex;
            if (select != -1)
                renewindex(3);
            select = Combo4.SelectedIndex;
            if (select != -1)
                renewindex(4);
            select = Combo5.SelectedIndex;
            if (select != -1)
                renewindex(5);
            select = Combo6.SelectedIndex;
            if (select != -1)
                renewindex(6);
            select = Combo7.SelectedIndex;
            if (select != -1)
                renewindex(7);
            select = Combo8.SelectedIndex;
            if (select != -1)
                renewindex(8);
        }

        /// <summary>
        /// 计算主T肉度
        /// </summary>
        /// <param name="combo">哪一格</param>
        void calctank(int combo)
        {
            nowhit.Content = (Double.Parse(enemyhit.Text) * skilldownhit).ToString("0");
            nowdamage.Content = (Double.Parse(enemydamage.Text) * skilldowndamage).ToString("0");
            double ebreakarmor = Double.Parse(enemybreakarmor.Text);
            double enemycalcdamage = Double.Parse(nowdamage.Content.ToString());
            switch (combo)
            {
                case 0:
                    {
                        if (Combo0.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor0.Content.ToString()))));
                                tank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp0.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge0.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString())*fairydowndamage).ToString("0.00");
                            }
                            else
                                tank.Content = 0;
                        }
                        else
                            tank.Content = 0;
                        break;
                    }
                case 1:
                    {
                        if (Combo1.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor1.Content.ToString()))));
                                tank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp1.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge1.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                tank.Content = 0;
                        }
                        else
                            tank.Content = 0;
                        break;
                    }
                case 2:
                    {
                        if (Combo2.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor2.Content.ToString()))));
                                tank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp2.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge2.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                tank.Content = 0;
                        }
                        else
                            tank.Content = 0;
                        break;
                    }
                case 3:
                    {
                        if (Combo3.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor3.Content.ToString()))));
                                tank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp3.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge3.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                tank.Content = 0;
                        }
                        else
                            tank.Content = 0;
                        break;
                    }
                case 4:
                    {
                        if (Combo4.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor4.Content.ToString()))));
                                tank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp4.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge4.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                tank.Content = 0;
                        }
                        else
                            tank.Content = 0;
                        break;
                    }
                case 5:
                    {
                        if (Combo5.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor5.Content.ToString()))));
                                tank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp5.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge5.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                tank.Content = 0;
                        }
                        else
                            tank.Content = 0;
                        break;
                    }
                case 6:
                    {
                        if (Combo6.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor6.Content.ToString()))));
                                tank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp6.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge6.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                tank.Content = 0;
                        }
                        else
                            tank.Content = 0;
                        break;
                    }
                case 7:
                    {
                        if (Combo7.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor7.Content.ToString()))));
                                tank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp7.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge7.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                tank.Content = 0;
                        }
                        else
                            tank.Content = 0;
                        break;
                    }
                case 8:
                    {
                        if (Combo8.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor8.Content.ToString()))));
                                tank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp8.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge8.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                tank.Content = 0;
                        }
                        else
                            tank.Content = 0;
                        break;
                    }
                default:
                    break;

            }
        }
        /// <summary>
        /// 计算副T肉度
        /// </summary>
        /// <param name="combo">哪一格</param>
        void calcftank(int combo)
        {
            nowhit.Content = (Double.Parse(enemyhit.Text) * skilldownhit).ToString("0");
            nowdamage.Content = (Double.Parse(enemydamage.Text) * skilldowndamage).ToString("0");
            double ebreakarmor = Double.Parse(enemybreakarmor.Text);
            double enemycalcdamage = Double.Parse(nowdamage.Content.ToString());
            switch (combo)
            {
                case 0:
                    {
                        if (Combo0.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor0.Content.ToString()))));
                                ftank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp0.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge0.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                ftank.Content = 0;
                        }
                        else
                            ftank.Content = 0;
                        break;
                    }
                case 1:
                    {
                        if (Combo1.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor1.Content.ToString()))));
                                ftank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp1.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge1.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                ftank.Content = 0;
                        }
                        else
                            ftank.Content = 0;
                        break;
                    }
                case 2:
                    {
                        if (Combo2.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor2.Content.ToString()))));
                                ftank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp2.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge2.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                ftank.Content = 0;
                        }
                        else
                            ftank.Content = 0;
                        break;
                    }
                case 3:
                    {
                        if (Combo3.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor3.Content.ToString()))));
                                ftank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp3.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge3.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                ftank.Content = 0;
                        }
                        else
                            ftank.Content = 0;
                        break;
                    }
                case 4:
                    {
                        if (Combo4.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor4.Content.ToString()))));
                                ftank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp4.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge4.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                ftank.Content = 0;
                        }
                        else
                            ftank.Content = 0;
                        break;
                    }
                case 5:
                    {
                        if (Combo5.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor5.Content.ToString()))));
                                ftank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp5.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge5.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                ftank.Content = 0;
                        }
                        else
                            ftank.Content = 0;
                        break;
                    }
                case 6:
                    {
                        if (Combo6.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor6.Content.ToString()))));
                                ftank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp6.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge6.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                ftank.Content = 0;
                        }
                        else
                            ftank.Content = 0;
                        break;
                    }
                case 7:
                    {
                        if (Combo7.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor7.Content.ToString()))));
                                ftank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp7.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge7.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                ftank.Content = 0;
                        }
                        else
                            ftank.Content = 0;
                        break;
                    }
                case 8:
                    {
                        if (Combo8.SelectedIndex != -1)
                        {
                            if (Double.Parse(nowhit.Content.ToString()) != 0 && enemycalcdamage != 0)
                            {
                                enemycalcdamage = Double.Parse(floatdamage(enemycalcdamage, 1, 0, 1, Math.Min(2, ebreakarmor - Double.Parse(Larmor8.Content.ToString()))));
                                ftank.Content = (Double.Parse((Math.Ceiling(Double.Parse(Lhp8.Content.ToString() + shield) / enemycalcdamage) / (1 / (1 + Double.Parse(Ldodge8.Content.ToString()) / Double.Parse(nowhit.Content.ToString())))).ToString()) * fairydowndamage).ToString("0.00");
                            }
                            else
                                ftank.Content = 0;
                        }
                        else
                            ftank.Content = 0;
                        break;
                    }
                default:
                    break;

            }
        }
        /// <summary>
        /// 命中输入框数值改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void TextBox2_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (!IsNumber(enemyhit.Text))
                enemyhit.Text = "0";
            renewtank();
        }
        /// <summary>
        /// 选中左上格主T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rb0_Checked(object sender, RoutedEventArgs e)
        {
            calctank(0);
        }
        /// <summary>
        /// 选中上格主T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rb1_Checked(object sender, RoutedEventArgs e)
        {
            calctank(1);
        }
        /// <summary>
        /// 选中右上格主T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rb2_Checked(object sender, RoutedEventArgs e)
        {
            calctank(2);
        }
        /// <summary>
        /// 选中左中格主T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rb3_Checked(object sender, RoutedEventArgs e)
        {
            calctank(3);
        }
        /// <summary>
        /// 选中中格主T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rb4_Checked(object sender, RoutedEventArgs e)
        {
            calctank(4);
        }
        /// <summary>
        /// 选中右中格主T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rb5_Checked(object sender, RoutedEventArgs e)
        {
            calctank(5);
        }
        /// <summary>
        /// 选中左下格主T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rb6_Checked(object sender, RoutedEventArgs e)
        {
            calctank(6);
        }
        /// <summary>
        /// 选中下格主T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rb7_Checked(object sender, RoutedEventArgs e)
        {
            calctank(7);
        }
        /// <summary>
        /// 选中右下格主T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rb8_Checked(object sender, RoutedEventArgs e)
        {
            calctank(8);
        }
        /// <summary>
        /// 点击重置按钮事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void reinit_Click(object sender, RoutedEventArgs e)
        {
            //bignews.Visibility = Visibility.Visible;
            for (int i = 0; i < 9; i++)
            {
                gg[i] = new GunGrid();
                gg[i].critup = 1.00;
                gg[i].damageup = 1.00;
                gg[i].dodgeup = 1.00;
                gg[i].hitup = 1.00;
                gg[i].shotspeedup = 1.00;
                gg[i].armorup = 1.00;
                lastgunindex[i] = -1;
                gg[i].rateup = 0;
                clearequip(i);
                merry[i] = 1;
            }
            for (int i = 0; i < FAIRY_NUMBER; i++)
            {
                fairy[i].powbuff = 1; fairy[i].armorbuff = 1; fairy[i].dodgebuff = 1; fairy[i].hitbuff = 1; fairy[i].critharmbuff = 1;
            }
            howmany = 0;

            Combo0.SelectedIndex = GUN_NUMBER;
            renewindex(0);
            Combo1.SelectedIndex = GUN_NUMBER;
            renewindex(1);
            Combo2.SelectedIndex = GUN_NUMBER;
            renewindex(2);
            Combo3.SelectedIndex = GUN_NUMBER;
            renewindex(3);
            Combo4.SelectedIndex = GUN_NUMBER;
            renewindex(4);
            Combo5.SelectedIndex = GUN_NUMBER;
            renewindex(5);
            Combo6.SelectedIndex = GUN_NUMBER;
            renewindex(6);
            Combo7.SelectedIndex = GUN_NUMBER;
            renewindex(7);
            Combo8.SelectedIndex = GUN_NUMBER;
            renewindex(8);

            rb0.IsChecked = false;
            rb1.IsChecked = false;
            rb2.IsChecked = false;
            rb3.IsChecked = false;
            rb4.IsChecked = false;
            rb5.IsChecked = false;
            rb6.IsChecked = false;
            rb7.IsChecked = false;
            rb8.IsChecked = false;

            tank.Content = 0;
            enemydodge.Text = "10";
            enemyhit.Text = "20";
            enemydamage.Text = "1";

            rbf0.IsChecked = false;
            rbf1.IsChecked = false;
            rbf2.IsChecked = false;
            rbf3.IsChecked = false;
            rbf4.IsChecked = false;
            rbf5.IsChecked = false;
            rbf6.IsChecked = false;
            rbf7.IsChecked = false;
            rbf8.IsChecked = false;

            ftank.Content = 0;

            cb0.IsChecked = false;
            cb1.IsChecked = false;
            cb2.IsChecked = false;
            cb3.IsChecked = false;
            cb4.IsChecked = false;
            cb5.IsChecked = false;
            cb6.IsChecked = false;
            cb7.IsChecked = false;
            cb8.IsChecked = false;

            Lbreakarmor0.Content = equipbreakarmor[0];
            Lbreakarmor1.Content = equipbreakarmor[1];
            Lbreakarmor2.Content = equipbreakarmor[2];
            Lbreakarmor3.Content = equipbreakarmor[3];
            Lbreakarmor4.Content = equipbreakarmor[4];
            Lbreakarmor5.Content = equipbreakarmor[5];
            Lbreakarmor6.Content = equipbreakarmor[6];
            Lbreakarmor7.Content = equipbreakarmor[7];
            Lbreakarmor8.Content = equipbreakarmor[8];

            Level0.SelectedIndex = 99;
            Level1.SelectedIndex = 99;
            Level2.SelectedIndex = 99;
            Level3.SelectedIndex = 99;
            Level4.SelectedIndex = 99;
            Level5.SelectedIndex = 99;
            Level6.SelectedIndex = 99;
            Level7.SelectedIndex = 99;
            Level8.SelectedIndex = 99;
            SkillLevel0.SelectedIndex = 9;
            SkillLevel1.SelectedIndex = 9;
            SkillLevel2.SelectedIndex = 9;
            SkillLevel3.SelectedIndex = 9;
            SkillLevel4.SelectedIndex = 9;
            SkillLevel5.SelectedIndex = 9;
            SkillLevel6.SelectedIndex = 9;
            SkillLevel7.SelectedIndex = 9;
            SkillLevel8.SelectedIndex = 9;

            equiptb011.IsEnabled = false;
            equiptb012.IsEnabled = false;
            equiptb013.IsEnabled = false;
            equiptb021.IsEnabled = false;
            equiptb022.IsEnabled = false;
            equiptb023.IsEnabled = false;
            equiptb031.IsEnabled = false;
            equiptb032.IsEnabled = false;
            equiptb033.IsEnabled = false;
            equiptb111.IsEnabled = false;
            equiptb112.IsEnabled = false;
            equiptb113.IsEnabled = false;
            equiptb121.IsEnabled = false;
            equiptb122.IsEnabled = false;
            equiptb123.IsEnabled = false;
            equiptb131.IsEnabled = false;
            equiptb132.IsEnabled = false;
            equiptb133.IsEnabled = false;
            equiptb211.IsEnabled = false;
            equiptb212.IsEnabled = false;
            equiptb213.IsEnabled = false;
            equiptb221.IsEnabled = false;
            equiptb222.IsEnabled = false;
            equiptb223.IsEnabled = false;
            equiptb231.IsEnabled = false;
            equiptb232.IsEnabled = false;
            equiptb233.IsEnabled = false;
            equiptb311.IsEnabled = false;
            equiptb312.IsEnabled = false;
            equiptb313.IsEnabled = false;
            equiptb321.IsEnabled = false;
            equiptb322.IsEnabled = false;
            equiptb323.IsEnabled = false;
            equiptb331.IsEnabled = false;
            equiptb332.IsEnabled = false;
            equiptb333.IsEnabled = false;
            equiptb411.IsEnabled = false;
            equiptb412.IsEnabled = false;
            equiptb413.IsEnabled = false;
            equiptb421.IsEnabled = false;
            equiptb422.IsEnabled = false;
            equiptb423.IsEnabled = false;
            equiptb431.IsEnabled = false;
            equiptb432.IsEnabled = false;
            equiptb433.IsEnabled = false;
            equiptb511.IsEnabled = false;
            equiptb512.IsEnabled = false;
            equiptb513.IsEnabled = false;
            equiptb521.IsEnabled = false;
            equiptb522.IsEnabled = false;
            equiptb523.IsEnabled = false;
            equiptb531.IsEnabled = false;
            equiptb532.IsEnabled = false;
            equiptb533.IsEnabled = false;
            equiptb611.IsEnabled = false;
            equiptb612.IsEnabled = false;
            equiptb613.IsEnabled = false;
            equiptb621.IsEnabled = false;
            equiptb622.IsEnabled = false;
            equiptb623.IsEnabled = false;
            equiptb631.IsEnabled = false;
            equiptb632.IsEnabled = false;
            equiptb633.IsEnabled = false;
            equiptb711.IsEnabled = false;
            equiptb712.IsEnabled = false;
            equiptb713.IsEnabled = false;
            equiptb721.IsEnabled = false;
            equiptb722.IsEnabled = false;
            equiptb723.IsEnabled = false;
            equiptb731.IsEnabled = false;
            equiptb732.IsEnabled = false;
            equiptb733.IsEnabled = false;
            equiptb811.IsEnabled = false;
            equiptb812.IsEnabled = false;
            equiptb813.IsEnabled = false;
            equiptb821.IsEnabled = false;
            equiptb822.IsEnabled = false;
            equiptb823.IsEnabled = false;
            equiptb831.IsEnabled = false;
            equiptb832.IsEnabled = false;
            equiptb833.IsEnabled = false;

            Merry0.Content = "♡";
            Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Gray"));
            Merry0.Foreground = br;
            Merry1.Content = "♡";
            Merry1.Foreground = br;
            Merry2.Content = "♡";
            Merry2.Foreground = br;
            Merry3.Content = "♡";
            Merry3.Foreground = br;
            Merry4.Content = "♡";
            Merry4.Foreground = br;
            Merry5.Content = "♡";
            Merry5.Foreground = br;
            Merry6.Content = "♡";
            Merry6.Foreground = br;
            Merry0.Content = "♡";
            Merry0.Foreground = br;
            Merry8.Content = "♡";
            Merry8.Foreground = br;

            enemyarmor.Text = "0";
            enemybreakarmor.Text = "0";

            fairynamecombo.SelectedIndex = 0;
            fairylevel.SelectedIndex = 0;
            fairytalentcombo.SelectedIndex = -1;
            cb9.IsChecked = false;
            cbIsdoublecard.IsChecked = false;
        }
        /// <summary>
        /// 选中左上格副T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rbf0_Checked(object sender, RoutedEventArgs e)
        {
            calcftank(0);
        }
        /// <summary>
        /// 选中上格副T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rbf1_Checked(object sender, RoutedEventArgs e)
        {
            calcftank(1);
        }
        /// <summary>
        /// 选中右上格副T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rbf2_Checked(object sender, RoutedEventArgs e)
        {
            calcftank(2);
        }
        /// <summary>
        /// 选中左中格副T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rbf3_Checked(object sender, RoutedEventArgs e)
        {
            calcftank(3);
        }
        /// <summary>
        /// 选中中格副T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rbf4_Checked(object sender, RoutedEventArgs e)
        {
            calcftank(4);
        }
        /// <summary>
        /// 选中右中格副T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rbf5_Checked(object sender, RoutedEventArgs e)
        {
            calcftank(5);
        }
        /// <summary>
        /// 选中左下格副T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rbf6_Checked(object sender, RoutedEventArgs e)
        {
            calcftank(6);
        }
        /// <summary>
        /// 选中下格副T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rbf7_Checked(object sender, RoutedEventArgs e)
        {
            calcftank(7);
        }
        /// <summary>
        /// 选中右下格副T
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rbf8_Checked(object sender, RoutedEventArgs e)
        {
            calcftank(8);
        }
        /// <summary>
        /// 点击About按钮
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void About_Click(object sender, RoutedEventArgs e)
        {
            Summary s = new Summary();
            s.ShowDialog();
        }
        /// <summary>
        /// 点击log按钮
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void UpdateData_Click(object sender, RoutedEventArgs e)
        {
            UpdateData u = new UpdateData();
            u.ShowDialog();
        }
        /// <summary>
        /// 重置技能加成
        /// </summary>
        private void clearskill()
        {
            for (int i = 0; i < 9; i++)
            {
                skillupshotspeed[i] = 1;
                skilluphit[i] = 1;
                skillupdodge[i] = 1;
                skillupdamage[i] = 1;
                skilltarget[i] = 1;
                skilldamageagain[i] = 1;
                skilluparmor[i] = 1;
                skillupcrit[i] = 1;
                skillupbelt[i] = 0;
                skilluprenju[i] = 1;
                skillsolidmultiple[i] = 0;
                skillupnegev[i] = 0;
                skillupboom[i] = 0;
                isfullcrit[i] = false;

            }
            shield = 0;
            ump40skillclose = 0;
            ump40skillopen = 0;
            skilldowndodge = 1;
            skilldownhit = 1;
            skilldowndamage = 1;
            fairydowndamage = 1;
        }
        /// <summary>
        /// 左上格技能打勾事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cb0_Click(object sender, RoutedEventArgs e)
        {
            if (cb0.IsChecked == true)
            {
                if (gun[Combo0.SelectedIndex].type == 100122 && equiprifledslug[0])
                    equiprifledslug[0] = false;
                if (gun[Combo0.SelectedIndex].type == 106501)
                {
                    ump40skillclose = int.Parse(textBlock.Text);
                    ump40skillopen = 0;
                }
                skilltime[0] = slider.Value;
                renewskill();
            }
            else
            {
                if (gun[Combo0.SelectedIndex].type == 100122)
                {
                    if (equipcb01.Text.Contains("独头弹") || equipcb02.Text.Contains("独头弹") || equipcb03.Text.Contains("独头弹"))
                    {
                        equiprifledslug[0] = true;
                    }
                    if (gun[Combo0.SelectedIndex].type == 106501)
                    {
                        ump40skillclose = 0;
                        ump40skillopen = int.Parse(textBlock.Text);
                    }
                    if (gun[Combo0.SelectedIndex].type == 301502 || gun[Combo0.SelectedIndex].type == 301503 || gun[Combo0.SelectedIndex].type == 301504 || gun[Combo0.SelectedIndex].type == 200201 || gun[Combo0.SelectedIndex].type == 106304)
                    {
                        return;
                    }
                }
                skilltime[0] = 0;
                clearskill();
                renewdamage(0, 0);
                for (int i = 0; i < 9; i++)
                {
                    renewindex(i);
                }
                calcskill(1, Combo1.SelectedIndex, SkillLevel1.SelectedIndex, cb1.IsChecked == true, Level1.SelectedIndex);
                calcskill(2, Combo2.SelectedIndex, SkillLevel2.SelectedIndex, cb2.IsChecked == true, Level2.SelectedIndex);
                calcskill(3, Combo3.SelectedIndex, SkillLevel3.SelectedIndex, cb3.IsChecked == true, Level3.SelectedIndex);
                calcskill(4, Combo4.SelectedIndex, SkillLevel4.SelectedIndex, cb4.IsChecked == true, Level4.SelectedIndex);
                calcskill(5, Combo5.SelectedIndex, SkillLevel5.SelectedIndex, cb5.IsChecked == true, Level5.SelectedIndex);
                calcskill(6, Combo6.SelectedIndex, SkillLevel6.SelectedIndex, cb6.IsChecked == true, Level6.SelectedIndex);
                calcskill(7, Combo7.SelectedIndex, SkillLevel7.SelectedIndex, cb7.IsChecked == true, Level7.SelectedIndex);
                calcskill(8, Combo8.SelectedIndex, SkillLevel8.SelectedIndex, cb8.IsChecked == true, Level8.SelectedIndex);
                calcfairyskill();
                calctalent();
            }
            renewtank();
        }
        /// <summary>
        /// 上格技能打勾事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cb1_Click(object sender, RoutedEventArgs e)
        {
            if (cb1.IsChecked == true)
            {
                if (gun[Combo1.SelectedIndex].type == 100122 && equiprifledslug[1])
                    equiprifledslug[1] = false;
                if (gun[Combo1.SelectedIndex].type == 106501)
                {
                    ump40skillclose = int.Parse(textBlock.Text);
                    ump40skillopen = 0;
                }
                skilltime[1] = slider.Value;
                renewskill();
            }
            else
            {
                {
                    if (equipcb11.Text.Contains("独头弹") || equipcb12.Text.Contains("独头弹") || equipcb13.Text.Contains("独头弹"))
                    {
                        equiprifledslug[1] = true;
                    }
                    if (gun[Combo1.SelectedIndex].type == 106501)
                    {
                        ump40skillclose = 0;
                        ump40skillopen = int.Parse(textBlock.Text);
                    }
                    if (gun[Combo1.SelectedIndex].type == 301502 || gun[Combo1.SelectedIndex].type == 301503 || gun[Combo1.SelectedIndex].type == 301504 || gun[Combo1.SelectedIndex].type == 200201 || gun[Combo1.SelectedIndex].type == 106304)
                    {
                        return;
                    }
                }
                skilltime[1] = 0;
                clearskill();
                renewdamage(1, 0);
                for (int i = 0; i < 9; i++)
                {
                    renewindex(i);
                }
                calcskill(0, Combo0.SelectedIndex, SkillLevel0.SelectedIndex, cb0.IsChecked == true, Level0.SelectedIndex);
                calcskill(2, Combo2.SelectedIndex, SkillLevel2.SelectedIndex, cb2.IsChecked == true, Level2.SelectedIndex);
                calcskill(3, Combo3.SelectedIndex, SkillLevel3.SelectedIndex, cb3.IsChecked == true, Level3.SelectedIndex);
                calcskill(4, Combo4.SelectedIndex, SkillLevel4.SelectedIndex, cb4.IsChecked == true, Level4.SelectedIndex);
                calcskill(5, Combo5.SelectedIndex, SkillLevel5.SelectedIndex, cb5.IsChecked == true, Level5.SelectedIndex);
                calcskill(6, Combo6.SelectedIndex, SkillLevel6.SelectedIndex, cb6.IsChecked == true, Level6.SelectedIndex);
                calcskill(7, Combo7.SelectedIndex, SkillLevel7.SelectedIndex, cb7.IsChecked == true, Level7.SelectedIndex);
                calcskill(8, Combo8.SelectedIndex, SkillLevel8.SelectedIndex, cb8.IsChecked == true, Level8.SelectedIndex);
                calcfairyskill();
                calctalent();
            }
            renewtank();
        }
        /// <summary>
        /// 右上格技能打勾事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cb2_Click(object sender, RoutedEventArgs e)
        {
            if (cb2.IsChecked == true)
            {
                if (gun[Combo2.SelectedIndex].type == 100122 && equiprifledslug[2])
                    equiprifledslug[2] = false;
                if (gun[Combo2.SelectedIndex].type == 106501)
                {
                    ump40skillclose = int.Parse(textBlock.Text);
                    ump40skillopen = 0;
                }
                skilltime[2] = slider.Value;
                renewskill();
            }
            else
            {
                if (gun[Combo2.SelectedIndex].type == 100122)
                {
                    if (equipcb21.Text.Contains("独头弹") || equipcb22.Text.Contains("独头弹") || equipcb23.Text.Contains("独头弹"))
                    {
                        equiprifledslug[2] = true;
                    }
                    if (gun[Combo2.SelectedIndex].type == 106501)
                    {
                        ump40skillclose = 0;
                        ump40skillopen = int.Parse(textBlock.Text);
                    }
                    if (gun[Combo2.SelectedIndex].type == 301502 || gun[Combo2.SelectedIndex].type == 301503 || gun[Combo2.SelectedIndex].type == 301504 || gun[Combo2.SelectedIndex].type == 200201 || gun[Combo2.SelectedIndex].type == 106304)
                    {
                        return;
                    }
                }
                skilltime[2] = 0;
                clearskill();
                renewdamage(2, 0);
                for (int i = 0; i < 9; i++)
                {
                    renewindex(i);
                }
                calcskill(0, Combo0.SelectedIndex, SkillLevel0.SelectedIndex, cb0.IsChecked == true, Level0.SelectedIndex);
                calcskill(1, Combo1.SelectedIndex, SkillLevel1.SelectedIndex, cb1.IsChecked == true, Level1.SelectedIndex);
                calcskill(3, Combo3.SelectedIndex, SkillLevel3.SelectedIndex, cb3.IsChecked == true, Level3.SelectedIndex);
                calcskill(4, Combo4.SelectedIndex, SkillLevel4.SelectedIndex, cb4.IsChecked == true, Level4.SelectedIndex);
                calcskill(5, Combo5.SelectedIndex, SkillLevel5.SelectedIndex, cb5.IsChecked == true, Level5.SelectedIndex);
                calcskill(6, Combo6.SelectedIndex, SkillLevel6.SelectedIndex, cb6.IsChecked == true, Level6.SelectedIndex);
                calcskill(7, Combo7.SelectedIndex, SkillLevel7.SelectedIndex, cb7.IsChecked == true, Level7.SelectedIndex);
                calcskill(8, Combo8.SelectedIndex, SkillLevel8.SelectedIndex, cb8.IsChecked == true, Level8.SelectedIndex);
                calcfairyskill();
                calctalent();
            }
            renewtank();
        }
        /// <summary>
        /// 左中格技能打勾事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cb3_Click(object sender, RoutedEventArgs e)
        {
            if (cb3.IsChecked == true)
            {
                if (gun[Combo3.SelectedIndex].type == 100122 && equiprifledslug[3])
                    equiprifledslug[3] = false;
                if (gun[Combo3.SelectedIndex].type == 106501)
                {
                    ump40skillclose = int.Parse(textBlock.Text);
                    ump40skillopen = 0;
                }
                skilltime[3] = slider.Value;
                renewskill();
            }
            else
            {
                if (gun[Combo3.SelectedIndex].type == 100122)
                {
                    if (equipcb31.Text.Contains("独头弹") || equipcb32.Text.Contains("独头弹") || equipcb33.Text.Contains("独头弹"))
                    {
                        equiprifledslug[3] = true;
                    }
                    if (gun[Combo3.SelectedIndex].type == 106501)
                    {
                        ump40skillclose = 0;
                        ump40skillopen = int.Parse(textBlock.Text);
                    }
                    if (gun[Combo3.SelectedIndex].type == 301502 || gun[Combo3.SelectedIndex].type == 301503 || gun[Combo3.SelectedIndex].type == 301504 || gun[Combo3.SelectedIndex].type == 200201 || gun[Combo3.SelectedIndex].type == 106304)
                    {
                        return;
                    }
                }
                skilltime[3] = 0;
                clearskill();
                renewdamage(3, 0);
                for (int i = 0; i < 9; i++)
                {
                    renewindex(i);
                }
                calcskill(0, Combo0.SelectedIndex, SkillLevel0.SelectedIndex, cb0.IsChecked == true, Level0.SelectedIndex);
                calcskill(1, Combo1.SelectedIndex, SkillLevel1.SelectedIndex, cb1.IsChecked == true, Level1.SelectedIndex);
                calcskill(2, Combo2.SelectedIndex, SkillLevel2.SelectedIndex, cb2.IsChecked == true, Level2.SelectedIndex);
                calcskill(4, Combo4.SelectedIndex, SkillLevel4.SelectedIndex, cb4.IsChecked == true, Level4.SelectedIndex);
                calcskill(5, Combo5.SelectedIndex, SkillLevel5.SelectedIndex, cb5.IsChecked == true, Level5.SelectedIndex);
                calcskill(6, Combo6.SelectedIndex, SkillLevel6.SelectedIndex, cb6.IsChecked == true, Level6.SelectedIndex);
                calcskill(7, Combo7.SelectedIndex, SkillLevel7.SelectedIndex, cb7.IsChecked == true, Level7.SelectedIndex);
                calcskill(8, Combo8.SelectedIndex, SkillLevel8.SelectedIndex, cb8.IsChecked == true, Level8.SelectedIndex);
                calcfairyskill();
                calctalent();
            }
            renewtank();
        }
        /// <summary>
        /// 中格技能打勾事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cb4_Click(object sender, RoutedEventArgs e)
        {
            if (cb4.IsChecked == true)
            {
                if (gun[Combo4.SelectedIndex].type == 100122 && equiprifledslug[4])
                    equiprifledslug[4] = false;
                if (gun[Combo4.SelectedIndex].type == 106501)
                {
                    ump40skillclose = int.Parse(textBlock.Text);
                    ump40skillopen = 0;
                }
                skilltime[4] = slider.Value;
                renewskill();
            }
            else
            {
                if (gun[Combo4.SelectedIndex].type == 100122)
                {
                    if (equipcb41.Text.Contains("独头弹") || equipcb42.Text.Contains("独头弹") || equipcb43.Text.Contains("独头弹"))
                    {
                        equiprifledslug[4] = true;
                    }
                    if (gun[Combo4.SelectedIndex].type == 106501)
                    {
                        ump40skillclose = 0;
                        ump40skillopen = int.Parse(textBlock.Text);
                    }
                    if (gun[Combo4.SelectedIndex].type == 301502 || gun[Combo4.SelectedIndex].type == 301503 || gun[Combo4.SelectedIndex].type == 301504 || gun[Combo4.SelectedIndex].type == 200201 || gun[Combo4.SelectedIndex].type == 106304)
                    {
                        return;
                    }
                }
                skilltime[4] = 0;
                clearskill();
                renewdamage(4, 0);
                for (int i = 0; i < 9; i++)
                {
                    renewindex(i);
                }
                calcskill(0, Combo0.SelectedIndex, SkillLevel0.SelectedIndex, cb0.IsChecked == true, Level0.SelectedIndex);
                calcskill(1, Combo1.SelectedIndex, SkillLevel1.SelectedIndex, cb1.IsChecked == true, Level1.SelectedIndex);
                calcskill(2, Combo2.SelectedIndex, SkillLevel2.SelectedIndex, cb2.IsChecked == true, Level2.SelectedIndex);
                calcskill(3, Combo3.SelectedIndex, SkillLevel3.SelectedIndex, cb3.IsChecked == true, Level3.SelectedIndex);
                calcskill(5, Combo5.SelectedIndex, SkillLevel5.SelectedIndex, cb5.IsChecked == true, Level5.SelectedIndex);
                calcskill(6, Combo6.SelectedIndex, SkillLevel6.SelectedIndex, cb6.IsChecked == true, Level6.SelectedIndex);
                calcskill(7, Combo7.SelectedIndex, SkillLevel7.SelectedIndex, cb7.IsChecked == true, Level7.SelectedIndex);
                calcskill(8, Combo8.SelectedIndex, SkillLevel8.SelectedIndex, cb8.IsChecked == true, Level8.SelectedIndex);

                calcfairyskill();
                calctalent();
            }
            renewtank();
        }
        /// <summary>
        /// 右中格技能打勾事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cb5_Click(object sender, RoutedEventArgs e)
        {
            if (cb5.IsChecked == true)
            {
                if (gun[Combo5.SelectedIndex].type == 100122 && equiprifledslug[5])
                    equiprifledslug[5] = false;
                if (gun[Combo5.SelectedIndex].type == 106501)
                {
                    ump40skillclose = int.Parse(textBlock.Text);
                    ump40skillopen = 0;
                }
                skilltime[5] = slider.Value;
                renewskill();
            }
            else
            {
                if (gun[Combo5.SelectedIndex].type == 100122)
                {
                    if (equipcb51.Text.Contains("独头弹") || equipcb52.Text.Contains("独头弹") || equipcb53.Text.Contains("独头弹"))
                    {
                        equiprifledslug[5] = true;
                    }
                    if (gun[Combo5.SelectedIndex].type == 106501)
                    {
                        ump40skillclose = 0;
                        ump40skillopen = int.Parse(textBlock.Text);
                    }
                    if (gun[Combo5.SelectedIndex].type == 301502 || gun[Combo5.SelectedIndex].type == 301503 || gun[Combo5.SelectedIndex].type == 301504 || gun[Combo5.SelectedIndex].type == 200201 || gun[Combo5.SelectedIndex].type == 106304)
                    {
                        return;
                    }
                }

                skilltime[5] = 0;
                clearskill();
                renewdamage(5, 0);
                for (int i = 0; i < 9; i++)
                {
                    renewindex(i);
                }
                calcskill(0, Combo0.SelectedIndex, SkillLevel0.SelectedIndex, cb0.IsChecked == true, Level0.SelectedIndex);
                calcskill(1, Combo1.SelectedIndex, SkillLevel1.SelectedIndex, cb1.IsChecked == true, Level1.SelectedIndex);
                calcskill(2, Combo2.SelectedIndex, SkillLevel2.SelectedIndex, cb2.IsChecked == true, Level2.SelectedIndex);
                calcskill(3, Combo3.SelectedIndex, SkillLevel3.SelectedIndex, cb3.IsChecked == true, Level3.SelectedIndex);
                calcskill(4, Combo4.SelectedIndex, SkillLevel4.SelectedIndex, cb4.IsChecked == true, Level4.SelectedIndex);
                calcskill(6, Combo6.SelectedIndex, SkillLevel6.SelectedIndex, cb6.IsChecked == true, Level6.SelectedIndex);
                calcskill(7, Combo7.SelectedIndex, SkillLevel7.SelectedIndex, cb7.IsChecked == true, Level7.SelectedIndex);
                calcskill(8, Combo8.SelectedIndex, SkillLevel8.SelectedIndex, cb8.IsChecked == true, Level8.SelectedIndex);
                calcfairyskill();
                calctalent();
            }
            renewtank();
        }
        /// <summary>
        /// 左下格技能打勾事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cb6_Click(object sender, RoutedEventArgs e)
        {
            if (cb6.IsChecked == true)
            {
                if (gun[Combo6.SelectedIndex].type == 100122 && equiprifledslug[6])
                    equiprifledslug[6] = false;
                if (gun[Combo6.SelectedIndex].type == 106501)
                {
                    ump40skillclose = int.Parse(textBlock.Text);
                    ump40skillopen = 0;
                }
                skilltime[6] = slider.Value;
                renewskill();
            }
            else
            {
                if (gun[Combo6.SelectedIndex].type == 100122)
                {
                    if (equipcb61.Text.Contains("独头弹") || equipcb62.Text.Contains("独头弹") || equipcb63.Text.Contains("独头弹"))
                    {
                        equiprifledslug[6] = true;
                    }
                    if (gun[Combo6.SelectedIndex].type == 106501)
                    {
                        ump40skillclose = 0;
                        ump40skillopen = int.Parse(textBlock.Text);
                    }
                    if (gun[Combo6.SelectedIndex].type == 301502 || gun[Combo6.SelectedIndex].type == 301503 || gun[Combo6.SelectedIndex].type == 301504 || gun[Combo6.SelectedIndex].type == 200201 || gun[Combo6.SelectedIndex].type == 106304)
                    {
                        return;
                    }
                }

                skilltime[6] = 0;
                clearskill();
                renewdamage(6, 0);
                for (int i = 0; i < 9; i++)
                {
                    renewindex(i);
                }
                calcskill(0, Combo0.SelectedIndex, SkillLevel0.SelectedIndex, cb0.IsChecked == true, Level0.SelectedIndex);
                calcskill(1, Combo1.SelectedIndex, SkillLevel1.SelectedIndex, cb1.IsChecked == true, Level1.SelectedIndex);
                calcskill(2, Combo2.SelectedIndex, SkillLevel2.SelectedIndex, cb2.IsChecked == true, Level2.SelectedIndex);
                calcskill(3, Combo3.SelectedIndex, SkillLevel3.SelectedIndex, cb3.IsChecked == true, Level3.SelectedIndex);
                calcskill(4, Combo4.SelectedIndex, SkillLevel4.SelectedIndex, cb4.IsChecked == true, Level4.SelectedIndex);
                calcskill(5, Combo5.SelectedIndex, SkillLevel5.SelectedIndex, cb5.IsChecked == true, Level5.SelectedIndex);
                calcskill(7, Combo7.SelectedIndex, SkillLevel7.SelectedIndex, cb7.IsChecked == true, Level7.SelectedIndex);
                calcskill(8, Combo8.SelectedIndex, SkillLevel8.SelectedIndex, cb8.IsChecked == true, Level8.SelectedIndex);
                calcfairyskill();
                calctalent();

            }
            renewtank();
        }
        /// <summary>
        /// 下格技能打勾事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cb7_Click(object sender, RoutedEventArgs e)
        {
            if (cb7.IsChecked == true)
            {
                if (gun[Combo7.SelectedIndex].type == 100122 && equiprifledslug[7])
                    equiprifledslug[7] = false;
                if (gun[Combo7.SelectedIndex].type == 106501)
                {
                    ump40skillclose = int.Parse(textBlock.Text);
                    ump40skillopen = 0;
                }
                skilltime[7] = slider.Value;
                renewskill();
            }
            else
            {
                if (gun[Combo7.SelectedIndex].type == 100122)
                {
                    if (equipcb71.Text.Contains("独头弹") || equipcb72.Text.Contains("独头弹") || equipcb73.Text.Contains("独头弹"))
                    {
                        equiprifledslug[7] = true;
                    }
                    if (gun[Combo7.SelectedIndex].type == 106501)
                    {
                        ump40skillclose = 0;
                        ump40skillopen = int.Parse(textBlock.Text);
                    }
                    if (gun[Combo7.SelectedIndex].type == 301502 || gun[Combo7.SelectedIndex].type == 301503 || gun[Combo7.SelectedIndex].type == 301504 || gun[Combo7.SelectedIndex].type == 200201 || gun[Combo7.SelectedIndex].type == 106304)
                    {
                        return;
                    }
                }

                skilltime[7] = 0;
                clearskill();
                renewdamage(7, 0);
                for (int i = 0; i < 9; i++)
                {
                    renewindex(i);
                }
                calcskill(0, Combo0.SelectedIndex, SkillLevel0.SelectedIndex, cb0.IsChecked == true, Level0.SelectedIndex);
                calcskill(1, Combo1.SelectedIndex, SkillLevel1.SelectedIndex, cb1.IsChecked == true, Level1.SelectedIndex);
                calcskill(2, Combo2.SelectedIndex, SkillLevel2.SelectedIndex, cb2.IsChecked == true, Level2.SelectedIndex);
                calcskill(3, Combo3.SelectedIndex, SkillLevel3.SelectedIndex, cb3.IsChecked == true, Level3.SelectedIndex);
                calcskill(4, Combo4.SelectedIndex, SkillLevel4.SelectedIndex, cb4.IsChecked == true, Level4.SelectedIndex);
                calcskill(5, Combo5.SelectedIndex, SkillLevel5.SelectedIndex, cb5.IsChecked == true, Level5.SelectedIndex);
                calcskill(6, Combo6.SelectedIndex, SkillLevel6.SelectedIndex, cb6.IsChecked == true, Level6.SelectedIndex);
                calcskill(8, Combo8.SelectedIndex, SkillLevel8.SelectedIndex, cb8.IsChecked == true, Level8.SelectedIndex);
                calcfairyskill();
                calctalent();
            }
            renewtank();
        }
        /// <summary>
        /// 右下格技能打勾事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cb8_Click(object sender, RoutedEventArgs e)
        {
            if (cb8.IsChecked == true)
            {
                if (gun[Combo8.SelectedIndex].type == 100122 && equiprifledslug[8])
                    equiprifledslug[8] = false;
                if (gun[Combo8.SelectedIndex].type == 106501)
                {
                    ump40skillclose = int.Parse(textBlock.Text);
                    ump40skillopen = 0;
                }
                skilltime[8] = slider.Value;
                renewskill();
            }
            else
            {
                if (gun[Combo8.SelectedIndex].type == 100122)
                {
                    if (equipcb81.Text.Contains("独头弹") || equipcb82.Text.Contains("独头弹") || equipcb83.Text.Contains("独头弹"))
                    {
                        equiprifledslug[8] = true;
                    }
                    if (gun[Combo8.SelectedIndex].type == 106501)
                    {
                        ump40skillclose = 0;
                        ump40skillopen = int.Parse(textBlock.Text);
                    }
                    if (gun[Combo8.SelectedIndex].type == 301502 || gun[Combo8.SelectedIndex].type == 301503 || gun[Combo8.SelectedIndex].type == 301504 || gun[Combo8.SelectedIndex].type == 200201 || gun[Combo8.SelectedIndex].type == 106304)
                    {
                        return;
                    }
                }

                skilltime[8] = 0;
                clearskill();
                renewdamage(8, 0);
                for (int i = 0; i < 9; i++)
                {
                    renewindex(i);
                }
                calcskill(0, Combo0.SelectedIndex, SkillLevel0.SelectedIndex, cb0.IsChecked == true, Level0.SelectedIndex);
                calcskill(1, Combo1.SelectedIndex, SkillLevel1.SelectedIndex, cb1.IsChecked == true, Level1.SelectedIndex);
                calcskill(2, Combo2.SelectedIndex, SkillLevel2.SelectedIndex, cb2.IsChecked == true, Level2.SelectedIndex);
                calcskill(3, Combo3.SelectedIndex, SkillLevel3.SelectedIndex, cb3.IsChecked == true, Level3.SelectedIndex);
                calcskill(4, Combo4.SelectedIndex, SkillLevel4.SelectedIndex, cb4.IsChecked == true, Level4.SelectedIndex);
                calcskill(5, Combo5.SelectedIndex, SkillLevel5.SelectedIndex, cb5.IsChecked == true, Level5.SelectedIndex);
                calcskill(6, Combo6.SelectedIndex, SkillLevel6.SelectedIndex, cb6.IsChecked == true, Level6.SelectedIndex);
                calcskill(7, Combo7.SelectedIndex, SkillLevel7.SelectedIndex, cb7.IsChecked == true, Level7.SelectedIndex);
                calcfairyskill();
                calctalent();
            }
            renewtank();
        }
        /// <summary>
        /// 计算一战消耗
        /// </summary>
        private void calceat()
        {
            double ammo = 0;
            double food = 0;
            if (Combo0.SelectedIndex != -1 && Combo0.SelectedIndex != GUN_NUMBER)//2 ar 3 smg 4 hg 5 rf 6 mg
            {
                switch (gun[Combo0.SelectedIndex].what)
                {
                    case 2:
                        {
                            if (Level0.SelectedIndex >= 89)
                            {
                                ammo += 12;
                                food += 6;
                            }
                            else if (Level0.SelectedIndex >= 69)
                            {
                                ammo += 10;
                                food += 5;
                            }
                            else if (Level0.SelectedIndex >= 29)
                            {
                                ammo += 8;
                                food += 4;
                            }
                            else if (Level0.SelectedIndex >= 9)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else
                            {
                                ammo += 4;
                                food += 2;
                            }
                            break;
                        }
                    case 3:
                        {
                            if (Level0.SelectedIndex >= 89)
                            {
                                ammo += 17;
                                food += 6;
                            }
                            else if (Level0.SelectedIndex >= 69)
                            {
                                ammo += 14;
                                food += 5;
                            }
                            else if (Level0.SelectedIndex >= 29)
                            {
                                ammo += 11;
                                food += 4;
                            }
                            else if (Level0.SelectedIndex >= 9)
                            {
                                ammo += 8;
                                food += 3;
                            }
                            else
                            {
                                ammo += 5;
                                food += 2;
                            }
                            break;
                        }
                    case 4:
                        {
                            if (Level0.SelectedIndex >= 89)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else if (Level0.SelectedIndex >= 69)
                            {
                                ammo += 5;
                                food += 2.5;
                            }
                            else if (Level0.SelectedIndex >= 29)
                            {
                                ammo += 4;
                                food += 2;
                            }
                            else if (Level0.SelectedIndex >= 9)
                            {
                                ammo += 3;
                                food += 1.5;
                            }
                            else
                            {
                                ammo += 2;
                                food += 1;
                            }
                            break;
                        }
                    case 5:
                        {
                            if (Level0.SelectedIndex >= 89)
                            {
                                ammo += 11;
                                food += 9;
                            }
                            else if (Level0.SelectedIndex >= 69)
                            {
                                ammo += 9;
                                food += 7.5;
                            }
                            else if (Level0.SelectedIndex >= 29)
                            {
                                ammo += 7;
                                food += 6;
                            }
                            else if (Level0.SelectedIndex >= 9)
                            {
                                ammo += 5;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 3;
                                food += 3;
                            }
                            break;
                        }
                    case 6:
                        {
                            if (Level0.SelectedIndex >= 89)
                            {
                                ammo += 28;
                                food += 9;
                            }
                            else if (Level0.SelectedIndex >= 69)
                            {
                                ammo += 23;
                                food += 7.5;
                            }
                            else if (Level0.SelectedIndex >= 29)
                            {
                                ammo += 18;
                                food += 6;
                            }
                            else if (Level0.SelectedIndex >= 9)
                            {
                                ammo += 13;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 8;
                                food += 3;
                            }
                            break;
                        }
                    case 7:
                        {
                            if (Level0.SelectedIndex >= 89)
                            {
                                ammo += 18;
                                food += 14;
                            }
                            else if (Level0.SelectedIndex >= 69)
                            {
                                ammo += 15;
                                food += 11.5;
                            }
                            else if (Level0.SelectedIndex >= 29)
                            {
                                ammo += 12;
                                food += 9;
                            }
                            else if (Level0.SelectedIndex >= 9)
                            {
                                ammo += 9;
                                food += 6.5;
                            }
                            else
                            {
                                ammo += 6;
                                food += 4;
                            }
                            break;
                        }
                    default:
                        break;
                }
            }
            if (Combo1.SelectedIndex != -1 && Combo1.SelectedIndex != GUN_NUMBER)//2 ar 3 smg 4 hg 5 rf 6 mg
            {
                switch (gun[Combo1.SelectedIndex].what)
                {
                    case 2:
                        {
                            if (Level1.SelectedIndex >= 89)
                            {
                                ammo += 12;
                                food += 6;
                            }
                            else if (Level1.SelectedIndex >= 69)
                            {
                                ammo += 10;
                                food += 5;
                            }
                            else if (Level1.SelectedIndex >= 29)
                            {
                                ammo += 8;
                                food += 4;
                            }
                            else if (Level1.SelectedIndex >= 9)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else
                            {
                                ammo += 4;
                                food += 2;
                            }
                            break;
                        }
                    case 3:
                        {
                            if (Level1.SelectedIndex >= 89)
                            {
                                ammo += 17;
                                food += 6;
                            }
                            else if (Level1.SelectedIndex >= 69)
                            {
                                ammo += 14;
                                food += 5;
                            }
                            else if (Level1.SelectedIndex >= 29)
                            {
                                ammo += 11;
                                food += 4;
                            }
                            else if (Level1.SelectedIndex >= 9)
                            {
                                ammo += 8;
                                food += 3;
                            }
                            else
                            {
                                ammo += 5;
                                food += 2;
                            }
                            break;
                        }
                    case 4:
                        {
                            if (Level1.SelectedIndex >= 89)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else if (Level1.SelectedIndex >= 69)
                            {
                                ammo += 5;
                                food += 2.5;
                            }
                            else if (Level1.SelectedIndex >= 29)
                            {
                                ammo += 4;
                                food += 2;
                            }
                            else if (Level1.SelectedIndex >= 9)
                            {
                                ammo += 3;
                                food += 1.5;
                            }
                            else
                            {
                                ammo += 2;
                                food += 1;
                            }
                            break;
                        }
                    case 5:
                        {
                            if (Level1.SelectedIndex >= 89)
                            {
                                ammo += 11;
                                food += 9;
                            }
                            else if (Level1.SelectedIndex >= 69)
                            {
                                ammo += 9;
                                food += 7.5;
                            }
                            else if (Level1.SelectedIndex >= 29)
                            {
                                ammo += 7;
                                food += 6;
                            }
                            else if (Level1.SelectedIndex >= 9)
                            {
                                ammo += 5;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 3;
                                food += 3;
                            }
                            break;
                        }
                    case 6:
                        {
                            if (Level1.SelectedIndex >= 89)
                            {
                                ammo += 28;
                                food += 9;
                            }
                            else if (Level1.SelectedIndex >= 69)
                            {
                                ammo += 23;
                                food += 7.5;
                            }
                            else if (Level1.SelectedIndex >= 29)
                            {
                                ammo += 18;
                                food += 6;
                            }
                            else if (Level1.SelectedIndex >= 9)
                            {
                                ammo += 13;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 8;
                                food += 3;
                            }
                            break;
                        }
                    case 7:
                        {
                            if (Level1.SelectedIndex >= 89)
                            {
                                ammo += 18;
                                food += 14;
                            }
                            else if (Level1.SelectedIndex >= 69)
                            {
                                ammo += 15;
                                food += 11.5;
                            }
                            else if (Level1.SelectedIndex >= 29)
                            {
                                ammo += 12;
                                food += 9;
                            }
                            else if (Level1.SelectedIndex >= 9)
                            {
                                ammo += 9;
                                food += 6.5;
                            }
                            else
                            {
                                ammo += 6;
                                food += 4;
                            }
                            break;
                        }
                    default:
                        break;
                }
            }

            if (Combo2.SelectedIndex != -1 && Combo2.SelectedIndex != GUN_NUMBER)//2 ar 3 smg 4 hg 5 rf 6 mg
            {
                switch (gun[Combo2.SelectedIndex].what)
                {
                    case 2:
                        {
                            if (Level2.SelectedIndex >= 89)
                            {
                                ammo += 12;
                                food += 6;
                            }
                            else if (Level2.SelectedIndex >= 69)
                            {
                                ammo += 10;
                                food += 5;
                            }
                            else if (Level2.SelectedIndex >= 29)
                            {
                                ammo += 8;
                                food += 4;
                            }
                            else if (Level2.SelectedIndex >= 9)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else
                            {
                                ammo += 4;
                                food += 2;
                            }
                            break;
                        }
                    case 3:
                        {
                            if (Level2.SelectedIndex >= 89)
                            {
                                ammo += 17;
                                food += 6;
                            }
                            else if (Level2.SelectedIndex >= 69)
                            {
                                ammo += 14;
                                food += 5;
                            }
                            else if (Level2.SelectedIndex >= 29)
                            {
                                ammo += 11;
                                food += 4;
                            }
                            else if (Level2.SelectedIndex >= 9)
                            {
                                ammo += 8;
                                food += 3;
                            }
                            else
                            {
                                ammo += 5;
                                food += 2;
                            }
                            break;
                        }
                    case 4:
                        {
                            if (Level2.SelectedIndex >= 89)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else if (Level2.SelectedIndex >= 69)
                            {
                                ammo += 5;
                                food += 2.5;
                            }
                            else if (Level2.SelectedIndex >= 29)
                            {
                                ammo += 4;
                                food += 2;
                            }
                            else if (Level2.SelectedIndex >= 9)
                            {
                                ammo += 3;
                                food += 1.5;
                            }
                            else
                            {
                                ammo += 2;
                                food += 1;
                            }
                            break;
                        }
                    case 5:
                        {
                            if (Level2.SelectedIndex >= 89)
                            {
                                ammo += 11;
                                food += 9;
                            }
                            else if (Level2.SelectedIndex >= 69)
                            {
                                ammo += 9;
                                food += 7.5;
                            }
                            else if (Level2.SelectedIndex >= 29)
                            {
                                ammo += 7;
                                food += 6;
                            }
                            else if (Level2.SelectedIndex >= 9)
                            {
                                ammo += 5;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 3;
                                food += 3;
                            }
                            break;
                        }
                    case 6:
                        {
                            if (Level2.SelectedIndex >= 89)
                            {
                                ammo += 28;
                                food += 9;
                            }
                            else if (Level2.SelectedIndex >= 69)
                            {
                                ammo += 23;
                                food += 7.5;
                            }
                            else if (Level2.SelectedIndex >= 29)
                            {
                                ammo += 18;
                                food += 6;
                            }
                            else if (Level2.SelectedIndex >= 9)
                            {
                                ammo += 13;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 8;
                                food += 3;
                            }
                            break;
                        }
                    case 7:
                        {
                            if (Level2.SelectedIndex >= 89)
                            {
                                ammo += 18;
                                food += 14;
                            }
                            else if (Level2.SelectedIndex >= 69)
                            {
                                ammo += 15;
                                food += 11.5;
                            }
                            else if (Level2.SelectedIndex >= 29)
                            {
                                ammo += 12;
                                food += 9;
                            }
                            else if (Level2.SelectedIndex >= 9)
                            {
                                ammo += 9;
                                food += 6.5;
                            }
                            else
                            {
                                ammo += 6;
                                food += 4;
                            }
                            break;
                        }
                    default:
                        break;
                }
            }

            if (Combo3.SelectedIndex != -1 && Combo3.SelectedIndex != GUN_NUMBER)//2 ar 3 smg 4 hg 5 rf 6 mg
            {
                switch (gun[Combo3.SelectedIndex].what)
                {
                    case 2:
                        {
                            if (Level3.SelectedIndex >= 89)
                            {
                                ammo += 12;
                                food += 6;
                            }
                            else if (Level3.SelectedIndex >= 69)
                            {
                                ammo += 10;
                                food += 5;
                            }
                            else if (Level3.SelectedIndex >= 29)
                            {
                                ammo += 8;
                                food += 4;
                            }
                            else if (Level3.SelectedIndex >= 9)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else
                            {
                                ammo += 4;
                                food += 2;
                            }
                            break;
                        }
                    case 3:
                        {
                            if (Level3.SelectedIndex >= 89)
                            {
                                ammo += 17;
                                food += 6;
                            }
                            else if (Level3.SelectedIndex >= 69)
                            {
                                ammo += 14;
                                food += 5;
                            }
                            else if (Level3.SelectedIndex >= 29)
                            {
                                ammo += 11;
                                food += 4;
                            }
                            else if (Level3.SelectedIndex >= 9)
                            {
                                ammo += 8;
                                food += 3;
                            }
                            else
                            {
                                ammo += 5;
                                food += 2;
                            }
                            break;
                        }
                    case 4:
                        {
                            if (Level3.SelectedIndex >= 89)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else if (Level3.SelectedIndex >= 69)
                            {
                                ammo += 5;
                                food += 2.5;
                            }
                            else if (Level3.SelectedIndex >= 29)
                            {
                                ammo += 4;
                                food += 2;
                            }
                            else if (Level3.SelectedIndex >= 9)
                            {
                                ammo += 3;
                                food += 1.5;
                            }
                            else
                            {
                                ammo += 2;
                                food += 1;
                            }
                            break;
                        }
                    case 5:
                        {
                            if (Level3.SelectedIndex >= 89)
                            {
                                ammo += 11;
                                food += 9;
                            }
                            else if (Level3.SelectedIndex >= 69)
                            {
                                ammo += 9;
                                food += 7.5;
                            }
                            else if (Level3.SelectedIndex >= 29)
                            {
                                ammo += 7;
                                food += 6;
                            }
                            else if (Level3.SelectedIndex >= 9)
                            {
                                ammo += 5;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 3;
                                food += 3;
                            }
                            break;
                        }
                    case 6:
                        {
                            if (Level3.SelectedIndex >= 89)
                            {
                                ammo += 28;
                                food += 9;
                            }
                            else if (Level3.SelectedIndex >= 69)
                            {
                                ammo += 23;
                                food += 7.5;
                            }
                            else if (Level3.SelectedIndex >= 29)
                            {
                                ammo += 18;
                                food += 6;
                            }
                            else if (Level3.SelectedIndex >= 9)
                            {
                                ammo += 13;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 8;
                                food += 3;
                            }
                            break;
                        }
                    case 7:
                        {
                            if (Level3.SelectedIndex >= 89)
                            {
                                ammo += 18;
                                food += 14;
                            }
                            else if (Level3.SelectedIndex >= 69)
                            {
                                ammo += 15;
                                food += 11.5;
                            }
                            else if (Level3.SelectedIndex >= 29)
                            {
                                ammo += 12;
                                food += 9;
                            }
                            else if (Level3.SelectedIndex >= 9)
                            {
                                ammo += 9;
                                food += 6.5;
                            }
                            else
                            {
                                ammo += 6;
                                food += 4;
                            }
                            break;
                        }
                    default:
                        break;
                }
            }

            if (Combo4.SelectedIndex != -1 && Combo4.SelectedIndex != GUN_NUMBER)//2 ar 3 smg 4 hg 5 rf 6 mg
            {
                switch (gun[Combo4.SelectedIndex].what)
                {
                    case 2:
                        {
                            if (Level4.SelectedIndex >= 89)
                            {
                                ammo += 12;
                                food += 6;
                            }
                            else if (Level4.SelectedIndex >= 69)
                            {
                                ammo += 10;
                                food += 5;
                            }
                            else if (Level4.SelectedIndex >= 29)
                            {
                                ammo += 8;
                                food += 4;
                            }
                            else if (Level4.SelectedIndex >= 9)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else
                            {
                                ammo += 4;
                                food += 2;
                            }
                            break;
                        }
                    case 3:
                        {
                            if (Level4.SelectedIndex >= 89)
                            {
                                ammo += 17;
                                food += 6;
                            }
                            else if (Level4.SelectedIndex >= 69)
                            {
                                ammo += 14;
                                food += 5;
                            }
                            else if (Level4.SelectedIndex >= 29)
                            {
                                ammo += 11;
                                food += 4;
                            }
                            else if (Level4.SelectedIndex >= 9)
                            {
                                ammo += 8;
                                food += 3;
                            }
                            else
                            {
                                ammo += 5;
                                food += 2;
                            }
                            break;
                        }
                    case 4:
                        {
                            if (Level4.SelectedIndex >= 89)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else if (Level4.SelectedIndex >= 69)
                            {
                                ammo += 5;
                                food += 2.5;
                            }
                            else if (Level4.SelectedIndex >= 29)
                            {
                                ammo += 4;
                                food += 2;
                            }
                            else if (Level4.SelectedIndex >= 9)
                            {
                                ammo += 3;
                                food += 1.5;
                            }
                            else
                            {
                                ammo += 2;
                                food += 1;
                            }
                            break;
                        }
                    case 5:
                        {
                            if (Level4.SelectedIndex >= 89)
                            {
                                ammo += 11;
                                food += 9;
                            }
                            else if (Level4.SelectedIndex >= 69)
                            {
                                ammo += 9;
                                food += 7.5;
                            }
                            else if (Level4.SelectedIndex >= 29)
                            {
                                ammo += 7;
                                food += 6;
                            }
                            else if (Level4.SelectedIndex >= 9)
                            {
                                ammo += 5;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 3;
                                food += 3;
                            }
                            break;
                        }
                    case 6:
                        {
                            if (Level4.SelectedIndex >= 89)
                            {
                                ammo += 28;
                                food += 9;
                            }
                            else if (Level4.SelectedIndex >= 69)
                            {
                                ammo += 23;
                                food += 7.5;
                            }
                            else if (Level4.SelectedIndex >= 29)
                            {
                                ammo += 18;
                                food += 6;
                            }
                            else if (Level4.SelectedIndex >= 9)
                            {
                                ammo += 13;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 8;
                                food += 3;
                            }
                            break;
                        }
                    case 7:
                        {
                            if (Level4.SelectedIndex >= 89)
                            {
                                ammo += 18;
                                food += 14;
                            }
                            else if (Level4.SelectedIndex >= 69)
                            {
                                ammo += 15;
                                food += 11.5;
                            }
                            else if (Level4.SelectedIndex >= 29)
                            {
                                ammo += 12;
                                food += 9;
                            }
                            else if (Level4.SelectedIndex >= 9)
                            {
                                ammo += 9;
                                food += 6.5;
                            }
                            else
                            {
                                ammo += 6;
                                food += 4;
                            }
                            break;
                        }
                    default:
                        break;
                }
            }

            if (Combo5.SelectedIndex != -1 && Combo5.SelectedIndex != GUN_NUMBER)//2 ar 3 smg 4 hg 5 rf 6 mg
            {
                switch (gun[Combo5.SelectedIndex].what)
                {
                    case 2:
                        {
                            if (Level5.SelectedIndex >= 89)
                            {
                                ammo += 12;
                                food += 6;
                            }
                            else if (Level5.SelectedIndex >= 69)
                            {
                                ammo += 10;
                                food += 5;
                            }
                            else if (Level5.SelectedIndex >= 29)
                            {
                                ammo += 8;
                                food += 4;
                            }
                            else if (Level5.SelectedIndex >= 9)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else
                            {
                                ammo += 4;
                                food += 2;
                            }
                            break;
                        }
                    case 3:
                        {
                            if (Level5.SelectedIndex >= 89)
                            {
                                ammo += 17;
                                food += 6;
                            }
                            else if (Level5.SelectedIndex >= 69)
                            {
                                ammo += 14;
                                food += 5;
                            }
                            else if (Level5.SelectedIndex >= 29)
                            {
                                ammo += 11;
                                food += 4;
                            }
                            else if (Level5.SelectedIndex >= 9)
                            {
                                ammo += 8;
                                food += 3;
                            }
                            else
                            {
                                ammo += 5;
                                food += 2;
                            }
                            break;
                        }
                    case 4:
                        {
                            if (Level5.SelectedIndex >= 89)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else if (Level5.SelectedIndex >= 69)
                            {
                                ammo += 5;
                                food += 2.5;
                            }
                            else if (Level5.SelectedIndex >= 29)
                            {
                                ammo += 4;
                                food += 2;
                            }
                            else if (Level5.SelectedIndex >= 9)
                            {
                                ammo += 3;
                                food += 1.5;
                            }
                            else
                            {
                                ammo += 2;
                                food += 1;
                            }
                            break;
                        }
                    case 5:
                        {
                            if (Level5.SelectedIndex >= 89)
                            {
                                ammo += 11;
                                food += 9;
                            }
                            else if (Level5.SelectedIndex >= 69)
                            {
                                ammo += 9;
                                food += 7.5;
                            }
                            else if (Level5.SelectedIndex >= 29)
                            {
                                ammo += 7;
                                food += 6;
                            }
                            else if (Level5.SelectedIndex >= 9)
                            {
                                ammo += 5;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 3;
                                food += 3;
                            }
                            break;
                        }
                    case 6:
                        {
                            if (Level5.SelectedIndex >= 89)
                            {
                                ammo += 28;
                                food += 9;
                            }
                            else if (Level5.SelectedIndex >= 69)
                            {
                                ammo += 23;
                                food += 7.5;
                            }
                            else if (Level5.SelectedIndex >= 29)
                            {
                                ammo += 18;
                                food += 6;
                            }
                            else if (Level5.SelectedIndex >= 9)
                            {
                                ammo += 13;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 8;
                                food += 3;
                            }
                            break;
                        }
                    case 7:
                        {
                            if (Level5.SelectedIndex >= 89)
                            {
                                ammo += 18;
                                food += 14;
                            }
                            else if (Level5.SelectedIndex >= 69)
                            {
                                ammo += 15;
                                food += 11.5;
                            }
                            else if (Level5.SelectedIndex >= 29)
                            {
                                ammo += 12;
                                food += 9;
                            }
                            else if (Level5.SelectedIndex >= 9)
                            {
                                ammo += 9;
                                food += 6.5;
                            }
                            else
                            {
                                ammo += 6;
                                food += 4;
                            }
                            break;
                        }
                    default:
                        break;
                }
            }

            if (Combo6.SelectedIndex != -1 && Combo6.SelectedIndex != GUN_NUMBER)//2 ar 3 smg 4 hg 5 rf 6 mg
            {
                switch (gun[Combo6.SelectedIndex].what)
                {
                    case 2:
                        {
                            if (Level6.SelectedIndex >= 89)
                            {
                                ammo += 12;
                                food += 6;
                            }
                            else if (Level6.SelectedIndex >= 69)
                            {
                                ammo += 10;
                                food += 5;
                            }
                            else if (Level6.SelectedIndex >= 29)
                            {
                                ammo += 8;
                                food += 4;
                            }
                            else if (Level6.SelectedIndex >= 9)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else
                            {
                                ammo += 4;
                                food += 2;
                            }
                            break;
                        }
                    case 3:
                        {
                            if (Level6.SelectedIndex >= 89)
                            {
                                ammo += 17;
                                food += 6;
                            }
                            else if (Level6.SelectedIndex >= 69)
                            {
                                ammo += 14;
                                food += 5;
                            }
                            else if (Level6.SelectedIndex >= 29)
                            {
                                ammo += 11;
                                food += 4;
                            }
                            else if (Level6.SelectedIndex >= 9)
                            {
                                ammo += 8;
                                food += 3;
                            }
                            else
                            {
                                ammo += 5;
                                food += 2;
                            }
                            break;
                        }
                    case 4:
                        {
                            if (Level6.SelectedIndex >= 89)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else if (Level6.SelectedIndex >= 69)
                            {
                                ammo += 5;
                                food += 2.5;
                            }
                            else if (Level6.SelectedIndex >= 29)
                            {
                                ammo += 4;
                                food += 2;
                            }
                            else if (Level6.SelectedIndex >= 9)
                            {
                                ammo += 3;
                                food += 1.5;
                            }
                            else
                            {
                                ammo += 2;
                                food += 1;
                            }
                            break;
                        }
                    case 5:
                        {
                            if (Level6.SelectedIndex >= 89)
                            {
                                ammo += 11;
                                food += 9;
                            }
                            else if (Level6.SelectedIndex >= 69)
                            {
                                ammo += 9;
                                food += 7.5;
                            }
                            else if (Level6.SelectedIndex >= 29)
                            {
                                ammo += 7;
                                food += 6;
                            }
                            else if (Level6.SelectedIndex >= 9)
                            {
                                ammo += 5;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 3;
                                food += 3;
                            }
                            break;
                        }
                    case 6:
                        {
                            if (Level6.SelectedIndex >= 89)
                            {
                                ammo += 28;
                                food += 9;
                            }
                            else if (Level6.SelectedIndex >= 69)
                            {
                                ammo += 23;
                                food += 7.5;
                            }
                            else if (Level6.SelectedIndex >= 29)
                            {
                                ammo += 18;
                                food += 6;
                            }
                            else if (Level6.SelectedIndex >= 9)
                            {
                                ammo += 13;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 8;
                                food += 3;
                            }
                            break;
                        }
                    case 7:
                        {
                            if (Level6.SelectedIndex >= 89)
                            {
                                ammo += 18;
                                food += 14;
                            }
                            else if (Level6.SelectedIndex >= 69)
                            {
                                ammo += 15;
                                food += 11.5;
                            }
                            else if (Level6.SelectedIndex >= 29)
                            {
                                ammo += 12;
                                food += 9;
                            }
                            else if (Level6.SelectedIndex >= 9)
                            {
                                ammo += 9;
                                food += 6.5;
                            }
                            else
                            {
                                ammo += 6;
                                food += 4;
                            }
                            break;
                        }
                    default:
                        break;
                }
            }

            if (Combo7.SelectedIndex != -1 && Combo7.SelectedIndex != GUN_NUMBER)//2 ar 3 smg 4 hg 5 rf 6 mg
            {
                switch (gun[Combo7.SelectedIndex].what)
                {
                    case 2:
                        {
                            if (Level7.SelectedIndex >= 89)
                            {
                                ammo += 12;
                                food += 6;
                            }
                            else if (Level7.SelectedIndex >= 69)
                            {
                                ammo += 10;
                                food += 5;
                            }
                            else if (Level7.SelectedIndex >= 29)
                            {
                                ammo += 8;
                                food += 4;
                            }
                            else if (Level7.SelectedIndex >= 9)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else
                            {
                                ammo += 4;
                                food += 2;
                            }
                            break;
                        }
                    case 3:
                        {
                            if (Level7.SelectedIndex >= 89)
                            {
                                ammo += 17;
                                food += 6;
                            }
                            else if (Level7.SelectedIndex >= 69)
                            {
                                ammo += 14;
                                food += 5;
                            }
                            else if (Level7.SelectedIndex >= 29)
                            {
                                ammo += 11;
                                food += 4;
                            }
                            else if (Level7.SelectedIndex >= 9)
                            {
                                ammo += 8;
                                food += 3;
                            }
                            else
                            {
                                ammo += 5;
                                food += 2;
                            }
                            break;
                        }
                    case 4:
                        {
                            if (Level7.SelectedIndex >= 89)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else if (Level7.SelectedIndex >= 69)
                            {
                                ammo += 5;
                                food += 2.5;
                            }
                            else if (Level7.SelectedIndex >= 29)
                            {
                                ammo += 4;
                                food += 2;
                            }
                            else if (Level7.SelectedIndex >= 9)
                            {
                                ammo += 3;
                                food += 1.5;
                            }
                            else
                            {
                                ammo += 2;
                                food += 1;
                            }
                            break;
                        }
                    case 5:
                        {
                            if (Level7.SelectedIndex >= 89)
                            {
                                ammo += 11;
                                food += 9;
                            }
                            else if (Level7.SelectedIndex >= 69)
                            {
                                ammo += 9;
                                food += 7.5;
                            }
                            else if (Level7.SelectedIndex >= 29)
                            {
                                ammo += 7;
                                food += 6;
                            }
                            else if (Level7.SelectedIndex >= 9)
                            {
                                ammo += 5;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 3;
                                food += 3;
                            }
                            break;
                        }
                    case 6:
                        {
                            if (Level7.SelectedIndex >= 89)
                            {
                                ammo += 28;
                                food += 9;
                            }
                            else if (Level7.SelectedIndex >= 69)
                            {
                                ammo += 23;
                                food += 7.5;
                            }
                            else if (Level7.SelectedIndex >= 29)
                            {
                                ammo += 18;
                                food += 6;
                            }
                            else if (Level7.SelectedIndex >= 9)
                            {
                                ammo += 13;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 8;
                                food += 3;
                            }
                            break;
                        }
                    case 7:
                        {
                            if (Level7.SelectedIndex >= 89)
                            {
                                ammo += 18;
                                food += 14;
                            }
                            else if (Level7.SelectedIndex >= 69)
                            {
                                ammo += 15;
                                food += 11.5;
                            }
                            else if (Level7.SelectedIndex >= 29)
                            {
                                ammo += 12;
                                food += 9;
                            }
                            else if (Level7.SelectedIndex >= 9)
                            {
                                ammo += 9;
                                food += 6.5;
                            }
                            else
                            {
                                ammo += 6;
                                food += 4;
                            }
                            break;
                        }
                    default:
                        break;
                }
            }

            if (Combo8.SelectedIndex != -1 && Combo8.SelectedIndex != GUN_NUMBER)//2 ar 3 smg 4 hg 5 rf 6 mg
            {
                switch (gun[Combo8.SelectedIndex].what)
                {
                    case 2:
                        {
                            if (Level8.SelectedIndex >= 89)
                            {
                                ammo += 12;
                                food += 6;
                            }
                            else if (Level8.SelectedIndex >= 69)
                            {
                                ammo += 10;
                                food += 5;
                            }
                            else if (Level8.SelectedIndex >= 29)
                            {
                                ammo += 8;
                                food += 4;
                            }
                            else if (Level8.SelectedIndex >= 9)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else
                            {
                                ammo += 4;
                                food += 2;
                            }
                            break;
                        }
                    case 3:
                        {
                            if (Level8.SelectedIndex >= 89)
                            {
                                ammo += 17;
                                food += 6;
                            }
                            else if (Level8.SelectedIndex >= 69)
                            {
                                ammo += 14;
                                food += 5;
                            }
                            else if (Level8.SelectedIndex >= 29)
                            {
                                ammo += 11;
                                food += 4;
                            }
                            else if (Level8.SelectedIndex >= 9)
                            {
                                ammo += 8;
                                food += 3;
                            }
                            else
                            {
                                ammo += 5;
                                food += 2;
                            }
                            break;
                        }
                    case 4:
                        {
                            if (Level8.SelectedIndex >= 89)
                            {
                                ammo += 6;
                                food += 3;
                            }
                            else if (Level8.SelectedIndex >= 69)
                            {
                                ammo += 5;
                                food += 2.5;
                            }
                            else if (Level8.SelectedIndex >= 29)
                            {
                                ammo += 4;
                                food += 2;
                            }
                            else if (Level8.SelectedIndex >= 9)
                            {
                                ammo += 3;
                                food += 1.5;
                            }
                            else
                            {
                                ammo += 2;
                                food += 1;
                            }
                            break;
                        }
                    case 5:
                        {
                            if (Level8.SelectedIndex >= 89)
                            {
                                ammo += 11;
                                food += 9;
                            }
                            else if (Level8.SelectedIndex >= 69)
                            {
                                ammo += 9;
                                food += 7.5;
                            }
                            else if (Level8.SelectedIndex >= 29)
                            {
                                ammo += 7;
                                food += 6;
                            }
                            else if (Level8.SelectedIndex >= 9)
                            {
                                ammo += 5;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 3;
                                food += 3;
                            }
                            break;
                        }
                    case 6:
                        {
                            if (Level8.SelectedIndex >= 89)
                            {
                                ammo += 28;
                                food += 9;
                            }
                            else if (Level8.SelectedIndex >= 69)
                            {
                                ammo += 23;
                                food += 7.5;
                            }
                            else if (Level8.SelectedIndex >= 29)
                            {
                                ammo += 18;
                                food += 6;
                            }
                            else if (Level8.SelectedIndex >= 9)
                            {
                                ammo += 13;
                                food += 4.5;
                            }
                            else
                            {
                                ammo += 8;
                                food += 3;
                            }
                            break;
                        }
                    case 7:
                        {
                            if (Level8.SelectedIndex >= 89)
                            {
                                ammo += 18;
                                food += 14;
                            }
                            else if (Level8.SelectedIndex >= 69)
                            {
                                ammo += 15;
                                food += 11.5;
                            }
                            else if (Level8.SelectedIndex >= 29)
                            {
                                ammo += 12;
                                food += 9;
                            }
                            else if (Level8.SelectedIndex >= 9)
                            {
                                ammo += 9;
                                food += 6.5;
                            }
                            else
                            {
                                ammo += 6;
                                food += 4;
                            }
                            break;
                        }
                    default:
                        break;
                }
            }
            waste.Content = ammo.ToString() + "弹药 " + food.ToString() + "口粮";
        }
        /// <summary>
        /// 滑块移动事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void slider_PreviewMouseUp(object sender, MouseButtonEventArgs e)
        {
            if (getattime(0) > 0 && cb0.IsChecked == true)
                if (slider.Value > skilltime[0] + getattime(0) || slider.Value < skilltime[0])
                    cb0.IsChecked = false;
            if (getattime(1) > 0 && cb1.IsChecked == true)
                if (slider.Value > skilltime[1] + getattime(1) || slider.Value < skilltime[1])
                    cb1.IsChecked = false;
            if (getattime(2) > 0 && cb2.IsChecked == true)
                if (slider.Value > skilltime[2] + getattime(2) || slider.Value < skilltime[2])
                    cb2.IsChecked = false;
            if (getattime(3) > 0 && cb3.IsChecked == true)
                if (slider.Value > skilltime[3] + getattime(3) || slider.Value < skilltime[3])
                    cb3.IsChecked = false;
            if (getattime(4) > 0 && cb4.IsChecked == true)
                if (slider.Value > skilltime[4] + getattime(4) || slider.Value < skilltime[4])
                    cb4.IsChecked = false;
            if (getattime(5) > 0 && cb5.IsChecked == true)
                if (slider.Value > skilltime[5] + getattime(5) || slider.Value < skilltime[5])
                    cb5.IsChecked = false;
            if (getattime(6) > 0 && cb6.IsChecked == true)
                if (slider.Value > skilltime[6] + getattime(6) || slider.Value < skilltime[6])
                    cb6.IsChecked = false;
            if (getattime(7) > 0 && cb7.IsChecked == true)
                if (slider.Value > skilltime[7] + getattime(7) || slider.Value < skilltime[7])
                    cb7.IsChecked = false;
            if (getattime(8) > 0 && cb8.IsChecked == true)
                if (slider.Value > skilltime[8] + getattime(8) || slider.Value < skilltime[8])
                    cb8.IsChecked = false;
            renewskill();
        }
        /// <summary>
        /// 敌方数据按钮点击事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button_Click(object sender, RoutedEventArgs e)
        {
            enemydata ed = new enemydata();
            ed.Show();
        }
        /// <summary>
        /// 计算等级属性
        /// </summary>
        /// <param name="select">该格枪娘index</param>
        /// <param name="levelselect">该格等级index</param>
        /// <param name="combo">哪一格</param>
        /// <param name="skillselect">该格技能index</param>
        private void calclevel(int select, int levelselect, int combo, int skillselect)
        {
            if (select == -1)
                return;
            if (levelselect == -1 || levelselect == 100)
                return;
            for (int i = 0; i < 9; i++)
            {
                if (gg[i].rateup < 0.7)
                {
                    gg[i].rateup = 0.7;
                }
            }
            showbuff(combo, select);
            int fairyindex = fairynamecombo.SelectedIndex;
            if (fairyindex < 0)
                fairyindex = 0;
            float[] array = arrAbilityRatio[gun[select].what];
            float num = 55f;
            float num2 = 0.555f;
            float num3 = 100f;
            double maxLife = Math.Ceiling((num + levelselect * num2) * array[0] * gun[select].ratiohp / num3);

            num = 2f;
            num2 = 0.161f;
            num3 = 100f;
            double maxarmor = Math.Ceiling((num + levelselect * num2) * array[6] * gun[select].ratioarmor / num3);


            num = 16f;
            num2 = 100f;
            double basePow = Math.Ceiling(num * array[1] * gun[select].ratiopow / num2);
            num = 0.242f;
            num2 = 100f;
            num3 = 100f;
            double maxAddPow = Math.Ceiling(levelselect * num * array[1] * gun[select].ratiopow * gun[select].eatratio / num2 / num3);
            num = 45f;
            num2 = 100f;
            double baseRate = Math.Ceiling(num * array[2] * gun[select].ratiorate / num2);
            num = 0.181f;
            num2 = 100f;
            num3 = 100f;
            double maxAddRate = Math.Ceiling(levelselect * num * array[2] * gun[select].ratiorate * gun[select].eatratio / num2 / num3);
            num = 5f;
            num2 = 100f;
            double basehit = Math.Ceiling(num * array[4] * gun[select].ratiohit / num2);
            num = 0.303f;
            num2 = 100f;
            num3 = 100f;
            double maxAddHit = Math.Ceiling(levelselect * num * array[4] * gun[select].ratiohit * gun[select].eatratio / num2 / num3);

            num = 5f;
            num2 = 100f;
            double baseDodge = Math.Ceiling(num * array[5] * gun[select].ratiododge / num2);
            num = 0.303f;
            num2 = 100f;
            num3 = 100f;
            double maxAddDodge = Math.Ceiling(levelselect * num * array[5] * gun[select].ratiododge * gun[select].eatratio / num2 / num3);
            double doublecardup = 1;
            if (gun[select].doublecard)
            {
                doublecardup = 1.2;
            }
            else
            {
                doublecardup = 1;
            }
            Soliddamage[combo] = Math.Ceiling(((Math.Ceiling((basePow + maxAddPow) * merry[combo]) + equipdamage[combo]) * (fairy[fairyindex].powbuff) * gg[combo].damageup * (skillupdamage[combo])));
            renewdamage(combo, Soliddamage[combo] * skillsolidmultiple[combo]);
            switch (combo)
            {
                case 0:
                    {
                        Lhp0.Content = maxLife;
                        //if (enemyarmor.Text == "0")
                        //    if (equipbreakarmor[0] > Int32.Parse(enemyarmor.Text))
                        //        Ldamage0.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[0]) + equipdamage[0]) * gg[0].damageup * (skillupdamage[0]) + 2)).ToString("0");
                        //    else
                        //        Ldamage0.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[0]) + equipdamage[0]) * gg[0].damageup * (skillupdamage[0]))).ToString("0");
                        //else
                        {
                            //if (equipbreakarmor[0] > Int32.Parse(enemyarmor.Text))
                            //    Ldamage0.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow ) * merry[0])+ equipdamage[0]) * gg[0].damageup * (skillupdamage[0]) + 2)).ToString("0");
                            //else
                            //    Ldamage0.Content = Math.Floor(Math.Max(((Math.Ceiling((basePow + maxAddPow ) * merry[0])+ equipdamage[0]) * gg[0].damageup * (skillupdamage[0])) / 10, (((Math.Ceiling((basePow + maxAddPow ) * merry[0])+ equipdamage[0]) * gg[0].damageup * (skillupdamage[0])) + equipbreakarmor[0] - Int32.Parse(enemyarmor.Text)))).ToString();

                            //      Ldamage0.Content = Math.Ceiling(Math.Max(1, (Math.Ceiling((basePow + maxAddPow) * merry[0]) + equipdamage[0]) * gg[0].damageup * (skillupdamage[0]) + Math.Min(2, equipbreakarmor[0] - Int32.Parse(enemyarmor.Text))));

                            Ldamage0.Content = floatdamage(basePow + maxAddPow, merry[0], equipdamage[0], gg[0].damageup * skillupdamage[0] * doublecardup * (fairy[fairyindex].powbuff), Math.Min(2, equipbreakarmor[0] - Int32.Parse(enemyarmor.Text)));
                        }
                        if (Int32.Parse(Lhp0.Content.ToString()) == 0)
                            Ldamage0.Content = 0;
                        if (equiprifledslug[0])
                            Ldamage0.Content = (Double.Parse(Ldamage0.Content.ToString()) * 3).ToString();
                        if (innight)
                            Lhit0.Content = Math.Ceiling((Math.Ceiling((basehit + maxAddHit) * merry[0]) + equiphit[0]) * (fairy[fairyindex].hitbuff) * (100 - 0.9 * (100 - equipnightsee[0])) / 100 * gg[0].hitup * (skilluphit[0])).ToString();
                        else
                            Lhit0.Content = Math.Ceiling(((Math.Ceiling((basehit + maxAddHit) * merry[0]) + equiphit[0]) * (fairy[fairyindex].hitbuff) * gg[0].hitup * (skilluphit[0]))).ToString("0");
                        Console.WriteLine(basehit + " " + maxAddHit + " " + merry[0] + " " + equiphit[0] + " " + fairy[fairyindex].hitbuff + " " + gg[0].hitup + " " + skilluphit[0]);

                        Image0.Source = new BitmapImage(new Uri(@gun[select].image, UriKind.Relative));
                        string tbt = "";
                        if (gg[0].damageup != 1)
                            tbt += "伤害+" + Math.Floor(dedouble((gg[0].damageup - 1) * 100)).ToString("0") + "% ";
                        if (gg[0].shotspeedup != 1)
                            tbt += "射速+" + Math.Floor(dedouble((gg[0].shotspeedup - 1) * 100)).ToString("0") + "% ";
                        if (gg[0].hitup != 1)
                            tbt += "命中+" + Math.Floor(dedouble((gg[0].hitup - 1) * 100)).ToString("0") + "% ";
                        if (gg[0].dodgeup != 1)
                            tbt += "回避+" + Math.Floor(dedouble((gg[0].dodgeup - 1) * 100)).ToString("0") + "% ";
                        if (gg[0].critup != 1)
                            tbt += "暴击率+" + Math.Floor(dedouble((gg[0].critup - 1) * 100)).ToString("0") + "% ";
                        if (gg[0].rateup != 1)
                            tbt += "冷却-" + Math.Floor(dedouble((1 - gg[0].rateup) * 100)).ToString("0") + "% ";
                        if (gg[0].armorup != 1)
                            tbt += "护甲+" + Math.Floor(dedouble((gg[0].armorup - 1) * 100)).ToString("0") + "% ";
                        if (tbt == "")
                            tbt = "无";
                        tb0.Text = tbt;
                        Lcritharm0.Content = Math.Ceiling((1 + (0.5 + equipcritharm[0]) * (fairy[fairyindex].critharmbuff)) * 100).ToString() + "%";
                        Larmor0.Content = Math.Ceiling(((maxarmor + equiparmor[0]) * doublecardup * (fairy[fairyindex].armorbuff) * gg[0].armorup * skilluparmor[0])).ToString("0");
                        if (gun[select].belt == 0 && (baseRate + maxAddRate + equipshotspeed[0]) * gg[0].shotspeedup * (skillupshotspeed[0]) > 120)
                            Lshotspeed0.Content = 120;
                        else if (gun[select].what == 7 && (baseRate + maxAddRate + equipshotspeed[0]) * gg[0].shotspeedup * (skillupshotspeed[0]) > 60)
                            Lshotspeed0.Content = 60;
                        else
                            Lshotspeed0.Content = Math.Ceiling(((baseRate + maxAddRate + equipshotspeed[0]) * gg[0].shotspeedup * (skillupshotspeed[0]))).ToString("0");
                        if (Double.Parse(Lshotspeed0.Content.ToString()) < 15)
                            Lshotspeed0.Content = 15;
                        if (Double.Parse(Lhit0.Content.ToString()) < 1)
                            Lhit0.Content = 1;
                        //calcprobabiliy(0, select, skillselect);
                        if (gun[select].cd * gg[0].rateup < 8)
                            Ltime0.Content = 8;
                        else
                            Ltime0.Content = (gun[select].cd * gg[0].rateup).ToString("0.00");
                        if (!string.IsNullOrEmpty(gun[select].startcd))
                            Lontime0.Content = (Double.Parse(gun[select].startcd) * gg[0].rateup).ToString("0.00");
                        Lbreakarmor0.Content = equipbreakarmor[0];
                        double crit = 0;
                        if (isfullcrit[0])
                            crit = 1;
                        else
                            crit = (gun[select].crit + equipcrit[0]) * gg[0].critup * skillupcrit[0];
                        if (crit > 1)
                            crit = 1;
                        Lcrit0.Content = (crit * 100).ToString("0") + "%";
                        Ldodge0.Content = Math.Ceiling(((Math.Ceiling((baseDodge + maxAddDodge) * merry[0]) + equipdodge[0]) * doublecardup * (fairy[fairyindex].dodgebuff) * gg[0].dodgeup * (skillupdodge[0]))).ToString("0");
                        //      Console.WriteLine(baseDodge + " " + maxAddDodge + " " + merry[0] + " " + equipdodge[0] + " " + fairy[fairyindex].dodgebuff + " " + gg[0].dodgeup + " " + skillupdodge[0]);
                        Lbelt0.Content = gun[select].belt + equipbelt[0] + skillupbelt[0];
                        nowdodge.Content = (Double.Parse(enemydodge.Text) * skilldowndodge).ToString("0");
                        Lindex0.Content = Index(Double.Parse(Lshotspeed0.Content.ToString()), Double.Parse(Ldamage0.Content.ToString()), crit, Double.Parse(nowdodge.Content.ToString()), Double.Parse(Lhit0.Content.ToString()), double.Parse(Lbelt0.Content.ToString()) - skillupbelt[0], 0, skilldamageagain[0]).ToString("0.00");
                        allindex.Content = (Double.Parse(Lindex0.Content.ToString()) + Double.Parse(Lindex1.Content.ToString()) + Double.Parse(Lindex2.Content.ToString()) + Double.Parse(Lindex3.Content.ToString()) + Double.Parse(Lindex4.Content.ToString()) + Double.Parse(Lindex5.Content.ToString()) + Double.Parse(Lindex6.Content.ToString()) + Double.Parse(Lindex7.Content.ToString()) + Double.Parse(Lindex8.Content.ToString())).ToString("0.00");
                        if (rb0.IsChecked == true)
                            calctank(0);
                        if (rbf0.IsChecked == true)
                            calcftank(0);
                        break;
                    }
                case 1:
                    {
                        Lhp1.Content = maxLife;
                        //if (enemyarmor.Text == "0")
                        //    if (equipbreakarmor[1] > 0)
                        //        Ldamage1.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[1]) + equipdamage[1]) * gg[1].damageup * (skillupdamage[1]) + 2)).ToString("0");
                        //    else
                        //        Ldamage1.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[1]) + equipdamage[1]) * gg[1].damageup * (skillupdamage[1]))).ToString("0");
                        //else
                        {
                            //    if (equipbreakarmor[1] > Int32.Parse(enemyarmor.Text))
                            //        Ldamage1.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow ) * merry[1])+ equipdamage[1]) * gg[1].damageup * (skillupdamage[1]) + 2)).ToString("0");
                            //    else
                            //        Ldamage1.Content = Math.Floor(Math.Max(((Math.Ceiling((basePow + maxAddPow ) * merry[1])+ equipdamage[1]) * gg[1].damageup * (skillupdamage[1])) / 10, (((Math.Ceiling((basePow + maxAddPow ) * merry[1])+ equipdamage[1]) * gg[1].damageup * (skillupdamage[1])) + equipbreakarmor[1] - Int32.Parse(enemyarmor.Text)))).ToString();
                            //     Ldamage1.Content = Math.Ceiling(Math.Max(1, (Math.Ceiling((basePow + maxAddPow) * merry[1]) + equipdamage[1]) * gg[1].damageup * (skillupdamage[1]) + Math.Min(2, equipbreakarmor[1] - Int32.Parse(enemyarmor.Text))));
                            Ldamage1.Content = floatdamage(basePow + maxAddPow, merry[1], equipdamage[1], gg[1].damageup * doublecardup * (fairy[fairyindex].powbuff) * skillupdamage[1], Math.Min(2, equipbreakarmor[1] - Int32.Parse(enemyarmor.Text)));

                        }
                        if (Int32.Parse(Lhp1.Content.ToString()) == 0)
                            Ldamage1.Content = 0;
                        if (equiprifledslug[1])
                            Ldamage1.Content = (Double.Parse(Ldamage1.Content.ToString()) * 3).ToString();

                        if (innight)
                            Lhit1.Content = Math.Ceiling((Math.Ceiling((basehit + maxAddHit) * merry[1]) + equiphit[1]) * (fairy[fairyindex].hitbuff) * (100 - 0.9 * (100 - equipnightsee[1])) / 100 * gg[1].hitup * (skilluphit[1])).ToString();
                        else
                            Lhit1.Content = Math.Ceiling(((Math.Ceiling((basehit + maxAddHit) * merry[1]) + equiphit[1]) * (fairy[fairyindex].hitbuff) * gg[1].hitup * (skilluphit[1]))).ToString("0");


                        Image1.Source = new BitmapImage(new Uri(@gun[select].image, UriKind.Relative));
                        string tbt = "";
                        if (gg[1].damageup != 1)
                            tbt += "伤害+" + Math.Floor(dedouble((gg[1].damageup - 1) * 100)).ToString("0") + "% ";
                        if (gg[1].shotspeedup != 1)
                            tbt += "射速+" + Math.Floor(dedouble((gg[1].shotspeedup - 1) * 100)).ToString("0") + "% ";
                        if (gg[1].hitup != 1)
                            tbt += "命中+" + Math.Floor(dedouble((gg[1].hitup - 1) * 100)).ToString("0") + "% ";
                        if (gg[1].dodgeup != 1)
                            tbt += "回避+" + Math.Floor(dedouble((gg[1].dodgeup - 1) * 100)).ToString("0") + "% ";
                        if (gg[1].critup != 1)
                            tbt += "暴击率+" + Math.Floor(dedouble((gg[1].critup - 1) * 100)).ToString("0") + "% ";
                        if (gg[1].rateup != 1)
                            tbt += "冷却-" + Math.Floor(dedouble((1 - gg[1].rateup) * 100)).ToString("0") + "% ";
                        if (gg[1].armorup != 1)
                            tbt += "护甲+" + Math.Floor(dedouble((gg[1].armorup - 1) * 100)).ToString("0") + "% ";
                        if (tbt == "")
                            tbt = "无";
                        tb1.Text = tbt;
                        Lcritharm1.Content = Math.Ceiling((1 + (0.5 + equipcritharm[1]) * (fairy[fairyindex].critharmbuff)) * 100).ToString() + "%";
                        Larmor1.Content = Math.Ceiling(((maxarmor + equiparmor[1]) * doublecardup * (fairy[fairyindex].armorbuff) * gg[1].armorup * skilluparmor[1])).ToString("0");
                        if (gun[select].belt == 0 && (baseRate + maxAddRate + equipshotspeed[1]) * gg[1].shotspeedup * (skillupshotspeed[1]) > 120)
                            Lshotspeed1.Content = 120;
                        else if (gun[select].what == 7 && (baseRate + maxAddRate + equipshotspeed[1]) * gg[1].shotspeedup * (skillupshotspeed[1]) > 60)
                            Lshotspeed1.Content = 60;
                        else
                            Lshotspeed1.Content = Math.Ceiling(((baseRate + maxAddRate + equipshotspeed[1]) * gg[1].shotspeedup * (skillupshotspeed[1]))).ToString("0");
                        if (Double.Parse(Lshotspeed1.Content.ToString()) < 15)
                            Lshotspeed1.Content = 15;
                        if (Double.Parse(Lhit1.Content.ToString()) < 1)
                            Lhit1.Content = 1;
                        if (gun[select].cd * gg[1].rateup < 8)
                            Ltime1.Content = 8;
                        else
                            Ltime1.Content = (gun[select].cd * gg[1].rateup).ToString("0.00");
                        if (!string.IsNullOrEmpty(gun[select].startcd))
                            Lontime1.Content = (Double.Parse(gun[select].startcd) * gg[1].rateup).ToString("0.00");
                        Lbreakarmor1.Content = equipbreakarmor[1];
                        double crit = 0;
                        if (isfullcrit[1])
                            crit = 1;
                        else
                            crit = (gun[select].crit + equipcrit[1]) * gg[1].critup * skillupcrit[1];
                        if (crit > 1)
                            crit = 1;
                        Lcrit1.Content = (crit * 100).ToString("0") + "%";
                        Ldodge1.Content = Math.Ceiling(((Math.Ceiling((baseDodge + maxAddDodge) * merry[1]) + equipdodge[1]) * doublecardup * (fairy[fairyindex].dodgebuff) * gg[1].dodgeup * (skillupdodge[1]))).ToString("0");
                        Lbelt1.Content = gun[select].belt + equipbelt[1] + skillupbelt[1];
                        nowdodge.Content = (Double.Parse(enemydodge.Text) * skilldowndodge).ToString("0");
                        Lindex1.Content = Index(Double.Parse(Lshotspeed1.Content.ToString()), Double.Parse(Ldamage1.Content.ToString()), crit, Double.Parse(nowdodge.Content.ToString()), Double.Parse(Lhit1.Content.ToString()), double.Parse(Lbelt1.Content.ToString()) - skillupbelt[1], 1, skilldamageagain[1]).ToString("0.00");
                        allindex.Content = (Double.Parse(Lindex0.Content.ToString()) + Double.Parse(Lindex1.Content.ToString()) + Double.Parse(Lindex2.Content.ToString()) + Double.Parse(Lindex3.Content.ToString()) + Double.Parse(Lindex4.Content.ToString()) + Double.Parse(Lindex5.Content.ToString()) + Double.Parse(Lindex6.Content.ToString()) + Double.Parse(Lindex7.Content.ToString()) + Double.Parse(Lindex8.Content.ToString())).ToString("0.00");
                        if (rb1.IsChecked == true)
                            calctank(1);
                        if (rbf1.IsChecked == true)
                            calcftank(1);
                        break;
                    }
                case 2:
                    {
                        Lhp2.Content = maxLife;
                        //if (enemyarmor.Text == "0")
                        //    if (equipbreakarmor[2] > 0)
                        //        Ldamage2.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[2]) + equipdamage[2]) * gg[2].damageup * (skillupdamage[2]) + 2)).ToString("0");
                        //    else
                        //        Ldamage2.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[2]) + equipdamage[2]) * gg[2].damageup * (skillupdamage[2]))).ToString("0");
                        //else
                        {
                            //    if (equipbreakarmor[2] > Int32.Parse(enemyarmor.Text))
                            //        Ldamage2.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow ) * merry[2])+ equipdamage[2]) * gg[2].damageup * (skillupdamage[2]) + 2)).ToString("0");
                            //    else
                            //        Ldamage2.Content = Math.Floor(Math.Max(((Math.Ceiling((basePow + maxAddPow ) * merry[2])+ equipdamage[2]) * gg[2].damageup * (skillupdamage[2])) / 10, ((((Math.Ceiling(basePow + maxAddPow ) * merry[2])+ equipdamage[2]) * gg[2].damageup * (skillupdamage[2])) + equipbreakarmor[2] - Int32.Parse(enemyarmor.Text)))).ToString();
                            //     Ldamage2.Content = Math.Ceiling(Math.Max(1, (Math.Ceiling((basePow + maxAddPow) * merry[2]) + equipdamage[2]) * gg[2].damageup * (skillupdamage[2]) + Math.Min(2, equipbreakarmor[2] - Int32.Parse(enemyarmor.Text))));
                            Ldamage2.Content = floatdamage(basePow + maxAddPow, merry[2], equipdamage[2], gg[2].damageup * doublecardup * (fairy[fairyindex].powbuff) * skillupdamage[2], Math.Min(2, equipbreakarmor[2] - Int32.Parse(enemyarmor.Text)));

                        }
                        if (Int32.Parse(Lhp2.Content.ToString()) == 0)
                            Ldamage2.Content = 0;
                        if (equiprifledslug[2])
                            Ldamage2.Content = (Double.Parse(Ldamage2.Content.ToString()) * 3).ToString();

                        if (innight)
                            Lhit2.Content = Math.Ceiling((Math.Ceiling((basehit + maxAddHit) * merry[2]) + equiphit[2]) * (100 - 0.9 * (100 - equipnightsee[2])) / 100 * (fairy[fairyindex].hitbuff) * gg[2].hitup * (skilluphit[2])).ToString();
                        else
                            Lhit2.Content = Math.Ceiling(((Math.Ceiling((basehit + maxAddHit) * merry[2]) + equiphit[2]) * (fairy[fairyindex].hitbuff) * gg[2].hitup * (skilluphit[2]))).ToString("0");
                        Image2.Source = new BitmapImage(new Uri(@gun[select].image, UriKind.Relative));
                        string tbt = "";
                        if (gg[2].damageup != 1)
                            tbt += "伤害+" + Math.Floor(dedouble((gg[2].damageup - 1) * 100)).ToString("0") + "% ";
                        if (gg[2].shotspeedup != 1)
                            tbt += "射速+" + Math.Floor(dedouble((gg[2].shotspeedup - 1) * 100)).ToString("0") + "% ";
                        if (gg[2].hitup != 1)
                            tbt += "命中+" + Math.Floor(dedouble((gg[2].hitup - 1) * 100)).ToString("0") + "% ";
                        if (gg[2].dodgeup != 1)
                            tbt += "回避+" + Math.Floor(dedouble((gg[2].dodgeup - 1) * 100)).ToString("0") + "% ";
                        if (gg[2].critup != 1)
                            tbt += "暴击率+" + Math.Floor(dedouble((gg[2].critup - 1) * 100)).ToString("0") + "% ";
                        if (gg[2].rateup != 1)
                            tbt += "冷却-" + Math.Floor(dedouble((1 - gg[2].rateup) * 100)).ToString("0") + "% ";
                        if (gg[2].armorup != 1)
                            tbt += "护甲+" + Math.Floor(dedouble((gg[2].armorup - 1) * 100)).ToString("0") + "% ";
                        if (tbt == "")
                            tbt = "无";
                        tb2.Text = tbt;
                        Lcritharm2.Content = Math.Ceiling((1 + (0.5 + equipcritharm[2]) * (fairy[fairyindex].critharmbuff)) * 100).ToString() + "%";
                        Larmor2.Content = Math.Ceiling(((maxarmor + equiparmor[2]) * gg[2].armorup * doublecardup * (fairy[fairyindex].armorbuff) * skilluparmor[2])).ToString("0");
                        if (gun[select].belt == 0 && (baseRate + maxAddRate + equipshotspeed[2]) * gg[2].shotspeedup * (skillupshotspeed[2]) > 120)
                            Lshotspeed2.Content = 120;
                        else if (gun[select].what == 7 && (baseRate + maxAddRate + equipshotspeed[2]) * gg[2].shotspeedup * (skillupshotspeed[2]) > 60)
                            Lshotspeed2.Content = 60;
                        else
                            Lshotspeed2.Content = Math.Ceiling(((baseRate + maxAddRate + equipshotspeed[2]) * gg[2].shotspeedup * (skillupshotspeed[2]))).ToString("0");
                        if (Double.Parse(Lshotspeed2.Content.ToString()) < 15)
                            Lshotspeed2.Content = 15;
                        if (Double.Parse(Lhit2.Content.ToString()) < 1)
                            Lhit2.Content = 1;
                        if (gun[select].cd * gg[2].rateup < 8)
                            Ltime2.Content = 8;
                        else
                            Ltime2.Content = (gun[select].cd * gg[2].rateup).ToString("0.00");
                        if (!string.IsNullOrEmpty(gun[select].startcd))
                            Lontime2.Content = (Double.Parse(gun[select].startcd) * gg[2].rateup).ToString("0.00");
                        Lbreakarmor2.Content = equipbreakarmor[2];
                        double crit = 0;
                        if (isfullcrit[2])
                            crit = 1;
                        else
                            crit = (gun[select].crit + equipcrit[2]) * gg[2].critup * skillupcrit[2];
                        if (crit > 1)
                            crit = 1;
                        Lcrit2.Content = (crit * 100).ToString("0") + "%";
                        Ldodge2.Content = Math.Ceiling(((Math.Ceiling((baseDodge + maxAddDodge) * merry[2]) + equipdodge[2]) * doublecardup * (fairy[fairyindex].dodgebuff) * gg[2].dodgeup * (skillupdodge[2]))).ToString("0");
                        Lbelt2.Content = gun[select].belt + equipbelt[2] + skillupbelt[2];
                        nowdodge.Content = (Double.Parse(enemydodge.Text) * skilldowndodge).ToString("0");
                        Lindex2.Content = Index(Double.Parse(Lshotspeed2.Content.ToString()), Double.Parse(Ldamage2.Content.ToString()), crit, Double.Parse(nowdodge.Content.ToString()), Double.Parse(Lhit2.Content.ToString()), double.Parse(Lbelt2.Content.ToString()) - skillupbelt[2], 2, skilldamageagain[2]).ToString("0.00");
                        allindex.Content = (Double.Parse(Lindex0.Content.ToString()) + Double.Parse(Lindex1.Content.ToString()) + Double.Parse(Lindex2.Content.ToString()) + Double.Parse(Lindex3.Content.ToString()) + Double.Parse(Lindex4.Content.ToString()) + Double.Parse(Lindex5.Content.ToString()) + Double.Parse(Lindex6.Content.ToString()) + Double.Parse(Lindex7.Content.ToString()) + Double.Parse(Lindex8.Content.ToString())).ToString("0.00");
                        if (rb2.IsChecked == true)
                            calctank(2);
                        if (rbf2.IsChecked == true)
                            calcftank(2);
                        break;
                    }
                case 3:
                    {
                        Lhp3.Content = maxLife;
                        //if (enemyarmor.Text == "0")
                        //    if (equipbreakarmor[3] > 0)
                        //        Ldamage3.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[3]) + equipdamage[3]) * gg[3].damageup * (skillupdamage[3]) + 2)).ToString("0");
                        //    else
                        //        Ldamage3.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[3]) + equipdamage[3]) * gg[3].damageup * (skillupdamage[3]))).ToString("0");
                        //else
                        {
                            //if (equipbreakarmor[3] > Int32.Parse(enemyarmor.Text))
                            //    Ldamage3.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow ) * merry[3])+ equipdamage[3]) * gg[3].damageup * (skillupdamage[3]) + 2)).ToString("0");
                            //else
                            //    Ldamage3.Content = Math.Floor(Math.Max(((Math.Ceiling((basePow + maxAddPow ) * merry[3])+ equipdamage[3]) * gg[3].damageup * (skillupdamage[3])) / 10, (((Math.Ceiling((basePow + maxAddPow ) * merry[3])+ equipdamage[3]) * gg[3].damageup * (skillupdamage[3])) + equipbreakarmor[3] - Int32.Parse(enemyarmor.Text)))).ToString();
                            //         Ldamage3.Content = Math.Ceiling(Math.Max(1, (Math.Ceiling((basePow + maxAddPow) * merry[3]) + equipdamage[3]) * gg[3].damageup * (skillupdamage[3]) + Math.Min(2, equipbreakarmor[3] - Int32.Parse(enemyarmor.Text))));
                            Ldamage3.Content = floatdamage(basePow + maxAddPow, merry[3], equipdamage[3], gg[3].damageup * doublecardup * (fairy[fairyindex].powbuff) * skillupdamage[3], Math.Min(2, equipbreakarmor[3] - Int32.Parse(enemyarmor.Text)));

                        }
                        if (Int32.Parse(Lhp3.Content.ToString()) == 0)
                            Ldamage3.Content = 0;
                        if (equiprifledslug[3])
                            Ldamage3.Content = (Double.Parse(Ldamage3.Content.ToString()) * 3).ToString();

                        if (innight)
                            Lhit3.Content = Math.Ceiling((Math.Ceiling((basehit + maxAddHit) * merry[3]) + equiphit[3]) * (fairy[fairyindex].hitbuff) * (100 - 0.9 * (100 - equipnightsee[3])) / 100 * gg[3].hitup * (skilluphit[3])).ToString();
                        else
                            Lhit3.Content = Math.Ceiling(((Math.Ceiling((basehit + maxAddHit) * merry[3]) + equiphit[3]) * (fairy[fairyindex].hitbuff) * gg[3].hitup * (skilluphit[3]))).ToString("0");
                        Image3.Source = new BitmapImage(new Uri(@gun[select].image, UriKind.Relative));
                        string tbt = "";
                        if (gg[3].damageup != 1)
                            tbt += "伤害+" + Math.Floor(dedouble((gg[3].damageup - 1) * 100)).ToString("0") + "% ";
                        if (gg[3].shotspeedup != 1)
                            tbt += "射速+" + Math.Floor(dedouble((gg[3].shotspeedup - 1) * 100)).ToString("0") + "% ";
                        if (gg[3].hitup != 1)
                            tbt += "命中+" + Math.Floor(dedouble((gg[3].hitup - 1) * 100)).ToString("0") + "% ";
                        if (gg[3].dodgeup != 1)
                            tbt += "回避+" + Math.Floor(dedouble((gg[3].dodgeup - 1) * 100)).ToString("0") + "% ";
                        if (gg[3].critup != 1)
                            tbt += "暴击率+" + Math.Floor(dedouble((gg[3].critup - 1) * 100)).ToString("0") + "% ";
                        if (gg[3].rateup != 1)
                            tbt += "冷却-" + Math.Floor(dedouble((1 - gg[3].rateup) * 100)).ToString("0") + "% ";
                        if (gg[3].armorup != 1)
                            tbt += "护甲+" + Math.Floor(dedouble((gg[3].armorup - 1) * 100)).ToString("0") + "% ";
                        if (tbt == "")
                            tbt = "无";
                        tb3.Text = tbt;
                        Lcritharm3.Content = Math.Ceiling((1 + (0.5 + equipcritharm[3]) * (fairy[fairyindex].critharmbuff)) * 100).ToString() + "%";
                        Larmor3.Content = Math.Ceiling(((maxarmor + equiparmor[3]) * doublecardup * (fairy[fairyindex].armorbuff) * gg[3].armorup * skilluparmor[3])).ToString("0");
                        if (gun[select].belt == 0 && (baseRate + maxAddRate + equipshotspeed[3]) * gg[3].shotspeedup * (skillupshotspeed[3]) > 120)
                            Lshotspeed3.Content = 120;
                        else if (gun[select].what == 7 && (baseRate + maxAddRate + equipshotspeed[3]) * gg[3].shotspeedup * (skillupshotspeed[3]) > 60)
                            Lshotspeed3.Content = 60;
                        else
                            Lshotspeed3.Content = Math.Ceiling(((baseRate + maxAddRate + equipshotspeed[3]) * gg[3].shotspeedup * (skillupshotspeed[3]))).ToString("0");
                        if (Double.Parse(Lshotspeed3.Content.ToString()) < 15)
                            Lshotspeed3.Content = 15;
                        if (Double.Parse(Lhit3.Content.ToString()) < 1)
                            Lhit3.Content = 1;
                        if (gun[select].cd * gg[3].rateup < 8)
                            Ltime3.Content = 8;
                        else
                            Ltime3.Content = (gun[select].cd * gg[3].rateup).ToString("0.00");
                        if (!string.IsNullOrEmpty(gun[select].startcd))
                            Lontime3.Content = (Double.Parse(gun[select].startcd) * gg[3].rateup).ToString("0.00");
                        Lbreakarmor3.Content = equipbreakarmor[3];
                        double crit = 0;
                        if (isfullcrit[3])
                            crit = 1;
                        else
                            crit = (gun[select].crit + equipcrit[3]) * gg[3].critup * skillupcrit[3];
                        if (crit > 1)
                            crit = 1;
                        Lcrit3.Content = (crit * 100).ToString("0") + "%";
                        Ldodge3.Content = Math.Ceiling(((Math.Ceiling((baseDodge + maxAddDodge) * merry[3]) + equipdodge[3]) * doublecardup * (fairy[fairyindex].dodgebuff) * gg[3].dodgeup * (skillupdodge[3]))).ToString("0");
                        Lbelt3.Content = gun[select].belt + equipbelt[3] + skillupbelt[3];
                        nowdodge.Content = (Double.Parse(enemydodge.Text) * skilldowndodge).ToString("0");
                        Lindex3.Content = Index(Double.Parse(Lshotspeed3.Content.ToString()), Double.Parse(Ldamage3.Content.ToString()), crit, Double.Parse(nowdodge.Content.ToString()), Double.Parse(Lhit3.Content.ToString()), double.Parse(Lbelt3.Content.ToString()) - skillupbelt[3], 3, skilldamageagain[3]).ToString("0.00");
                        allindex.Content = (Double.Parse(Lindex0.Content.ToString()) + Double.Parse(Lindex1.Content.ToString()) + Double.Parse(Lindex2.Content.ToString()) + Double.Parse(Lindex3.Content.ToString()) + Double.Parse(Lindex4.Content.ToString()) + Double.Parse(Lindex5.Content.ToString()) + Double.Parse(Lindex6.Content.ToString()) + Double.Parse(Lindex7.Content.ToString()) + Double.Parse(Lindex8.Content.ToString())).ToString("0.00");
                        if (rb3.IsChecked == true)
                            calctank(3);
                        if (rbf3.IsChecked == true)
                            calcftank(3);
                        break;
                    }
                case 4:
                    {
                        Lhp4.Content = maxLife;
                        //if (enemyarmor.Text == "0")
                        //    if (equipbreakarmor[4] > 0)
                        //        Ldamage4.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[4]) + equipdamage[4]) * gg[4].damageup * (skillupdamage[4]) + 2)).ToString("0");
                        //    else
                        //        Ldamage4.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[4]) + equipdamage[4]) * gg[4].damageup * (skillupdamage[4]))).ToString("0");
                        //else
                        {
                            //    if (equipbreakarmor[4] > Int32.Parse(enemyarmor.Text))
                            //        Ldamage4.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow ) * merry[4])+ equipdamage[4]) * gg[4].damageup * (skillupdamage[4]) + 2)).ToString("0");
                            //    else
                            //        Ldamage4.Content = Math.Floor(Math.Max(((Math.Ceiling((basePow + maxAddPow ) * merry[4])+ equipdamage[4]) * gg[4].damageup * (skillupdamage[4])) / 10, (((Math.Ceiling(basePow + maxAddPow ) * merry[4]+ equipdamage[4]) * gg[4].damageup * (skillupdamage[4])) + equipbreakarmor[4] - Int32.Parse(enemyarmor.Text)))).ToString();
                            //    Ldamage4.Content = Math.Ceiling(Math.Max(1, (Math.Ceiling((basePow + maxAddPow) * merry[4]) + equipdamage[4]) * gg[4].damageup * (skillupdamage[4]) + Math.Min(2, equipbreakarmor[4] - Int32.Parse(enemyarmor.Text))));
                            Ldamage4.Content = floatdamage(basePow + maxAddPow, merry[4], equipdamage[4], gg[4].damageup * doublecardup * (fairy[fairyindex].powbuff) * skillupdamage[4], Math.Min(2, equipbreakarmor[4] - Int32.Parse(enemyarmor.Text)));

                        }
                        if (Int32.Parse(Lhp4.Content.ToString()) == 0)
                            Ldamage4.Content = 0;
                        if (equiprifledslug[4])
                            Ldamage4.Content = (Double.Parse(Ldamage4.Content.ToString()) * 3).ToString();

                        if (innight)
                            Lhit4.Content = Math.Ceiling((Math.Ceiling((basehit + maxAddHit) * merry[4]) + equiphit[4]) * (fairy[fairyindex].hitbuff) * (100 - 0.9 * (100 - equipnightsee[4])) / 100 * gg[4].hitup * (skilluphit[4])).ToString();
                        else
                            Lhit4.Content = Math.Ceiling(((Math.Ceiling((basehit + maxAddHit) * merry[4]) + equiphit[4]) * (fairy[fairyindex].hitbuff) * gg[4].hitup * (skilluphit[4]))).ToString("0");
                        Image4.Source = new BitmapImage(new Uri(@gun[select].image, UriKind.Relative));
                        string tbt = "";
                        if (gg[4].damageup != 1)
                            tbt += "伤害+" + Math.Floor(dedouble((gg[4].damageup - 1) * 100)).ToString("0") + "% ";
                        if (gg[4].shotspeedup != 1)
                            tbt += "射速+" + Math.Floor(dedouble((gg[4].shotspeedup - 1) * 100)).ToString("0") + "% ";
                        if (gg[4].hitup != 1)
                            tbt += "命中+" + Math.Floor(dedouble((gg[4].hitup - 1) * 100)).ToString("0") + "% ";
                        if (gg[4].dodgeup != 1)
                            tbt += "回避+" + Math.Floor(dedouble((gg[4].dodgeup - 1) * 100)).ToString("0") + "% ";
                        if (gg[4].critup != 1)
                            tbt += "暴击率+" + Math.Floor(dedouble((gg[4].critup - 1) * 100)).ToString("0") + "% ";
                        if (gg[4].rateup != 1)
                            tbt += "冷却-" + Math.Floor(dedouble((1 - gg[4].rateup) * 100)).ToString("0") + "% ";
                        if (gg[4].armorup != 1)
                            tbt += "护甲+" + Math.Floor(dedouble((gg[4].armorup - 1) * 100)).ToString("0") + "% ";
                        if (tbt == "")
                            tbt = "无";
                        tb4.Text = tbt;
                        Lcritharm4.Content = Math.Ceiling((1 + (0.5 + equipcritharm[4]) * (fairy[fairyindex].critharmbuff)) * 100).ToString() + "%";
                        Larmor4.Content = Math.Ceiling(((maxarmor + equiparmor[4]) * gg[4].armorup * doublecardup * (fairy[fairyindex].armorbuff) * skilluparmor[4])).ToString("0");
                        if (gun[select].belt == 0 && (baseRate + maxAddRate + equipshotspeed[4]) * gg[4].shotspeedup * (skillupshotspeed[4]) > 120)
                            Lshotspeed4.Content = 120;
                        else if (gun[select].what == 7 && (baseRate + maxAddRate + equipshotspeed[4]) * gg[4].shotspeedup * (skillupshotspeed[4]) > 60)
                            Lshotspeed4.Content = 60;
                        else
                            Lshotspeed4.Content = Math.Ceiling(((baseRate + maxAddRate + equipshotspeed[4]) * gg[4].shotspeedup * (skillupshotspeed[4]))).ToString("0");
                        if (Double.Parse(Lshotspeed4.Content.ToString()) < 15)
                            Lshotspeed4.Content = 15;
                        if (Double.Parse(Lhit4.Content.ToString()) < 1)
                            Lhit4.Content = 1;
                        if (gun[select].cd * gg[4].rateup < 8)
                            Ltime4.Content = 8;
                        else
                            Ltime4.Content = (gun[select].cd * gg[4].rateup).ToString("0.00");
                        if (!string.IsNullOrEmpty(gun[select].startcd))
                            Lontime4.Content = (Double.Parse(gun[select].startcd) * gg[4].rateup).ToString("0.00");
                        Lbreakarmor4.Content = equipbreakarmor[4];
                        double crit = 0;
                        if (isfullcrit[4])
                            crit = 1;
                        else
                            crit = (gun[select].crit + equipcrit[4]) * gg[4].critup * skillupcrit[4];
                        if (crit > 1)
                            crit = 1;
                        Lcrit4.Content = (crit * 100).ToString("0") + "%";
                        Ldodge4.Content = Math.Ceiling(((Math.Ceiling((baseDodge + maxAddDodge) * merry[4]) + equipdodge[4]) * doublecardup * (fairy[fairyindex].dodgebuff) * gg[4].dodgeup * (skillupdodge[4]))).ToString("0");
                        Lbelt4.Content = gun[select].belt + equipbelt[4] + skillupbelt[4];
                        nowdodge.Content = (Double.Parse(enemydodge.Text) * skilldowndodge).ToString("0");
                        Lindex4.Content = Index(Double.Parse(Lshotspeed4.Content.ToString()), Double.Parse(Ldamage4.Content.ToString()), crit, Double.Parse(nowdodge.Content.ToString()), Double.Parse(Lhit4.Content.ToString()), double.Parse(Lbelt4.Content.ToString()) - skillupbelt[4], 4, skilldamageagain[4]).ToString("0.00");
                        allindex.Content = (Double.Parse(Lindex0.Content.ToString()) + Double.Parse(Lindex1.Content.ToString()) + Double.Parse(Lindex2.Content.ToString()) + Double.Parse(Lindex3.Content.ToString()) + Double.Parse(Lindex4.Content.ToString()) + Double.Parse(Lindex5.Content.ToString()) + Double.Parse(Lindex6.Content.ToString()) + Double.Parse(Lindex7.Content.ToString()) + Double.Parse(Lindex8.Content.ToString())).ToString("0.00");
                        if (rb4.IsChecked == true)
                            calctank(4);
                        if (rbf4.IsChecked == true)
                            calcftank(4);
                        break;
                    }
                case 5:
                    {
                        Lhp5.Content = maxLife;
                        //if (enemyarmor.Text == "0")
                        //    if (equipbreakarmor[5] > 0)
                        //        Ldamage5.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[5]) + equipdamage[5]) * gg[5].damageup * (skillupdamage[5]) + 2)).ToString("0");
                        //    else
                        //        Ldamage5.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[5]) + equipdamage[5]) * gg[5].damageup * (skillupdamage[5]))).ToString("0");
                        //else
                        {
                            //if (equipbreakarmor[5] > Int32.Parse(enemyarmor.Text))
                            //    Ldamage5.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow ) * merry[5])+ equipdamage[5]) * gg[5].damageup * (skillupdamage[5]) + 2)).ToString("0");
                            //else
                            //    Ldamage5.Content = Math.Floor(Math.Max(((Math.Ceiling((basePow + maxAddPow ) * merry[5])+ equipdamage[5]) * gg[5].damageup * (skillupdamage[5])) / 10, (((Math.Ceiling(basePow + maxAddPow ) * merry[5]+ equipdamage[5]) * gg[5].damageup * (skillupdamage[5])) + equipbreakarmor[5] - Int32.Parse(enemyarmor.Text)))).ToString();
                            // Ldamage5.Content = Math.Ceiling(Math.Max(1, (Math.Ceiling((basePow + maxAddPow) * merry[5]) + equipdamage[5]) * gg[5].damageup * (skillupdamage[5]) + Math.Min(2, equipbreakarmor[5] - Int32.Parse(enemyarmor.Text))));
                            Ldamage5.Content = floatdamage(basePow + maxAddPow, merry[5], equipdamage[5], gg[5].damageup * doublecardup * (fairy[fairyindex].powbuff) * skillupdamage[5], Math.Min(2, equipbreakarmor[5] - Int32.Parse(enemyarmor.Text)));

                        }
                        if (Int32.Parse(Lhp5.Content.ToString()) == 0)
                            Ldamage5.Content = 0;
                        if (equiprifledslug[5])
                            Ldamage5.Content = (Double.Parse(Ldamage5.Content.ToString()) * 3).ToString();

                        if (innight)
                            Lhit5.Content = Math.Ceiling((Math.Ceiling((basehit + maxAddHit) * merry[5]) + equiphit[5]) * (fairy[fairyindex].hitbuff) * (100 - 0.9 * (100 - equipnightsee[5])) / 100 * gg[5].hitup * (skilluphit[5])).ToString();
                        else
                            Lhit5.Content = Math.Ceiling(((Math.Ceiling((basehit + maxAddHit) * merry[5]) + equiphit[5]) * (fairy[fairyindex].hitbuff) * gg[5].hitup * (skilluphit[5]))).ToString("0");
                        Image5.Source = new BitmapImage(new Uri(@gun[select].image, UriKind.Relative));
                        string tbt = "";
                        if (gg[5].damageup != 1)
                            tbt += "伤害+" + Math.Floor(dedouble((gg[5].damageup - 1) * 100)).ToString("0") + "% ";
                        if (gg[5].shotspeedup != 1)
                            tbt += "射速+" + Math.Floor(dedouble((gg[5].shotspeedup - 1) * 100)).ToString("0") + "% ";
                        if (gg[5].hitup != 1)
                            tbt += "命中+" + Math.Floor(dedouble((gg[5].hitup - 1) * 100)).ToString("0") + "% ";
                        if (gg[5].dodgeup != 1)
                            tbt += "回避+" + Math.Floor(dedouble((gg[5].dodgeup - 1) * 100)).ToString("0") + "% ";
                        if (gg[5].critup != 1)
                            tbt += "暴击率+" + Math.Floor(dedouble((gg[5].critup - 1) * 100)).ToString("0") + "% ";
                        if (gg[5].rateup != 1)
                            tbt += "冷却-" + Math.Floor(dedouble((1 - gg[5].rateup) * 100)).ToString("0") + "% ";
                        if (gg[5].armorup != 1)
                            tbt += "护甲+" + Math.Floor(dedouble((gg[5].armorup - 1) * 100)).ToString("0") + "% ";
                        if (tbt == "")
                            tbt = "无";
                        tb5.Text = tbt;
                        Lcritharm5.Content = Math.Ceiling((1 + (0.5 + equipcritharm[5]) * (fairy[fairyindex].critharmbuff)) * 100).ToString() + "%";
                        Larmor5.Content = Math.Ceiling(((maxarmor + equiparmor[5]) * gg[5].armorup * doublecardup * (fairy[fairyindex].armorbuff) * skilluparmor[5])).ToString("0");
                        if (gun[select].belt == 0 && (baseRate + maxAddRate + equipshotspeed[5]) * gg[5].shotspeedup * (skillupshotspeed[5]) > 120)
                            Lshotspeed5.Content = 120;
                        else if (gun[select].what == 7 && (baseRate + maxAddRate + equipshotspeed[5]) * gg[5].shotspeedup * (skillupshotspeed[5]) > 60)
                            Lshotspeed5.Content = 60;
                        else
                            Lshotspeed5.Content = Math.Ceiling(((baseRate + maxAddRate + equipshotspeed[5]) * gg[5].shotspeedup * (skillupshotspeed[5]))).ToString("0");
                        if (Double.Parse(Lshotspeed5.Content.ToString()) < 15)
                            Lshotspeed5.Content = 15;
                        if (Double.Parse(Lhit5.Content.ToString()) < 1)
                            Lhit5.Content = 1;
                        if (gun[select].cd * gg[5].rateup < 8)
                            Ltime5.Content = 8;
                        else
                            Ltime5.Content = (gun[select].cd * gg[5].rateup).ToString("0.00");
                        if (!string.IsNullOrEmpty(gun[select].startcd))
                            Lontime5.Content = (Double.Parse(gun[select].startcd) * gg[5].rateup).ToString("0.00");
                        Lbreakarmor5.Content = equipbreakarmor[5];
                        double crit = 0;
                        if (isfullcrit[5])
                            crit = 1;
                        else
                            crit = (gun[select].crit + equipcrit[5]) * gg[5].critup * skillupcrit[5];
                        if (crit > 1)
                            crit = 1;
                        Lcrit5.Content = (crit * 100).ToString("0") + "%";
                        Ldodge5.Content = Math.Ceiling(((Math.Ceiling((baseDodge + maxAddDodge) * merry[5]) + equipdodge[5]) * doublecardup * (fairy[fairyindex].dodgebuff) * gg[5].dodgeup * (skillupdodge[5]))).ToString("0");
                        Lbelt5.Content = gun[select].belt + equipbelt[5] + skillupbelt[5];
                        nowdodge.Content = (Double.Parse(enemydodge.Text) * skilldowndodge).ToString("0");
                        Lindex5.Content = Index(Double.Parse(Lshotspeed5.Content.ToString()), Double.Parse(Ldamage5.Content.ToString()), crit, Double.Parse(nowdodge.Content.ToString()), Double.Parse(Lhit5.Content.ToString()), double.Parse(Lbelt5.Content.ToString()) - skillupbelt[5], 5, skilldamageagain[5]).ToString("0.00");
                        allindex.Content = (Double.Parse(Lindex0.Content.ToString()) + Double.Parse(Lindex1.Content.ToString()) + Double.Parse(Lindex2.Content.ToString()) + Double.Parse(Lindex3.Content.ToString()) + Double.Parse(Lindex4.Content.ToString()) + Double.Parse(Lindex5.Content.ToString()) + Double.Parse(Lindex6.Content.ToString()) + Double.Parse(Lindex7.Content.ToString()) + Double.Parse(Lindex8.Content.ToString())).ToString("0.00");
                        if (rb5.IsChecked == true)
                            calctank(5);
                        if (rbf5.IsChecked == true)
                            calcftank(5);
                        break;
                    }
                case 6:
                    {
                        Lhp6.Content = maxLife;
                        //if (enemyarmor.Text == "0")
                        //    if (equipbreakarmor[6] > 0)
                        //        Ldamage6.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[6]) + equipdamage[6]) * gg[6].damageup * (skillupdamage[6]) + 2)).ToString("0");
                        //    else
                        //        Ldamage6.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[6]) + equipdamage[6]) * gg[6].damageup * (skillupdamage[6]))).ToString("0");
                        //else
                        {
                            //if (equipbreakarmor[6] > Int32.Parse(enemyarmor.Text))
                            //    Ldamage6.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow ) * merry[6])+ equipdamage[6]) * gg[6].damageup * (skillupdamage[6]) + 2)).ToString("0");
                            //else
                            //    Ldamage6.Content = Math.Floor(Math.Max(((Math.Ceiling((basePow + maxAddPow ) * merry[6])+ equipdamage[6]) * gg[6].damageup * (skillupdamage[6])) / 10, (((Math.Ceiling((basePow + maxAddPow ) * merry[6])+ equipdamage[6]) * gg[6].damageup * (skillupdamage[6])) + equipbreakarmor[6] - Int32.Parse(enemyarmor.Text)))).ToString();
                            //        Ldamage6.Content = Math.Ceiling(Math.Max(1, (Math.Ceiling((basePow + maxAddPow) * merry[6]) + equipdamage[6]) * gg[6].damageup * (skillupdamage[6]) + Math.Min(2, equipbreakarmor[6] - Int32.Parse(enemyarmor.Text))));
                            Ldamage6.Content = floatdamage(basePow + maxAddPow, merry[6], equipdamage[6], gg[6].damageup * doublecardup * (fairy[fairyindex].powbuff) * skillupdamage[6], Math.Min(2, equipbreakarmor[6] - Int32.Parse(enemyarmor.Text)));

                        }
                        if (Int32.Parse(Lhp6.Content.ToString()) == 0)
                            Ldamage6.Content = 0;
                        if (equiprifledslug[6])
                            Ldamage6.Content = (Double.Parse(Ldamage6.Content.ToString()) * 3).ToString();

                        if (innight)
                            Lhit6.Content = Math.Ceiling((Math.Ceiling((basehit + maxAddHit) * merry[6]) + equiphit[6]) * (fairy[fairyindex].hitbuff) * (100 - 0.9 * (100 - equipnightsee[6])) / 100 * gg[6].hitup * (skilluphit[6])).ToString();
                        else
                            Lhit6.Content = Math.Ceiling(((Math.Ceiling((basehit + maxAddHit) * merry[6]) + equiphit[6]) * (fairy[fairyindex].hitbuff) * gg[6].hitup * (skilluphit[6]))).ToString("0");
                        Image6.Source = new BitmapImage(new Uri(@gun[select].image, UriKind.Relative));
                        string tbt = "";
                        if (gg[6].damageup != 1)
                            tbt += "伤害+" + Math.Floor(dedouble((gg[6].damageup - 1) * 100)).ToString("0") + "% ";
                        if (gg[6].shotspeedup != 1)
                            tbt += "射速+" + Math.Floor(dedouble((gg[6].shotspeedup - 1) * 100)).ToString("0") + "% ";
                        if (gg[6].hitup != 1)
                            tbt += "命中+" + Math.Floor(dedouble((gg[6].hitup - 1) * 100)).ToString("0") + "% ";
                        if (gg[6].dodgeup != 1)
                            tbt += "回避+" + Math.Floor(dedouble((gg[6].dodgeup - 1) * 100)).ToString("0") + "% ";
                        if (gg[6].critup != 1)
                            tbt += "暴击率+" + Math.Floor(dedouble((gg[6].critup - 1) * 100)).ToString("0") + "% ";
                        if (gg[6].rateup != 1)
                            tbt += "冷却-" + Math.Floor(dedouble((1 - gg[6].rateup) * 100)).ToString("0") + "% ";
                        if (gg[6].armorup != 1)
                            tbt += "护甲+" + Math.Floor(dedouble((gg[6].armorup - 1) * 100)).ToString("0") + "% ";
                        if (tbt == "")
                            tbt = "无";
                        tb6.Text = tbt;
                        Lcritharm6.Content = Math.Ceiling((1 + (0.5 + equipcritharm[6]) * (fairy[fairyindex].critharmbuff)) * 100).ToString() + "%";
                        Larmor6.Content = Math.Ceiling(((maxarmor + equiparmor[6]) * doublecardup * (fairy[fairyindex].armorbuff) * gg[6].armorup * skilluparmor[6])).ToString("0");
                        if (gun[select].belt == 0 && (baseRate + maxAddRate + equipshotspeed[6]) * gg[6].shotspeedup * (skillupshotspeed[6]) > 120)
                            Lshotspeed6.Content = 120;
                        else if (gun[select].what == 7 && (baseRate + maxAddRate + equipshotspeed[6]) * gg[6].shotspeedup * (skillupshotspeed[6]) > 60)
                            Lshotspeed6.Content = 60;
                        else
                            Lshotspeed6.Content = Math.Ceiling(((baseRate + maxAddRate + equipshotspeed[6]) * gg[6].shotspeedup * (skillupshotspeed[6]))).ToString("0");
                        if (Double.Parse(Lshotspeed6.Content.ToString()) < 15)
                            Lshotspeed6.Content = 15;
                        if (Double.Parse(Lhit6.Content.ToString()) < 1)
                            Lhit6.Content = 1;
                        if (gun[select].cd * gg[6].rateup < 8)
                            Ltime6.Content = 8;
                        else
                            Ltime6.Content = (gun[select].cd * gg[6].rateup).ToString("0.00");
                        if (!string.IsNullOrEmpty(gun[select].startcd))
                            Lontime6.Content = (Double.Parse(gun[select].startcd) * gg[6].rateup).ToString("0.00");
                        Lbreakarmor6.Content = equipbreakarmor[6];
                        double crit = 0;
                        if (isfullcrit[6])
                            crit = 1;
                        else
                            crit = (gun[select].crit + equipcrit[6]) * gg[6].critup * skillupcrit[6];
                        if (crit > 1)
                            crit = 1;
                        Lcrit6.Content = (crit * 100).ToString("0") + "%";
                        Ldodge6.Content = Math.Ceiling(((Math.Ceiling((baseDodge + maxAddDodge) * merry[6]) + equipdodge[6]) * doublecardup * (fairy[fairyindex].dodgebuff) * gg[6].dodgeup * (skillupdodge[6]))).ToString("0");
                        Lbelt6.Content = gun[select].belt + equipbelt[6] + skillupbelt[6];
                        nowdodge.Content = (Double.Parse(enemydodge.Text) * skilldowndodge).ToString("0");
                        Lindex6.Content = Index(Double.Parse(Lshotspeed6.Content.ToString()), Double.Parse(Ldamage6.Content.ToString()), crit, Double.Parse(nowdodge.Content.ToString()), Double.Parse(Lhit6.Content.ToString()), double.Parse(Lbelt6.Content.ToString()) - skillupbelt[6], 6, skilldamageagain[6]).ToString("0.00");
                        allindex.Content = (Double.Parse(Lindex0.Content.ToString()) + Double.Parse(Lindex1.Content.ToString()) + Double.Parse(Lindex2.Content.ToString()) + Double.Parse(Lindex3.Content.ToString()) + Double.Parse(Lindex4.Content.ToString()) + Double.Parse(Lindex5.Content.ToString()) + Double.Parse(Lindex6.Content.ToString()) + Double.Parse(Lindex7.Content.ToString()) + Double.Parse(Lindex8.Content.ToString())).ToString("0.00");
                        if (rb6.IsChecked == true)
                            calctank(6);
                        if (rbf6.IsChecked == true)
                            calcftank(6);
                        break;
                    }
                case 7:
                    {
                        Lhp7.Content = maxLife;
                        //if (enemyarmor.Text == "0")
                        //    if (equipbreakarmor[7] > 0)
                        //        Ldamage7.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[7]) + equipdamage[7]) * gg[7].damageup * (skillupdamage[7]) + 2)).ToString("0");
                        //    else
                        //        Ldamage7.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[7]) + equipdamage[7]) * gg[7].damageup * (skillupdamage[7]))).ToString("0");
                        //else
                        {
                            //if (equipbreakarmor[7] > Int32.Parse(enemyarmor.Text))
                            //    Ldamage7.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow ) * merry[7])+ equipdamage[7]) * gg[7].damageup * (skillupdamage[7]) + 2)).ToString("0");
                            //else
                            //    Ldamage7.Content = Math.Floor(Math.Max(((Math.Ceiling((basePow + maxAddPow ) * merry[7])+ equipdamage[7]) * gg[7].damageup * (skillupdamage[7])) / 10, (((Math.Ceiling((basePow + maxAddPow ) * merry[7])+ equipdamage[7]) * gg[7].damageup * (skillupdamage[7])) + equipbreakarmor[7] - Int32.Parse(enemyarmor.Text)))).ToString();
                            //   Ldamage7.Content = Math.Ceiling(Math.Max(1, (Math.Ceiling((basePow + maxAddPow) * merry[7]) + equipdamage[7]) * gg[7].damageup * (skillupdamage[7]) + Math.Min(2, equipbreakarmor[7] - Int32.Parse(enemyarmor.Text))));
                            Ldamage7.Content = floatdamage(basePow + maxAddPow, merry[7], equipdamage[7], gg[7].damageup * doublecardup * (fairy[fairyindex].powbuff) * skillupdamage[7], Math.Min(2, equipbreakarmor[7] - Int32.Parse(enemyarmor.Text)));

                        }
                        if (Int32.Parse(Lhp7.Content.ToString()) == 0)
                            Ldamage7.Content = 0;
                        if (equiprifledslug[7])
                            Ldamage7.Content = (Double.Parse(Ldamage7.Content.ToString()) * 3).ToString();

                        if (innight)
                            Lhit7.Content = Math.Ceiling((Math.Ceiling((basehit + maxAddHit) * merry[7]) + equiphit[7]) * (fairy[fairyindex].hitbuff) * (100 - 0.9 * (100 - equipnightsee[7])) / 100 * gg[7].hitup * (skilluphit[7])).ToString();
                        else
                            Lhit7.Content = Math.Ceiling(((Math.Ceiling((basehit + maxAddHit) * merry[7]) + equiphit[7]) * (fairy[fairyindex].hitbuff) * gg[7].hitup * (skilluphit[7]))).ToString("0");
                        Image7.Source = new BitmapImage(new Uri(@gun[select].image, UriKind.Relative));
                        string tbt = "";
                        if (gg[7].damageup != 1)
                            tbt += "伤害+" + Math.Floor(dedouble((gg[7].damageup - 1) * 100)).ToString("0") + "% ";
                        if (gg[7].shotspeedup != 1)
                            tbt += "射速+" + Math.Floor(dedouble((gg[7].shotspeedup - 1) * 100)).ToString("0") + "% ";
                        if (gg[7].hitup != 1)
                            tbt += "命中+" + Math.Floor(dedouble((gg[7].hitup - 1) * 100)).ToString("0") + "% ";
                        if (gg[7].dodgeup != 1)
                            tbt += "回避+" + Math.Floor(dedouble((gg[7].dodgeup - 1) * 100)).ToString("0") + "% ";
                        if (gg[7].critup != 1)
                            tbt += "暴击率+" + Math.Floor(dedouble((gg[7].critup - 1) * 100)).ToString("0") + "% ";
                        if (gg[7].rateup != 1)
                            tbt += "冷却-" + Math.Floor(dedouble((1 - gg[7].rateup) * 100)).ToString("0") + "% ";
                        if (gg[7].armorup != 1)
                            tbt += "护甲+" + Math.Floor(dedouble((gg[7].armorup - 1) * 100)).ToString("0") + "% ";
                        if (tbt == "")
                            tbt = "无";
                        tb7.Text = tbt;
                        Lcritharm7.Content = Math.Ceiling((1 + (0.5 + equipcritharm[7]) * (fairy[fairyindex].critharmbuff)) * 100).ToString() + "%";
                        Larmor7.Content = Math.Ceiling(((maxarmor + equiparmor[7]) * doublecardup * (fairy[fairyindex].armorbuff) * gg[7].armorup * skilluparmor[7])).ToString("0");
                        if (gun[select].belt == 0 && (baseRate + maxAddRate + equipshotspeed[7]) * gg[7].shotspeedup * (skillupshotspeed[7]) > 120)
                            Lshotspeed7.Content = 120;
                        else if (gun[select].what == 7 && (baseRate + maxAddRate + equipshotspeed[7]) * gg[7].shotspeedup * (skillupshotspeed[7]) > 60)
                            Lshotspeed7.Content = 60;
                        else
                            Lshotspeed7.Content = Math.Ceiling(((baseRate + maxAddRate + equipshotspeed[7]) * gg[7].shotspeedup * (skillupshotspeed[7]))).ToString("0");
                        if (Double.Parse(Lshotspeed7.Content.ToString()) < 15)
                            Lshotspeed7.Content = 15;
                        if (Double.Parse(Lhit7.Content.ToString()) < 1)
                            Lhit7.Content = 1;
                        if (gun[select].cd * gg[7].rateup < 8)
                            Ltime7.Content = 8;
                        else
                            Ltime7.Content = (gun[select].cd * gg[7].rateup).ToString("0.00");
                        if (!string.IsNullOrEmpty(gun[select].startcd))
                            Lontime7.Content = (Double.Parse(gun[select].startcd) * gg[7].rateup).ToString("0.00");
                        Lbreakarmor7.Content = equipbreakarmor[7];
                        double crit = 0;
                        if (isfullcrit[7])
                            crit = 1;
                        else
                            crit = (gun[select].crit + equipcrit[7]) * gg[7].critup * skillupcrit[7];
                        if (crit > 1)
                            crit = 1;
                        Lcrit7.Content = (crit * 100).ToString("0") + "%";
                        Ldodge7.Content = Math.Ceiling(((Math.Ceiling((baseDodge + maxAddDodge) * merry[7]) + equipdodge[7]) * doublecardup * (fairy[fairyindex].dodgebuff) * gg[7].dodgeup * (skillupdodge[7]))).ToString("0");
                        Lbelt7.Content = gun[select].belt + equipbelt[7] + skillupbelt[7];
                        nowdodge.Content = (Double.Parse(enemydodge.Text) * skilldowndodge).ToString("0");
                        Lindex7.Content = Index(Double.Parse(Lshotspeed7.Content.ToString()), Double.Parse(Ldamage7.Content.ToString()), crit, Double.Parse(nowdodge.Content.ToString()), Double.Parse(Lhit7.Content.ToString()), double.Parse(Lbelt7.Content.ToString()) - skillupbelt[7], 7, skilldamageagain[7]).ToString("0.00");
                        allindex.Content = (Double.Parse(Lindex0.Content.ToString()) + Double.Parse(Lindex1.Content.ToString()) + Double.Parse(Lindex2.Content.ToString()) + Double.Parse(Lindex3.Content.ToString()) + Double.Parse(Lindex4.Content.ToString()) + Double.Parse(Lindex5.Content.ToString()) + Double.Parse(Lindex6.Content.ToString()) + Double.Parse(Lindex7.Content.ToString()) + Double.Parse(Lindex8.Content.ToString())).ToString("0.00");
                        if (rb7.IsChecked == true)
                            calctank(7);
                        if (rbf7.IsChecked == true)
                            calcftank(7);
                        break;
                    }
                case 8:
                    {
                        Lhp8.Content = maxLife;
                        //if (enemyarmor.Text == "0")
                        //    if (equipbreakarmor[8] > 0)
                        //        Ldamage8.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[8]) + equipdamage[8]) * gg[8].damageup * (skillupdamage[8]) + 2)).ToString("0");
                        //    else
                        //        Ldamage8.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow) * merry[8]) + equipdamage[8]) * gg[8].damageup * (skillupdamage[8]))).ToString("0");
                        //else
                        {
                            //if (equipbreakarmor[8] > Int32.Parse(enemyarmor.Text))
                            //    Ldamage8.Content = Math.Floor(((Math.Ceiling((basePow + maxAddPow ) * merry[8])+ equipdamage[8]) * gg[8].damageup * (skillupdamage[8]) + 2)).ToString("0");
                            //else
                            //    Ldamage8.Content = Math.Floor(Math.Max(((Math.Ceiling((basePow + maxAddPow )) * merry[8]+ equipdamage[8]) * gg[8].damageup * (skillupdamage[8])) / 10, (((Math.Ceiling((basePow + maxAddPow ) * merry[8])+ equipdamage[8]) * gg[8].damageup * (skillupdamage[8])) + equipbreakarmor[8] - Int32.Parse(enemyarmor.Text)))).ToString();

                            //    Ldamage8.Content = Math.Ceiling(Math.Max(1, (Math.Ceiling((basePow + maxAddPow) * merry[8]) + equipdamage[8]) * gg[8].damageup * (skillupdamage[8]) + Math.Min(2, equipbreakarmor[8] - Int32.Parse(enemyarmor.Text))));
                            Ldamage8.Content = floatdamage(basePow + maxAddPow, merry[8], equipdamage[8], gg[8].damageup * doublecardup * (fairy[fairyindex].powbuff) * skillupdamage[8], Math.Min(2, equipbreakarmor[8] - Int32.Parse(enemyarmor.Text)));

                        }
                        if (Int32.Parse(Lhp8.Content.ToString()) == 0)
                            Ldamage8.Content = 0;
                        if (equiprifledslug[8])
                            Ldamage8.Content = (Double.Parse(Ldamage8.Content.ToString()) * 3).ToString();

                        if (innight)
                            Lhit8.Content = Math.Ceiling((Math.Ceiling((basehit + maxAddHit) * merry[8]) + equiphit[8]) * (fairy[fairyindex].hitbuff) * (100 - 0.9 * (100 - equipnightsee[8])) / 100 * gg[8].hitup * (skilluphit[8])).ToString();
                        else
                            Lhit8.Content = Math.Ceiling(((Math.Ceiling((basehit + maxAddHit) * merry[8]) + equiphit[8]) * (fairy[fairyindex].hitbuff) * gg[8].hitup * (skilluphit[8]))).ToString("0");
                        Image8.Source = new BitmapImage(new Uri(@gun[select].image, UriKind.Relative));
                        string tbt = "";
                        if (gg[8].damageup != 1)
                            tbt += "伤害+" + Math.Floor(dedouble((gg[8].damageup - 1) * 100)).ToString("0") + "% ";
                        if (gg[8].shotspeedup != 1)
                            tbt += "射速+" + Math.Floor(dedouble((gg[8].shotspeedup - 1) * 100)).ToString("0") + "% ";
                        if (gg[8].hitup != 1)
                            tbt += "命中+" + Math.Floor(dedouble((gg[8].hitup - 1) * 100)).ToString("0") + "% ";
                        if (gg[8].dodgeup != 1)
                            tbt += "回避+" + Math.Floor(dedouble((gg[8].dodgeup - 1) * 100)).ToString("0") + "% ";
                        if (gg[8].critup != 1)
                            tbt += "暴击率+" + Math.Floor(dedouble((gg[8].critup - 1) * 100)).ToString("0") + "% ";
                        if (gg[8].rateup != 1)
                            tbt += "冷却-" + Math.Floor(dedouble((1 - gg[8].rateup) * 100)).ToString("0") + "% ";
                        if (gg[8].armorup != 1)
                            tbt += "护甲+" + Math.Floor(dedouble((gg[8].armorup - 1) * 100)).ToString("0") + "% ";
                        if (tbt == "")
                            tbt = "无";
                        tb8.Text = tbt;
                        Lcritharm8.Content = Math.Ceiling((1 + (0.5 + equipcritharm[8]) * (fairy[fairyindex].critharmbuff)) * 100).ToString() + "%";
                        Larmor8.Content = Math.Ceiling(((maxarmor + equiparmor[8]) * gg[8].armorup * doublecardup * (fairy[fairyindex].armorbuff) * skilluparmor[8])).ToString("0");
                        if (gun[select].belt == 0 && (baseRate + maxAddRate + equipshotspeed[8]) * gg[8].shotspeedup * (skillupshotspeed[8]) > 120)
                            Lshotspeed8.Content = 120;
                        else if (gun[select].what == 7 && (baseRate + maxAddRate + equipshotspeed[8]) * gg[8].shotspeedup * (skillupshotspeed[8]) > 60)
                            Lshotspeed8.Content = 60;
                        else
                            Lshotspeed8.Content = Math.Ceiling(((baseRate + maxAddRate + equipshotspeed[8]) * gg[8].shotspeedup * (skillupshotspeed[8]))).ToString("0");
                        if (Double.Parse(Lshotspeed8.Content.ToString()) < 15)
                            Lshotspeed8.Content = 15;
                        if (Double.Parse(Lhit8.Content.ToString()) < 1)
                            Lhit8.Content = 1;
                        if (gun[select].cd * gg[8].rateup < 8)
                            Ltime8.Content = 8;
                        else
                            Ltime8.Content = (gun[select].cd * gg[8].rateup).ToString("0.00");
                        if (!string.IsNullOrEmpty(gun[select].startcd))
                            Lontime8.Content = (Double.Parse(gun[select].startcd) * gg[8].rateup).ToString("0.00");
                        Lbreakarmor8.Content = equipbreakarmor[8];
                        double crit = 0;
                        if (isfullcrit[8])
                            crit = 1;
                        else
                            crit = (gun[select].crit + equipcrit[8]) * gg[8].critup * skillupcrit[8];
                        if (crit > 1)
                            crit = 1;
                        Lcrit8.Content = (crit * 100).ToString("0") + "%";
                        Ldodge8.Content = Math.Ceiling(((Math.Ceiling((baseDodge + maxAddDodge) * merry[8]) + equipdodge[8]) * doublecardup * (fairy[fairyindex].dodgebuff) * gg[8].dodgeup * (skillupdodge[8]))).ToString("0");
                        Lbelt8.Content = gun[select].belt + equipbelt[8] + skillupbelt[8];
                        nowdodge.Content = (Double.Parse(enemydodge.Text) * skilldowndodge).ToString("0");
                        Lindex8.Content = Index(Double.Parse(Lshotspeed8.Content.ToString()), Double.Parse(Ldamage8.Content.ToString()), crit, Double.Parse(nowdodge.Content.ToString()), Double.Parse(Lhit8.Content.ToString()), double.Parse(Lbelt8.Content.ToString()) - skillupbelt[8], 8, skilldamageagain[8]).ToString("0.00");
                        allindex.Content = (Double.Parse(Lindex0.Content.ToString()) + Double.Parse(Lindex1.Content.ToString()) + Double.Parse(Lindex2.Content.ToString()) + Double.Parse(Lindex3.Content.ToString()) + Double.Parse(Lindex4.Content.ToString()) + Double.Parse(Lindex5.Content.ToString()) + Double.Parse(Lindex6.Content.ToString()) + Double.Parse(Lindex7.Content.ToString()) + Double.Parse(Lindex8.Content.ToString())).ToString("0.00");
                        if (rb8.IsChecked == true)
                            calctank(8);
                        if (rbf8.IsChecked == true)
                            calcftank(8);
                        break;
                    }
                default: break;
            }
            switch (combo)
            {
                case 0:
                    {
                        if (getontime(combo) > slider.Value)
                            cb0.IsEnabled = false;
                        else
                            cb0.IsEnabled = true;
                        break;
                    }
                case 1:
                    {
                        if (getontime(combo) > slider.Value)
                            cb1.IsEnabled = false;
                        else
                            cb1.IsEnabled = true;
                        break;
                    }
                case 2:
                    {
                        if (getontime(combo) > slider.Value)
                            cb2.IsEnabled = false;
                        else
                            cb2.IsEnabled = true;
                        break;
                    }
                case 3:
                    {
                        if (getontime(combo) > slider.Value)
                            cb3.IsEnabled = false;
                        else
                            cb3.IsEnabled = true;
                        break;
                    }
                case 4:
                    {
                        if (getontime(combo) > slider.Value)
                            cb4.IsEnabled = false;
                        else
                            cb4.IsEnabled = true;
                        break;
                    }
                case 5:
                    {
                        if (getontime(combo) > slider.Value)
                            cb5.IsEnabled = false;
                        else
                            cb5.IsEnabled = true;
                        break;
                    }
                case 6:
                    {
                        if (getontime(combo) > slider.Value)
                            cb6.IsEnabled = false;
                        else
                            cb6.IsEnabled = true;
                        break;
                    }
                case 7:
                    {
                        if (getontime(combo) > slider.Value)
                            cb7.IsEnabled = false;
                        else
                            cb7.IsEnabled = true;
                        break;
                    }
                case 8:
                    {
                        if (getontime(combo) > slider.Value)
                            cb8.IsEnabled = false;
                        else
                            cb8.IsEnabled = true;
                        break;
                    }
            }
        }
        /// <summary>
        /// 左上格等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Level0_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int select = Combo0.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level0.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel0.SelectedIndex;
            if (skillselect == -1)
                return;

            multiple[0] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[0] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[0] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[0] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[0] = 1.25;
                }
            }

            if (select != -1)
                calccombo0buff();
            calccombo1buff();
            calccombo2buff();
            calccombo3buff();
            calccombo4buff();
            calccombo5buff();
            calccombo6buff();
            calccombo7buff();
            calccombo8buff();

            clearskill();
            calclevel(select, levelselect, 0, skillselect);
            renewskill();

            equipcb01.Items.Clear();
            equipcb01.IsEnabled = false;
            equipcb02.Items.Clear();
            equipcb02.IsEnabled = false;
            equipcb03.Items.Clear();
            equipcb03.IsEnabled = false;
            loadequipcb(select, levelselect, 0);

            calceat();
        }
        /// <summary>
        /// 上格等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Level1_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int select = Combo1.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level1.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel1.SelectedIndex;
            if (skillselect == -1)
                return;

            multiple[1] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[1] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[1] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[1] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[1] = 1.25;
                }
            }
            if (select != -1)
                calccombo1buff();
            calccombo0buff();
            calccombo2buff();
            calccombo3buff();
            calccombo4buff();
            calccombo5buff();
            calccombo6buff();
            calccombo7buff();
            calccombo8buff();
            clearskill();
            calclevel(select, levelselect, 1, skillselect);
            renewskill();

            equipcb11.Items.Clear();
            equipcb11.IsEnabled = false;
            equipcb11.ToolTip = null;
            equipcb12.Items.Clear();
            equipcb12.IsEnabled = false;
            equipcb12.ToolTip = null;
            equipcb13.Items.Clear();
            equipcb13.IsEnabled = false;
            equipcb13.ToolTip = null;
            loadequipcb(select, levelselect, 1);

            calceat();
        }
        /// <summary>
        /// 右上格等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Level2_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int select = Combo2.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level2.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel2.SelectedIndex;
            if (skillselect == -1)
                return;

            multiple[2] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[2] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[2] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[2] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[2] = 1.25;
                }
            }
            if (select != -1)
                calccombo2buff();
            calccombo1buff();
            calccombo0buff();
            calccombo3buff();
            calccombo4buff();
            calccombo5buff();
            calccombo6buff();
            calccombo7buff();
            calccombo8buff();
            clearskill();
            calclevel(select, levelselect, 2, skillselect);
            renewskill();

            equipcb21.Items.Clear();
            equipcb21.IsEnabled = false;
            equipcb21.ToolTip = null;
            equipcb22.Items.Clear();
            equipcb22.IsEnabled = false;
            equipcb22.ToolTip = null;
            equipcb23.Items.Clear();
            equipcb23.IsEnabled = false;
            equipcb23.ToolTip = null;
            loadequipcb(select, levelselect, 2);

            calceat();
        }
        /// <summary>
        /// 左中格等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Level3_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int select = Combo3.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level3.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel3.SelectedIndex;
            if (skillselect == -1)
                return;

            multiple[3] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[3] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[3] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[3] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[3] = 1.25;
                }
            }
            if (select != -1)
                calccombo3buff();
            calccombo1buff();
            calccombo2buff();
            calccombo0buff();
            calccombo4buff();
            calccombo5buff();
            calccombo6buff();
            calccombo7buff();
            calccombo8buff();
            clearskill();
            calclevel(select, levelselect, 3, skillselect);
            renewskill();

            equipcb31.Items.Clear();
            equipcb31.IsEnabled = false;
            equipcb31.ToolTip = null;
            equipcb32.Items.Clear();
            equipcb32.IsEnabled = false;
            equipcb32.ToolTip = null;
            equipcb33.Items.Clear();
            equipcb33.IsEnabled = false;
            equipcb33.ToolTip = null;
            loadequipcb(select, levelselect, 3);

            calceat();
        }
        /// <summary>
        /// 中格等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Level4_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int select = Combo4.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level4.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel4.SelectedIndex;
            if (skillselect == -1)
                return;

            multiple[4] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[4] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[4] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[4] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[4] = 1.25;
                }
            }
            if (select != -1)
                calccombo4buff();
            calccombo1buff();
            calccombo2buff();
            calccombo3buff();
            calccombo0buff();
            calccombo5buff();
            calccombo6buff();
            calccombo7buff();
            calccombo8buff();
            clearskill();
            calclevel(select, levelselect, 4, skillselect);
            renewskill();

            equipcb41.Items.Clear();
            equipcb41.IsEnabled = false;
            equipcb41.ToolTip = null;
            equipcb42.Items.Clear();
            equipcb42.IsEnabled = false;
            equipcb42.ToolTip = null;
            equipcb43.Items.Clear();
            equipcb43.IsEnabled = false;
            equipcb43.ToolTip = null;
            loadequipcb(select, levelselect, 4);

            calceat();
            ///       calcskill(4, select, skillselect, cb4.IsChecked == true, levelselect);
        }
        /// <summary>
        /// 右中格等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Level5_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int select = Combo5.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level5.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel5.SelectedIndex;
            if (skillselect == -1)
                return;
            multiple[5] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[5] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[5] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[5] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[5] = 1.25;
                }
            }
            if (select != -1)
                calccombo5buff();
            calccombo1buff();
            calccombo2buff();
            calccombo3buff();
            calccombo4buff();
            calccombo0buff();
            calccombo6buff();
            calccombo7buff();
            calccombo8buff();
            clearskill();
            calclevel(select, levelselect, 5, skillselect);
            renewskill();

            equipcb51.Items.Clear();
            equipcb51.IsEnabled = false;
            equipcb51.ToolTip = null;
            equipcb52.Items.Clear();
            equipcb52.IsEnabled = false;
            equipcb52.ToolTip = null;
            equipcb53.Items.Clear();
            equipcb53.IsEnabled = false;
            equipcb53.ToolTip = null;
            loadequipcb(select, levelselect, 5);

            calceat();
        }
        /// <summary>
        /// 左下格等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Level6_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int select = Combo6.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level6.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel6.SelectedIndex;
            if (skillselect == -1)
                return;
            multiple[6] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[6] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[6] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[6] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[6] = 1.25;
                }
            }
            if (select != -1)
                calccombo6buff();
            calccombo1buff();
            calccombo2buff();
            calccombo3buff();
            calccombo4buff();
            calccombo5buff();
            calccombo0buff();
            calccombo7buff();
            calccombo8buff();
            clearskill();
            calclevel(select, levelselect, 6, skillselect);
            renewskill();

            equipcb61.Items.Clear();
            equipcb61.IsEnabled = false;
            equipcb61.ToolTip = null;
            equipcb62.Items.Clear();
            equipcb62.IsEnabled = false;
            equipcb62.ToolTip = null;
            equipcb63.Items.Clear();
            equipcb63.IsEnabled = false;
            equipcb63.ToolTip = null;
            loadequipcb(select, levelselect, 6);

            calceat();
        }
        /// <summary>
        /// 下格等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Level7_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int select = Combo7.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level7.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel7.SelectedIndex;
            if (skillselect == -1)
                return;
            multiple[7] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[7] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[7] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[7] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[7] = 1.25;
                }
            }
            if (select != -1)
                calccombo7buff();
            calccombo1buff();
            calccombo2buff();
            calccombo3buff();
            calccombo4buff();
            calccombo5buff();
            calccombo6buff();
            calccombo0buff();
            calccombo8buff();
            clearskill();
            calclevel(select, levelselect, 7, skillselect);
            renewskill();

            equipcb71.Items.Clear();
            equipcb71.IsEnabled = false;
            equipcb71.ToolTip = null;
            equipcb72.Items.Clear();
            equipcb72.IsEnabled = false;
            equipcb72.ToolTip = null;
            equipcb73.Items.Clear();
            equipcb73.IsEnabled = false;
            equipcb73.ToolTip = null;
            loadequipcb(select, levelselect, 7);

            calceat();
        }
        /// <summary>
        /// 右下格等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Level8_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int select = Combo8.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level8.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel8.SelectedIndex;
            if (skillselect == -1)
                return;
            multiple[8] = 1;
            if (gun[select].what == 4)
            {
                if (levelselect + 1 >= 90)
                {
                    multiple[8] = 2;
                }
                else if (levelselect + 1 >= 70)
                {
                    multiple[8] = 1.75;
                }
                else if (levelselect + 1 >= 30)
                {
                    multiple[8] = 1.5;
                }
                else if (levelselect + 1 >= 10)
                {
                    multiple[8] = 1.25;
                }
            }
            if (select != -1)
                calccombo8buff();
            calccombo1buff();
            calccombo2buff();
            calccombo3buff();
            calccombo4buff();
            calccombo5buff();
            calccombo6buff();
            calccombo7buff();
            calccombo0buff();
            clearskill();
            calclevel(select, levelselect, 8, skillselect);
            renewskill();

            equipcb81.Items.Clear();
            equipcb81.IsEnabled = false;
            equipcb81.ToolTip = null;
            equipcb82.Items.Clear();
            equipcb82.IsEnabled = false;
            equipcb82.ToolTip = null;
            equipcb83.Items.Clear();
            equipcb83.IsEnabled = false;
            equipcb83.ToolTip = null;
            loadequipcb(select, levelselect, 8);

            calceat();
        }
        /// <summary>
        /// 计算技能发动率
        /// </summary>
        /// <param name="combo">哪一格</param>
        /// <param name="index">该格枪娘index</param>
        /// <param name="skillindex">该格技能等级index</param>
  /*      private void calcprobabiliy(int combo,int index,int skillindex)
        {
            if (index == -1||skillindex == -1)
                return;

            int skilllevel = skillindex + 1;
            double rootrate = gun[index].probability * (1f + (float)(skilllevel - 1) * gun[index].growth / 9f) * Math.Ceiling((float)skilllevel / 10f) / 100f;

            switch(combo)
            {
                case 0:
                    {
                        if (gun[index].what == 4 && rootrate * (1 + gg[0].rateup) > 1)
                            Lskillrate0.Content = "100%";
                        else
                            Lskillrate0.Content = ((rootrate * (1 + gg[0].rateup)) * 100).ToString("0.0") + "%";
                        break;
                    }
                case 1:
                    {
                        if (gun[index].what == 4 && rootrate * (1 + gg[1].rateup) > 1)
                            Lskillrate1.Content = "100%";
                        else
                            Lskillrate1.Content = ((rootrate * (1 + gg[1].rateup)) * 100).ToString("0.0") + "%";
                        break;
                    }
                case 2:
                    {
                        if (gun[index].what == 4 && rootrate * (1 + gg[2].rateup) > 1)
                            Lskillrate2.Content = "100%";
                        else
                            Lskillrate2.Content = ((rootrate * (1 + gg[2].rateup)) * 100).ToString("0.0") + "%";
                        break;
                    }
                case 3:
                    {
                        if (gun[index].what == 4 && rootrate * (1 + gg[3].rateup) > 1)
                            Lskillrate3.Content = "100%";
                        else
                            Lskillrate3.Content = ((rootrate * (1 + gg[3].rateup)) * 100).ToString("0.0") + "%";
                        break;
                    }
                case 4:
                    {
                        if (gun[index].what == 4 && rootrate * (1 + gg[4].rateup) > 1)
                            Lskillrate4.Content = "100%";
                        else
                            Lskillrate4.Content = ((rootrate * (1 + gg[4].rateup)) * 100).ToString("0.0") + "%";
                        break;
                    }
                case 5:
                    {
                        if (gun[index].what == 4 && rootrate * (1 + gg[5].rateup) > 1)
                            Lskillrate5.Content = "100%";
                        else
                            Lskillrate5.Content = ((rootrate * (1 + gg[5].rateup)) * 100).ToString("0.0") + "%";
                        break;
                    }
                case 6:
                    {
                        if (gun[index].what == 4 && rootrate * (1 + gg[6].rateup) > 1)
                            Lskillrate6.Content = "100%";
                        else
                            Lskillrate6.Content = ((rootrate * (1 + gg[6].rateup)) * 100).ToString("0.0") + "%";
                        break;
                    }
                case 7:
                    {
                        if (gun[index].what == 4 && rootrate * (1 + gg[7].rateup) > 1)
                            Lskillrate7.Content = "100%";
                        else
                            Lskillrate7.Content = ((rootrate * (1 + gg[7].rateup)) * 100).ToString("0.0") + "%";
                        break;
                    }
                case 8:
                    {
                        if (gun[index].what == 4 && rootrate * (1 + gg[8].rateup) > 1)
                            Lskillrate8.Content = "100%";
                        else
                            Lskillrate8.Content = ((rootrate * (1 + gg[8].rateup)) * 100).ToString("0.0") + "%";
                        break;
                    }
                default: return;
            }
           
                  
        }*/
        /// <summary>
        /// 更新技能固定伤害
        /// </summary>
        /// <param name="combo">哪一格</param>
        /// <param name="damage">伤害值</param>
        private void renewdamage(int combo, double damage)
        {
            damage = Math.Floor(damage);
            switch (combo)
            {
                case 0:
                    {
                        Lskilldamage0.Content = damage.ToString("0");
                        return;
                    }
                case 1:
                    {
                        Lskilldamage1.Content = damage.ToString("0");
                        return;
                    }
                case 2:
                    {
                        Lskilldamage2.Content = damage.ToString("0");
                        return;
                    }
                case 3:
                    {
                        Lskilldamage3.Content = damage.ToString("0");
                        return;
                    }
                case 4:
                    {
                        Lskilldamage4.Content = damage.ToString("0");
                        return;
                    }
                case 5:
                    {
                        Lskilldamage5.Content = damage.ToString("0");
                        return;
                    }
                case 6:
                    {
                        Lskilldamage6.Content = damage.ToString("0");
                        return;
                    }
                case 7:
                    {
                        Lskilldamage7.Content = damage.ToString("0");
                        return;
                    }
                case 8:
                    {
                        Lskilldamage8.Content = damage.ToString("0");
                        return;
                    }
                default:
                    return;
            }
        }
        /// <summary>
        /// 更新技能冷却时间
        /// </summary>
        /// <param name="combo">哪一格</param>
        /// <param name="time">技能冷却时间</param>
        private void renewtime(int combo, string time)
        {
            switch (combo)
            {
                case 0:
                    {
                        Ltime0.Content = time;
                        return;
                    }
                case 1:
                    {
                        Ltime1.Content = time;
                        return;
                    }
                case 2:
                    {
                        Ltime2.Content = time;
                        return;
                    }
                case 3:
                    {
                        Ltime3.Content = time;
                        return;
                    }
                case 4:
                    {
                        Ltime4.Content = time;
                        return;
                    }
                case 5:
                    {
                        Ltime5.Content = time;
                        return;
                    }
                case 6:
                    {
                        Ltime6.Content = time;
                        return;
                    }
                case 7:
                    {
                        Ltime7.Content = time;
                        return;
                    }
                case 8:
                    {
                        Ltime8.Content = time;
                        return;
                    }
                default:
                    return;
            }
        }

        private void renewattime(int combo, string time)
        {
            switch (combo)
            {
                case 0:
                    {
                        Lattime0.Content = time;
                        return;
                    }
                case 1:
                    {
                        Lattime1.Content = time;
                        return;
                    }
                case 2:
                    {
                        Lattime2.Content = time;
                        return;
                    }
                case 3:
                    {
                        Lattime3.Content = time;
                        return;
                    }
                case 4:
                    {
                        Lattime4.Content = time;
                        return;
                    }
                case 5:
                    {
                        Lattime5.Content = time;
                        return;
                    }
                case 6:
                    {
                        Lattime6.Content = time;
                        return;
                    }
                case 7:
                    {
                        Lattime7.Content = time;
                        return;
                    }
                case 8:
                    {
                        Lattime8.Content = time;
                        return;
                    }
                default:
                    return;
            }
        }

        private double getontime(int combo)
        {
            switch (combo)
            {
                case 0:
                    {
                        return Double.Parse(Lontime0.Content.ToString());
                    }
                case 1:
                    {
                        return Double.Parse(Lontime1.Content.ToString());
                    }
                case 2:
                    {
                        return Double.Parse(Lontime2.Content.ToString());
                    }
                case 3:
                    {
                        return Double.Parse(Lontime3.Content.ToString());
                    }
                case 4:
                    {
                        return Double.Parse(Lontime4.Content.ToString());
                    }
                case 5:
                    {
                        return Double.Parse(Lontime5.Content.ToString());
                    }
                case 6:
                    {
                        return Double.Parse(Lontime6.Content.ToString());
                    }
                case 7:
                    {
                        return Double.Parse(Lontime7.Content.ToString());
                    }
                case 8:
                    {
                        return Double.Parse(Lontime8.Content.ToString());
                    }
                default:
                    return 0;
            }
        }

        private double getattime(int combo)
        {
            switch (combo)
            {
                case 0:
                    {
                        return Double.Parse(Lattime0.Content.ToString());
                    }
                case 1:
                    {
                        return Double.Parse(Lattime1.Content.ToString());
                    }
                case 2:
                    {
                        return Double.Parse(Lattime2.Content.ToString());
                    }
                case 3:
                    {
                        return Double.Parse(Lattime3.Content.ToString());
                    }
                case 4:
                    {
                        return Double.Parse(Lattime4.Content.ToString());
                    }
                case 5:
                    {
                        return Double.Parse(Lattime5.Content.ToString());
                    }
                case 6:
                    {
                        return Double.Parse(Lattime6.Content.ToString());
                    }
                case 7:
                    {
                        return Double.Parse(Lattime7.Content.ToString());
                    }
                case 8:
                    {
                        return Double.Parse(Lattime8.Content.ToString());
                    }
                default:
                    return 0;
            }
        }

        /// <summary>
        /// 更新技能说明
        /// </summary>
        /// <param name="combo">哪一格</param>
        /// <param name="read">技能说明</param>
        private void renewread(int combo, string read)
        {
            switch (combo)
            {
                case 0:
                    {
                        Lskillread0.Content = read;
                        Lskillread0.ToolTip = read;
                        return;
                    }
                case 1:
                    {
                        Lskillread1.Content = read;
                        Lskillread1.ToolTip = read;
                        return;
                    }
                case 2:
                    {
                        Lskillread2.Content = read;
                        Lskillread2.ToolTip = read;
                        return;
                    }
                case 3:
                    {
                        Lskillread3.Content = read;
                        Lskillread3.ToolTip = read;
                        return;
                    }
                case 4:
                    {
                        Lskillread4.Content = read;
                        Lskillread4.ToolTip = read;
                        return;
                    }
                case 5:
                    {
                        Lskillread5.Content = read;
                        Lskillread5.ToolTip = read;
                        return;
                    }
                case 6:
                    {
                        Lskillread6.Content = read;
                        Lskillread6.ToolTip = read;
                        return;
                    }
                case 7:
                    {
                        Lskillread7.Content = read;
                        Lskillread7.ToolTip = read;
                        return;
                    }
                case 8:
                    {
                        Lskillread8.Content = read;
                        Lskillread8.ToolTip = read;
                        return;
                    }
                default:
                    return;
            }
        }

        /// <summary>
        /// 判断是否是夜战技能（暂时不用）
        /// </summary>
        /// <param name="skilltype">技能类型</param>
        /// <returns></returns>
        private bool isnightskill(int skilltype) //31 34 131 132 133 231 233 333 405
        {
            if (skilltype == 31 || skilltype == 34 || skilltype == 131 || skilltype == 132 || skilltype == 133 || skilltype == 231 || skilltype == 233 || skilltype == 333 || skilltype == 405)
                return true;
            else
                return false;
        }

        /// <summary>
        /// 计算技能
        /// </summary>
        /// <param name="combo">哪一格</param>
        /// <param name="index">该格枪娘index</param>
        /// <param name="skillindex">该格技能等级index</param>
        /// <param name="ischecked">技能是否发动</param>
        /// <param name="levelindex">该格等级index</param>
        private void calcskill(int combo, int index, int skillindex, bool ischecked, int levelindex)
        {
            if (index == -1 || skillindex == -1 || levelindex == -1)
                return;
            //double num1 = gun[index].skilleffect1 * (1f + (float)(skillindex) * gun[index].growth / 9f);
            //double num2 = gun[index].skilleffect2 * (1f + (float)(skillindex) * gun[index].growth / 9f);
            // double num3 = gun[index].skilleffect3 * (1f + (float)(skillindex) * gun[index].growth / 9f);
            //double num4 = gun[index].skilleffect4 * (1f + (float)(skillindex) * gun[index].growth / 9f);
            renewdamage(combo, 0);
            switch (gun[index].type)
            {
                case 100503:
                    {
                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupdamage[i] *= 1 + (Math.Floor(12 + 10.0 / 9 * skillindex) / 100);
                                renewindex(i);
                            }
                        }
                        double cdtime = 0;
                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        gun[index].cd = cdtime;
                        double attime = 0;
                        switch (skillindex)
                        {
                            case 0: { attime = 5; break; }
                            case 1: { attime = 6; break; }
                            case 2: { attime = 6; break; }
                            case 3: { attime = 6; break; }
                            case 4: { attime = 7; break; }
                            case 5: { attime = 7; break; }
                            case 6: { attime = 7; break; }
                            case 7: { attime = 8; break; }
                            case 8: { attime = 8; break; }
                            case 9: { attime = 8; break; }
                        }
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        double updem1 = 0;
                        switch (skillindex)
                        {
                            case 0: { updem1 = 12; break; }
                            case 1: { updem1 = 13; break; }
                            case 2: { updem1 = 14; break; }
                            case 3: { updem1 = 15; break; }
                            case 4: { updem1 = 16; break; }
                            case 5: { updem1 = 17; break; }
                            case 6: { updem1 = 18; break; }
                            case 7: { updem1 = 19; break; }
                            case 8: { updem1 = 20; break; }
                            case 9: { updem1 = 22; break; }
                        }
                        string read = "提升己方" + Math.Floor(updem1) + "%伤害";
                        renewread(combo, read);
                        break;
                    }
                case 102401:
                    {

                        double cdtime = 0;
                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        gun[index].cd = cdtime;
                        double attime = 0;
                        switch (skillindex) { case 0: { attime = 2.5; break; } case 1: { attime = 2.7; break; } case 2: { attime = 2.8; break; } case 3: { attime = 3; break; } case 4: { attime = 3.2; break; } case 5: { attime = 3.3; break; } case 6: { attime = 3.5; break; } case 7: { attime = 3.7; break; } case 8: { attime = 3.8; break; } case 9: { attime = 4; break; } }
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("1");
                        double updem1 = 0;
                        double updem2 = 0;
                        switch (skillindex) { case 0: { updem1 = 0.20; updem2 = 0.28; break; } case 1: { updem1 = 0.22; updem2 = 0.30; break; } case 2: { updem1 = 0.24; updem2 = 0.32; break; } case 3: { updem1 = 0.25; updem2 = 0.34; break; } case 4: { updem1 = 0.27; updem2 = 0.36; break; } case 5: { updem1 = 0.29; updem2 = 0.37; break; } case 6: { updem1 = 0.31; updem2 = 0.39; break; } case 7: { updem1 = 0.32; updem2 = 0.41; break; } case 8: { updem1 = 0.34; updem2 = 0.43; break; } case 9: { updem1 = 0.36; updem2 = 0.45; break; } }

                        string read = "烟雾弹,半径2.5,降射速" + updem1 * 100 + "%移速" + updem2 * 100 + "%(不算)";
                        renewread(combo, read);
                        break;
                    }
                case 102202:
                    {
                        double cdtime = 0;
                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        gun[index].cd = cdtime;
                        gun[index].startcd = ("5");
                        double updem1 = 0;
                        switch (skillindex)
                        {
                            case 0: { updem1 = 1.6; break; }
                            case 1: { updem1 = 1.8; break; }
                            case 2: { updem1 = 2; break; }
                            case 3: { updem1 = 2.1; break; }
                            case 4: { updem1 = 2.3; break; }
                            case 5: { updem1 = 2.5; break; }
                            case 6: { updem1 = 2.7; break; }
                            case 7: { updem1 = 2.8; break; }
                            case 8: { updem1 = 3; break; }
                            case 9: { updem1 = 3.2; break; }
                        }
                        renewattime(combo, updem1.ToString());
                        string read = "闪光弹,半径2.5";
                        renewread(combo, read);
                        break;
                    }
                case 101309:
                    {

                        if (innight)
                        {
                            double updem1 = 0;
                            switch (skillindex)
                            {
                                case 0: { updem1 = 20; break; }
                                case 1: { updem1 = 22; break; }
                                case 2: { updem1 = 23; break; }
                                case 3: { updem1 = 25; break; }
                                case 4: { updem1 = 27; break; }
                                case 5: { updem1 = 28; break; }
                                case 6: { updem1 = 30; break; }
                                case 7: { updem1 = 32; break; }
                                case 8: { updem1 = 33; break; }
                                case 9: { updem1 = 35; break; }
                            }
                            if (ischecked)
                            {
                                skilldowndamage *= 1 - (updem1 / 100);
                                renewtank();
                            }
                            double cdtime = 0;
                            switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                            gun[index].cd = cdtime;
                            double attime = 0;
                            switch (skillindex)
                            {
                                case 0: { attime = 5; break; }
                                case 1: { attime = 6; break; }
                                case 2: { attime = 6; break; }
                                case 3: { attime = 6; break; }
                                case 4: { attime = 7; break; }
                                case 5: { attime = 7; break; }
                                case 6: { attime = 7; break; }
                                case 7: { attime = 8; break; }
                                case 8: { attime = 8; break; }
                                case 9: { attime = 8; break; }
                            }


                            renewattime(combo, attime.ToString());
                            gun[index].startcd = ("6");

                            string read = "(夜)降低对方全体" + Math.Floor(updem1) + "%伤害";
                            renewread(combo, read);
                            break;
                        }
                        else
                        {
                            double updem1 = 0;
                            switch (skillindex)
                            {
                                case 0: { updem1 = 12; break; }
                                case 1: { updem1 = 13; break; }
                                case 2: { updem1 = 14; break; }
                                case 3: { updem1 = 15; break; }
                                case 4: { updem1 = 16; break; }
                                case 5: { updem1 = 16; break; }
                                case 6: { updem1 = 17; break; }
                                case 7: { updem1 = 18; break; }
                                case 8: { updem1 = 19; break; }
                                case 9: { updem1 = 20; break; }
                            }
                            if (ischecked)
                            {
                                skilldowndamage *= 1 - (updem1 / 100);
                                renewtank();
                            }
                            double cdtime = 0;
                            switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                            gun[index].cd = cdtime;
                            double attime = 0;
                            switch (skillindex)
                            {
                                case 0: { attime = 3; break; }
                                case 1: { attime = 3.2; break; }
                                case 2: { attime = 3.4; break; }
                                case 3: { attime = 3.7; break; }
                                case 4: { attime = 3.9; break; }
                                case 5: { attime = 4.1; break; }
                                case 6: { attime = 4.3; break; }
                                case 7: { attime = 4.6; break; }
                                case 8: { attime = 4.8; break; }
                                case 9: { attime = 5; break; }
                            }
                            renewattime(combo, attime.ToString());
                            gun[index].startcd = ("6");

                            string read = "(昼)降低对方全体" + Math.Floor(updem1) + "%伤害";
                            renewread(combo, read);
                            break;
                        }
                    }
                case 100602:
                    {
                        double updem1 = 30 + 2.5 * (skillindex + 1);
                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupdodge[i] *= 1 + (Math.Floor(updem1) / 100);
                                renewindex(i);
                                renewtank();
                            }
                        }
                        double cdtime = 0;
                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        gun[index].cd = cdtime;
                        double attime = 0;
                        switch (skillindex)
                        {
                            case 0: { attime = 5; break; }
                            case 1: { attime = 6; break; }
                            case 2: { attime = 6; break; }
                            case 3: { attime = 6; break; }
                            case 4: { attime = 7; break; }
                            case 5: { attime = 7; break; }
                            case 6: { attime = 7; break; }
                            case 7: { attime = 8; break; }
                            case 8: { attime = 8; break; }
                            case 9: { attime = 8; break; }
                        }

                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升己方" + Math.Floor(updem1) + "%回避";
                        renewread(combo, read);
                        break;
                    }
                case 100803:
                    {
                        double updem1 = 0;
                        switch (skillindex)
                        {
                            case 0: { updem1 = 12; break; }
                            case 1: { updem1 = 13; break; }
                            case 2: { updem1 = 14; break; }
                            case 3: { updem1 = 15; break; }
                            case 4: { updem1 = 16; break; }
                            case 5: { updem1 = 17; break; }
                            case 6: { updem1 = 18; break; }
                            case 7: { updem1 = 19; break; }
                            case 8: { updem1 = 20; break; }
                            case 9: { updem1 = 22; break; }
                        }
                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupshotspeed[i] *= 1 + (updem1 / 100);
                                renewindex(i);
                            }
                        }
                        double cdtime = 0;
                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        gun[index].cd = cdtime;
                        double attime = 0;
                        switch (skillindex)
                        {
                            case 0: { attime = 5; break; }
                            case 1: { attime = 6; break; }
                            case 2: { attime = 6; break; }
                            case 3: { attime = 6; break; }
                            case 4: { attime = 7; break; }
                            case 5: { attime = 7; break; }
                            case 6: { attime = 7; break; }
                            case 7: { attime = 8; break; }
                            case 8: { attime = 8; break; }
                            case 9: { attime = 8; break; }
                        }
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升己方" + Math.Floor(updem1) + "%射速";
                        renewread(combo, read);
                        break;
                    }
                case 0:
                    {
                        string read = "少女祈祷中";
                        renewread(combo, read);
                        break;
                    }
                case 101502:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        switch (skillindex) { case 0: { attime = 4; break; } case 1: { attime = 4; break; } case 2: { attime = 4; break; } case 3: { attime = 5; break; } case 4: { attime = 5; break; } case 5: { attime = 5; break; } case 6: { attime = 5; break; } case 7: { attime = 6; break; } case 8: { attime = 6; break; } case 9: { attime = 6; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.24; break; } case 1: { updem1 = 0.25; break; } case 2: { updem1 = 0.27; break; } case 3: { updem1 = 0.28; break; } case 4: { updem1 = 0.29; break; } case 5: { updem1 = 0.31; break; } case 6: { updem1 = 0.32; break; } case 7: { updem1 = 0.33; break; } case 8: { updem1 = 0.35; break; } case 9: { updem1 = 0.36; break; } }

                        if (ischecked)
                        {
                            skilldownhit *= 1 - updem1;
                            renewtank();
                        }


                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "降低敌方全体" + updem1 * 100 + "%命中";
                        renewread(combo, read);
                        break;
                    }
                case 102501:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 8; break; } case 1: { attime = 9; break; } case 2: { attime = 10; break; } case 3: { attime = 11; break; } case 4: { attime = 12; break; } case 5: { attime = 12; break; } case 6: { attime = 13; break; } case 7: { attime = 13; break; } case 8: { attime = 14; break; } case 9: { attime = 15; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.5; break; } case 1: { updem1 = 0.54; break; } case 2: { updem1 = 0.59; break; } case 3: { updem1 = 0.63; break; } case 4: { updem1 = 0.68; break; } case 5: { updem1 = 0.72; break; } case 6: { updem1 = 0.77; break; } case 7: { updem1 = 0.81; break; } case 8: { updem1 = 0.86; break; } case 9: { updem1 = 0.9; break; } }

                        if (ischecked && innight)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skilluphit[i] *= 1 + updem1;
                                renewindex(i);
                            }
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("3");
                        string read = "(夜)提升全体" + updem1 * 100 + "%命中";
                        renewread(combo, read);
                        break;
                    }
                case 105001:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        switch (skillindex) { case 0: { attime = 5; break; } case 1: { attime = 6; break; } case 2: { attime = 6; break; } case 3: { attime = 6; break; } case 4: { attime = 7; break; } case 5: { attime = 7; break; } case 6: { attime = 7; break; } case 7: { attime = 8; break; } case 8: { attime = 8; break; } case 9: { attime = 8; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.06; updem2 = 0.25; break; } case 1: { updem1 = 0.06; updem2 = 0.26; break; } case 2: { updem1 = 0.07; updem2 = 0.27; break; } case 3: { updem1 = 0.07; updem2 = 0.28; break; } case 4: { updem1 = 0.08; updem2 = 0.29; break; } case 5: { updem1 = 0.08; updem2 = 0.31; break; } case 6: { updem1 = 0.09; updem2 = 0.32; break; } case 7: { updem1 = 0.09; updem2 = 0.33; break; } case 8: { updem1 = 0.10; updem2 = 0.34; break; } case 9: { updem1 = 0.10; updem2 = 0.35; break; } }


                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupdamage[i] *= 1 + updem1;
                                skillupcrit[i] *= 1 + updem2;
                                renewindex(i);
                            }
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升全体" + updem1 * 100 + "%伤害," + updem2 * 100 + "%暴击率";
                        renewread(combo, read);
                        break;
                    }
                case 100610:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        if (innight)
                        {
                            switch (skillindex) { case 0: { attime = 5; break; } case 1: { attime = 6; break; } case 2: { attime = 6; break; } case 3: { attime = 6; break; } case 4: { attime = 7; break; } case 5: { attime = 7; break; } case 6: { attime = 7; break; } case 7: { attime = 8; break; } case 8: { attime = 8; break; } case 9: { attime = 8; break; } }
                            switch (skillindex) { case 0: { updem1 = 0.5; break; } case 1: { updem1 = 0.54; break; } case 2: { updem1 = 0.58; break; } case 3: { updem1 = 0.62; break; } case 4: { updem1 = 0.66; break; } case 5: { updem1 = 0.69; break; } case 6: { updem1 = 0.73; break; } case 7: { updem1 = 0.77; break; } case 8: { updem1 = 0.81; break; } case 9: { updem1 = 0.85; break; } }
                        }
                        else
                        {
                            switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                            switch (skillindex) { case 0: { updem1 = 0.28; break; } case 1: { updem1 = 0.29; break; } case 2: { updem1 = 0.3; break; } case 3: { updem1 = 0.3; break; } case 4: { updem1 = 0.31; break; } case 5: { updem1 = 0.32; break; } case 6: { updem1 = 0.33; break; } case 7: { updem1 = 0.33; break; } case 8: { updem1 = 0.34; break; } case 9: { updem1 = 0.35; break; } }
                        }
                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupdodge[i] *= 1 + updem1;
                                renewindex(i);
                                renewtank();
                            }
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        if (innight)
                        {
                            string read = "(夜)提升全体" + updem1 * 100 + "%回避";
                            renewread(combo, read);
                        }
                        else
                        {
                            string read = "(昼)提升全体" + updem1 * 100 + "%回避";
                            renewread(combo, read);
                        }
                        break;
                    }
                case 102502:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 8; break; } case 1: { attime = 9; break; } case 2: { attime = 10; break; } case 3: { attime = 11; break; } case 4: { attime = 12; break; } case 5: { attime = 12; break; } case 6: { attime = 13; break; } case 7: { attime = 13; break; } case 8: { attime = 14; break; } case 9: { attime = 15; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.55; break; } case 1: { updem1 = 0.6; break; } case 2: { updem1 = 0.65; break; } case 3: { updem1 = 0.7; break; } case 4: { updem1 = 0.75; break; } case 5: { updem1 = 0.8; break; } case 6: { updem1 = 0.85; break; } case 7: { updem1 = 0.9; break; } case 8: { updem1 = 0.95; break; } case 9: { updem1 = 1; break; } }

                        if (ischecked && innight)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skilluphit[i] *= 1 + updem1;
                                renewindex(i);
                            }
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("3");
                        string read = "(夜)提升全体" + updem1 * 100 + "%命中";
                        renewread(combo, read);
                        break;
                    }
                case 102002:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        switch (skillindex) { case 0: { attime = 5; break; } case 1: { attime = 6; break; } case 2: { attime = 6; break; } case 3: { attime = 6; break; } case 4: { attime = 7; break; } case 5: { attime = 7; break; } case 6: { attime = 7; break; } case 7: { attime = 8; break; } case 8: { attime = 8; break; } case 9: { attime = 8; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.06; updem2 = 0.06; break; } case 1: { updem1 = 0.06; updem2 = 0.06; break; } case 2: { updem1 = 0.07; updem2 = 0.07; break; } case 3: { updem1 = 0.07; updem2 = 0.07; break; } case 4: { updem1 = 0.08; updem2 = 0.08; break; } case 5: { updem1 = 0.08; updem2 = 0.08; break; } case 6: { updem1 = 0.08; updem2 = 0.08; break; } case 7: { updem1 = 0.09; updem2 = 0.09; break; } case 8: { updem1 = 0.09; updem2 = 0.09; break; } case 9: { updem1 = 0.10; updem2 = 0.10; break; } }

                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupdamage[i] *= 1 + updem1;
                                skillupshotspeed[i] *= 1 + updem2;
                                renewindex(i);
                            }
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升全体" + updem1 * 100 + "%伤害," + updem2 * 100 + "%射速";
                        renewread(combo, read);
                        break;
                    }
                case 100802:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        switch (skillindex) { case 0: { attime = 5; break; } case 1: { attime = 6; break; } case 2: { attime = 6; break; } case 3: { attime = 6; break; } case 4: { attime = 7; break; } case 5: { attime = 7; break; } case 6: { attime = 7; break; } case 7: { attime = 8; break; } case 8: { attime = 8; break; } case 9: { attime = 8; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.11; break; } case 1: { updem1 = 0.12; break; } case 2: { updem1 = 0.13; break; } case 3: { updem1 = 0.14; break; } case 4: { updem1 = 0.15; break; } case 5: { updem1 = 0.16; break; } case 6: { updem1 = 0.17; break; } case 7: { updem1 = 0.18; break; } case 8: { updem1 = 0.19; break; } case 9: { updem1 = 0.2; break; } }

                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupshotspeed[i] *= 1 + updem1;
                                renewindex(i);
                            }
                        }
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升全体" + updem1 * 100 + "%射速";
                        renewread(combo, read);
                        break;
                    }
                case 101302:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        switch (skillindex) { case 0: { attime = 5; break; } case 1: { attime = 6; break; } case 2: { attime = 6; break; } case 3: { attime = 6; break; } case 4: { attime = 7; break; } case 5: { attime = 7; break; } case 6: { attime = 7; break; } case 7: { attime = 8; break; } case 8: { attime = 8; break; } case 9: { attime = 8; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.15; break; } case 1: { updem1 = 0.16; break; } case 2: { updem1 = 0.17; break; } case 3: { updem1 = 0.18; break; } case 4: { updem1 = 0.19; break; } case 5: { updem1 = 0.21; break; } case 6: { updem1 = 0.22; break; } case 7: { updem1 = 0.23; break; } case 8: { updem1 = 0.24; break; } case 9: { updem1 = 0.25; break; } }

                        if (ischecked)
                        {
                            skilldowndamage *= 1 - updem1;
                            renewtank();
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "降低敌方全体" + updem1 * 100 + "%伤害";
                        renewread(combo, read);
                        break;
                    }
                case 103104:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 2; break; } case 1: { attime = 2.2; break; } case 2: { attime = 2.4; break; } case 3: { attime = 2.7; break; } case 4: { attime = 2.9; break; } case 5: { attime = 3.1; break; } case 6: { attime = 3.3; break; } case 7: { attime = 3.6; break; } case 8: { attime = 3.8; break; } case 9: { attime = 4; break; } }


                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        string read = "力场盾";
                        renewread(combo, read);
                        break;
                    }
                case 102101:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.8; break; } case 1: { updem1 = 1.2; break; } case 2: { updem1 = 1.6; break; } case 3: { updem1 = 2; break; } case 4: { updem1 = 2.4; break; } case 5: { updem1 = 2.9; break; } case 6: { updem1 = 3.3; break; } case 7: { updem1 = 3.7; break; } case 8: { updem1 = 4.1; break; } case 9: { updem1 = 4.5; break; } }

                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("3");
                        string read = "手榴弹,半径2.5," + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 102402:
                    {

                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 2.5; break; } case 1: { attime = 2.7; break; } case 2: { attime = 2.8; break; } case 3: { attime = 3; break; } case 4: { attime = 3.2; break; } case 5: { attime = 3.3; break; } case 6: { attime = 3.5; break; } case 7: { attime = 3.7; break; } case 8: { attime = 3.8; break; } case 9: { attime = 4; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.20; updem2 = 0.30; break; } case 1: { updem1 = 0.22; updem2 = 0.32; break; } case 2: { updem1 = 0.24; updem2 = 0.34; break; } case 3: { updem1 = 0.25; updem2 = 0.37; break; } case 4: { updem1 = 0.27; updem2 = 0.39; break; } case 5: { updem1 = 0.29; updem2 = 0.41; break; } case 6: { updem1 = 0.31; updem2 = 0.43; break; } case 7: { updem1 = 0.32; updem2 = 0.46; break; } case 8: { updem1 = 0.34; updem2 = 0.48; break; } case 9: { updem1 = 0.36; updem2 = 0.50; break; } }

                        //    if (ischecked)
                        //   {
                        //        skilldownhit *= 1 - updem1;
                        //       renewindex(combo);
                        //   }
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("1");
                        string read = "烟雾弹,半径2.5,降射速" + updem1 * 100 + "%移速" + updem2 * 100 + "%(不算)";
                        renewread(combo, read);
                        break;
                    }
                case 100202:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.65; break; } case 1: { updem1 = 0.71; break; } case 2: { updem1 = 0.77; break; } case 3: { updem1 = 0.83; break; } case 4: { updem1 = 0.89; break; } case 5: { updem1 = 0.96; break; } case 6: { updem1 = 1.02; break; } case 7: { updem1 = 1.08; break; } case 8: { updem1 = 1.14; break; } case 9: { updem1 = 1.2; break; } }

                        if (ischecked)
                        {
                            skillupdodge[combo] *= 1 + updem1;
                            renewindex(combo);
                            renewtank();

                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升自身" + updem1 * 100 + "%回避";
                        renewread(combo, read);
                        break;
                    }
                case 102304:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 2; break; } case 1: { attime = 2.4; break; } case 2: { attime = 2.7; break; } case 3: { attime = 3; break; } case 4: { attime = 3.4; break; } case 5: { attime = 3.7; break; } case 6: { attime = 4; break; } case 7: { attime = 4.4; break; } case 8: { attime = 4.7; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 2.50; updem2 = -0.50; break; } case 1: { updem1 = 2.90; updem2 = -0.40; break; } case 2: { updem1 = 3.30; updem2 = -0.4; break; } case 3: { updem1 = 3.70; updem2 = -0.30; break; } case 4: { updem1 = 4.10; updem2 = -0.30; break; } case 5: { updem1 = 4.40; updem2 = -0.20; break; } case 6: { updem1 = 4.80; updem2 = -0.20; break; } case 7: { updem1 = 5.20; updem2 = -0.10; break; } case 8: { updem1 = 5.60; updem2 = -0.10; break; } case 9: { updem1 = 6.00; updem2 = 0.00; break; } }

                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("3");
                        string read = "燃烧弹,半径1.5," + (updem1 + 1) + "倍,每0.33秒" + (updem2 + 1) + "倍(不算)";
                        renewread(combo, read);
                        break;
                    }
                case 102102:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 1; break; } case 1: { updem1 = 1.4; break; } case 2: { updem1 = 1.9; break; } case 3: { updem1 = 2.3; break; } case 4: { updem1 = 2.8; break; } case 5: { updem1 = 3.2; break; } case 6: { updem1 = 3.7; break; } case 7: { updem1 = 4.1; break; } case 8: { updem1 = 4.6; break; } case 9: { updem1 = 5; break; } }

                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("3");
                        string read = "手榴弹,半径2.5," + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 100207:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 5; break; } case 1: { attime = 9; break; } case 2: { attime = 9.7; break; } case 3: { attime = 10.3; break; } case 4: { attime = 11; break; } case 5: { attime = 11.7; break; } case 6: { attime = 12.3; break; } case 7: { attime = 13; break; } case 8: { attime = 13.7; break; } case 9: { attime = 14.3; break; } case 10: { attime = 15; break; } }
                        switch (skillindex) { case 0: { updem1 = 1.5; break; } case 1: { updem1 = 0.25; break; } case 2: { updem1 = 0.27; break; } case 3: { updem1 = 0.29; break; } case 4: { updem1 = 0.32; break; } case 5: { updem1 = 0.34; break; } case 6: { updem1 = 0.36; break; } case 7: { updem1 = 0.38; break; } case 8: { updem1 = 0.41; break; } case 9: { updem1 = 0.43; break; } case 10: { updem1 = 0.45; break; } }

                        if (ischecked)
                        {
                            skillupdodge[combo] *= 1 + updem1;
                            renewindex(combo);
                            renewtank();
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        string read = "提升自身" + updem1 * 100 + "%回避";
                        renewread(combo, read);
                        break;
                    }
                case 102301:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 2; break; } case 1: { attime = 2.4; break; } case 2: { attime = 2.7; break; } case 3: { attime = 3; break; } case 4: { attime = 3.4; break; } case 5: { attime = 3.7; break; } case 6: { attime = 4; break; } case 7: { attime = 4.4; break; } case 8: { attime = 4.7; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 1.80; updem2 = -0.50; break; } case 1: { updem1 = 2.10; updem2 = -0.40; break; } case 2: { updem1 = 2.40; updem2 = -0.40; break; } case 3: { updem1 = 2.70; updem2 = -0.30; break; } case 4: { updem1 = 3.00; updem2 = -0.30; break; } case 5: { updem1 = 3.30; updem2 = -0.20; break; } case 6: { updem1 = 3.60; updem2 = -0.20; break; } case 7: { updem1 = 3.90; updem2 = -0.10; break; } case 8: { updem1 = 4.20; updem2 = -0.10; break; } case 9: { updem1 = 4.50; updem2 = 0.00; break; } }

                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("3");
                        string read = "燃烧弹,半径1.5," + (updem1 + 1) + "倍,每0.33秒" + (updem2 + 1) + "倍(不算)";
                        renewread(combo, read);
                        break;
                    }
                case 103103:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 1.5; break; } case 1: { attime = 1.7; break; } case 2: { attime = 1.8; break; } case 3: { attime = 2; break; } case 4: { attime = 2.2; break; } case 5: { attime = 2.3; break; } case 6: { attime = 2.5; break; } case 7: { attime = 2.7; break; } case 8: { attime = 2.8; break; } case 9: { attime = 3; break; } }


                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        string read = "力场盾";
                        renewread(combo, read);
                        break;
                    }
                case 102302:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 2; break; } case 1: { attime = 2.4; break; } case 2: { attime = 2.7; break; } case 3: { attime = 3; break; } case 4: { attime = 3.4; break; } case 5: { attime = 3.7; break; } case 6: { attime = 4; break; } case 7: { attime = 4.4; break; } case 8: { attime = 4.7; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 2.00; updem2 = -0.50; break; } case 1: { updem1 = 2.30; updem2 = -0.40; break; } case 2: { updem1 = 2.70; updem2 = -0.40; break; } case 3: { updem1 = 3.0; updem2 = -0.3; break; } case 4: { updem1 = 3.3; updem2 = -0.30; break; } case 5: { updem1 = 3.7; updem2 = -0.20; break; } case 6: { updem1 = 4.00; updem2 = -0.20; break; } case 7: { updem1 = 4.30; updem2 = -0.10; break; } case 8: { updem1 = 4.7; updem2 = -0.10; break; } case 9: { updem1 = 5; updem2 = 0.00; break; } }

                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("3");
                        string read = "燃烧弹,半径1.5," + (updem1 + 1) + "倍,每0.33秒" + (updem2 + 1) + "倍(不算)";
                        renewread(combo, read);
                        break;
                    }
                case 102201:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 1.8; break; } case 1: { attime = 2; break; } case 2: { attime = 2.1; break; } case 3: { attime = 2.3; break; } case 4: { attime = 2.4; break; } case 5: { attime = 2.6; break; } case 6: { attime = 2.7; break; } case 7: { attime = 2.9; break; } case 8: { attime = 3; break; } case 9: { attime = 3.2; break; } }


                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        string read = "闪光弹,半径2.5";
                        renewread(combo, read);
                        break;
                    }
                case 103002:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 1.2; break; } case 1: { updem1 = 1.5; break; } case 2: { updem1 = 1.8; break; } case 3: { updem1 = 2.1; break; } case 4: { updem1 = 2.4; break; } case 5: { updem1 = 2.8; break; } case 6: { updem1 = 3.1; break; } case 7: { updem1 = 3.4; break; } case 8: { updem1 = 3.7; break; } case 9: { updem1 = 4; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("10");
                        string read = "1.5s瞄准,当前" + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 100417:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 9; break; } case 1: { attime = 9.7; break; } case 2: { attime = 10.3; break; } case 3: { attime = 11; break; } case 4: { attime = 11.7; break; } case 5: { attime = 12.3; break; } case 6: { attime = 13; break; } case 7: { attime = 13.7; break; } case 8: { attime = 14.3; break; } case 9: { attime = 15; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.22; break; } case 1: { updem1 = 0.24; break; } case 2: { updem1 = 0.26; break; } case 3: { updem1 = 0.28; break; } case 4: { updem1 = 0.3; break; } case 5: { updem1 = 0.32; break; } case 6: { updem1 = 0.34; break; } case 7: { updem1 = 0.36; break; } case 8: { updem1 = 0.38; break; } case 9: { updem1 = 0.4; break; } }

                        if (ischecked)
                        {
                            skillupshotspeed[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        string read = "提升自身" + updem1 * 100 + "%射速";
                        renewread(combo, read);
                        break;
                    }
                case 102803:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 1.5; break; } case 1: { updem1 = 1.8; break; } case 2: { updem1 = 2.2; break; } case 3: { updem1 = 2.5; break; } case 4: { updem1 = 2.8; break; } case 5: { updem1 = 3.2; break; } case 6: { updem1 = 3.5; break; } case 7: { updem1 = 3.8; break; } case 8: { updem1 = 4.2; break; } case 9: { updem1 = 4.5; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("10");
                        string read = "1.5s瞄准,最右" + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 100102:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.35; break; } case 1: { updem1 = 0.38; break; } case 2: { updem1 = 0.41; break; } case 3: { updem1 = 0.43; break; } case 4: { updem1 = 0.46; break; } case 5: { updem1 = 0.49; break; } case 6: { updem1 = 0.52; break; } case 7: { updem1 = 0.54; break; } case 8: { updem1 = 0.57; break; } case 9: { updem1 = 0.6; break; } }

                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        string read = "提升自身" + updem1 * 100 + "%伤害";
                        renewread(combo, read);
                        break;
                    }
                case 102602:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 1.2; break; } case 1: { updem1 = 1.5; break; } case 2: { updem1 = 1.8; break; } case 3: { updem1 = 2.1; break; } case 4: { updem1 = 2.4; break; } case 5: { updem1 = 2.8; break; } case 6: { updem1 = 3.1; break; } case 7: { updem1 = 3.4; break; } case 8: { updem1 = 3.7; break; } case 9: { updem1 = 4; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("10");
                        string read = "1.5s瞄准,特定" + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 102601:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 1; break; } case 1: { updem1 = 1.3; break; } case 2: { updem1 = 1.6; break; } case 3: { updem1 = 1.8; break; } case 4: { updem1 = 2.1; break; } case 5: { updem1 = 2.4; break; } case 6: { updem1 = 2.7; break; } case 7: { updem1 = 2.9; break; } case 8: { updem1 = 3.2; break; } case 9: { updem1 = 3.5; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("10");
                        string read = "1.5s瞄准,特定" + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 100401:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.32; break; } case 1: { updem1 = 0.35; break; } case 2: { updem1 = 0.37; break; } case 3: { updem1 = 0.4; break; } case 4: { updem1 = 0.42; break; } case 5: { updem1 = 0.45; break; } case 6: { updem1 = 0.47; break; } case 7: { updem1 = 0.5; break; } case 8: { updem1 = 0.52; break; } case 9: { updem1 = 0.55; break; } }

                        if (ischecked)
                        {
                            skillupshotspeed[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        string read = "提升自身" + updem1 * 100 + "%射速";
                        renewread(combo, read);
                        break;
                    }
                case 102703:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 2.2; break; } case 1: { updem1 = 2.6; break; } case 2: { updem1 = 3; break; } case 3: { updem1 = 3.5; break; } case 4: { updem1 = 3.9; break; } case 5: { updem1 = 4.3; break; } case 6: { updem1 = 4.7; break; } case 7: { updem1 = 5.2; break; } case 8: { updem1 = 5.6; break; } case 9: { updem1 = 6; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("15");
                        string read = "2s瞄准,最左" + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 100403:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.4; break; } case 1: { updem1 = 0.43; break; } case 2: { updem1 = 0.46; break; } case 3: { updem1 = 0.48; break; } case 4: { updem1 = 0.51; break; } case 5: { updem1 = 0.54; break; } case 6: { updem1 = 0.57; break; } case 7: { updem1 = 0.59; break; } case 8: { updem1 = 0.62; break; } case 9: { updem1 = 0.65; break; } }

                        if (ischecked)
                        {
                            skillupshotspeed[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        string read = "提升自身" + updem1 * 100 + "%射速";
                        renewread(combo, read);
                        break;
                    }
                case 102702:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 1.2; break; } case 1: { updem1 = 1.5; break; } case 2: { updem1 = 1.8; break; } case 3: { updem1 = 2.1; break; } case 4: { updem1 = 2.4; break; } case 5: { updem1 = 2.8; break; } case 6: { updem1 = 3.1; break; } case 7: { updem1 = 3.4; break; } case 8: { updem1 = 3.7; break; } case 9: { updem1 = 4; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("10");
                        string read = "1.5s瞄准,最左" + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 102904:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.5; break; } case 1: { updem1 = 0.7; break; } case 2: { updem1 = 0.9; break; } case 3: { updem1 = 1.2; break; } case 4: { updem1 = 1.4; break; } case 5: { updem1 = 1.6; break; } case 6: { updem1 = 1.8; break; } case 7: { updem1 = 2.1; break; } case 8: { updem1 = 2.3; break; } case 9: { updem1 = 2.5; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        string read = "2次1s瞄准,当前" + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 100413:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        if (innight)
                            switch (skillindex) { case 0: { updem1 = 0.45; break; } case 1: { updem1 = 0.49; break; } case 2: { updem1 = 0.54; break; } case 3: { updem1 = 0.58; break; } case 4: { updem1 = 0.63; break; } case 5: { updem1 = 0.67; break; } case 6: { updem1 = 0.72; break; } case 7: { updem1 = 0.76; break; } case 8: { updem1 = 0.81; break; } case 9: { updem1 = 0.85; break; } }
                        else
                            switch (skillindex) { case 0: { updem1 = 0.15; break; } case 1: { updem1 = 0.16; break; } case 2: { updem1 = 0.18; break; } case 3: { updem1 = 0.19; break; } case 4: { updem1 = 0.21; break; } case 5: { updem1 = 0.22; break; } case 6: { updem1 = 0.24; break; } case 7: { updem1 = 0.25; break; } case 8: { updem1 = 0.27; break; } case 9: { updem1 = 0.28; break; } }
                        if (ischecked)
                        {
                            skillupshotspeed[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        if (innight)
                        {
                            string read = "(夜)提升自身" + updem1 * 100 + "%射速";
                            renewread(combo, read);
                        }
                        else
                        {
                            string read = "(昼)提升自身" + updem1 * 100 + "%射速";
                            renewread(combo, read);
                        }
                        break;
                    }
                case 100404:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.45; break; } case 1: { updem1 = 0.48; break; } case 2: { updem1 = 0.52; break; } case 3: { updem1 = 0.55; break; } case 4: { updem1 = 0.58; break; } case 5: { updem1 = 0.62; break; } case 6: { updem1 = 0.65; break; } case 7: { updem1 = 0.68; break; } case 8: { updem1 = 0.72; break; } case 9: { updem1 = 0.75; break; } }

                        if (ischecked)
                        {
                            skillupshotspeed[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        string read = "提升自身" + updem1 * 100 + "%射速";
                        renewread(combo, read);
                        break;
                    }
                case 100104:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.45; break; } case 1: { updem1 = 0.48; break; } case 2: { updem1 = 0.52; break; } case 3: { updem1 = 0.55; break; } case 4: { updem1 = 0.58; break; } case 5: { updem1 = 0.62; break; } case 6: { updem1 = 0.65; break; } case 7: { updem1 = 0.68; break; } case 8: { updem1 = 0.72; break; } case 9: { updem1 = 0.75; break; } }

                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        string read = "提升自身" + updem1 * 100 + "%伤害";
                        renewread(combo, read);
                        break;
                    }
                case 100101:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.32; break; } case 1: { updem1 = 0.35; break; } case 2: { updem1 = 0.37; break; } case 3: { updem1 = 0.4; break; } case 4: { updem1 = 0.42; break; } case 5: { updem1 = 0.45; break; } case 6: { updem1 = 0.47; break; } case 7: { updem1 = 0.5; break; } case 8: { updem1 = 0.52; break; } case 9: { updem1 = 0.55; break; } }

                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        string read = "提升自身" + updem1 * 100 + "%伤害";
                        renewread(combo, read);
                        break;
                    }
                case 102704:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 2.5; break; } case 1: { updem1 = 3; break; } case 2: { updem1 = 3.5; break; } case 3: { updem1 = 4; break; } case 4: { updem1 = 4.5; break; } case 5: { updem1 = 5; break; } case 6: { updem1 = 5.5; break; } case 7: { updem1 = 6; break; } case 8: { updem1 = 6.5; break; } case 9: { updem1 = 7; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("15");
                        string read = "2s瞄准,最左" + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 102203:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 2.2; break; } case 1: { attime = 2.4; break; } case 2: { attime = 2.6; break; } case 3: { attime = 2.8; break; } case 4: { attime = 3; break; } case 5: { attime = 3.2; break; } case 6: { attime = 3.4; break; } case 7: { attime = 3.6; break; } case 8: { attime = 3.8; break; } case 9: { attime = 4; break; } }


                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        string read = "闪光弹,半径2.5";
                        renewread(combo, read);
                        break;
                    }
                case 100107:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 6; break; } case 1: { attime = 6.4; break; } case 2: { attime = 6.8; break; } case 3: { attime = 7.2; break; } case 4: { attime = 7.6; break; } case 5: { attime = 8; break; } case 6: { attime = 8.4; break; } case 7: { attime = 8.8; break; } case 8: { attime = 9.4; break; } case 9: { attime = 10; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.4; break; } case 1: { updem1 = 0.43; break; } case 2: { updem1 = 0.47; break; } case 3: { updem1 = 0.5; break; } case 4: { updem1 = 0.53; break; } case 5: { updem1 = 0.57; break; } case 6: { updem1 = 0.6; break; } case 7: { updem1 = 0.63; break; } case 8: { updem1 = 0.67; break; } case 9: { updem1 = 0.7; break; } }

                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("4");
                        string read = "提升自身" + updem1 * 100 + "%伤害";
                        renewread(combo, read);
                        break;
                    }
                case 102112:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 5; break; } case 1: { updem1 = 6; break; } case 2: { updem1 = 7; break; } case 3: { updem1 = 8; break; } case 4: { updem1 = 9; break; } case 5: { updem1 = 10; break; } case 6: { updem1 = 11; break; } case 7: { updem1 = 12; break; } case 8: { updem1 = 13; break; } case 9: { updem1 = 14; break; } }

                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        string read = "杀伤榴弹,半径1.5," + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 102113:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 4; break; } case 1: { updem1 = 4.8; break; } case 2: { updem1 = 5.6; break; } case 3: { updem1 = 6.3; break; } case 4: { updem1 = 7.1; break; } case 5: { updem1 = 7.9; break; } case 6: { updem1 = 8.7; break; } case 7: { updem1 = 9.4; break; } case 8: { updem1 = 10.2; break; } case 9: { updem1 = 11; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        string read = "杀伤榴弹,半径1.5," + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 100407:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 9; break; } case 1: { attime = 9.7; break; } case 2: { attime = 10.3; break; } case 3: { attime = 11; break; } case 4: { attime = 11.7; break; } case 5: { attime = 12.3; break; } case 6: { attime = 13; break; } case 7: { attime = 13.7; break; } case 8: { attime = 14.3; break; } case 9: { attime = 15; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.25; break; } case 1: { updem1 = 0.27; break; } case 2: { updem1 = 0.29; break; } case 3: { updem1 = 0.32; break; } case 4: { updem1 = 0.34; break; } case 5: { updem1 = 0.36; break; } case 6: { updem1 = 0.38; break; } case 7: { updem1 = 0.41; break; } case 8: { updem1 = 0.43; break; } case 9: { updem1 = 0.45; break; } }

                        if (ischecked)
                        {
                            skillupshotspeed[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("4");
                        string read = "提升自身" + updem1 * 100 + "%射速";
                        renewread(combo, read);
                        break;
                    }
                case 101802:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.15; updem2 = 0.50; break; } case 1: { updem1 = 0.17; updem2 = 0.56; break; } case 2: { updem1 = 0.19; updem2 = 0.61; break; } case 3: { updem1 = 0.22; updem2 = 0.67; break; } case 4: { updem1 = 0.24; updem2 = 0.72; break; } case 5: { updem1 = 0.26; updem2 = 0.78; break; } case 6: { updem1 = 0.28; updem2 = 0.83; break; } case 7: { updem1 = 0.31; updem2 = 0.89; break; } case 8: { updem1 = 0.33; updem2 = 0.94; break; } case 9: { updem1 = 0.35; updem2 = 1.00; break; } }

                        if (ischecked)
                        {

                            skillupdamage[combo] *= 1 + updem1;
                            skilluphit[combo] *= 1 + updem2;
                            renewindex(combo);

                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        string read = "提升自身" + updem1 * 100 + "%伤害," + updem2 * 100 + "%命中";
                        renewread(combo, read);
                        break;
                    }
                case 100115:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 3.67; break; } case 1: { attime = 3.93; break; } case 2: { attime = 4.20; break; } case 3: { attime = 4.43; break; } case 4: { attime = 4.70; break; } case 5: { attime = 4.97; break; } case 6: { attime = 5.23; break; } case 7: { attime = 5.47; break; } case 8: { attime = 5.73; break; } case 9: { attime = 6.00; break; } }
                        if (innight)
                            switch (skillindex) { case 0: { updem1 = 1.1; break; } case 1: { updem1 = 1.18; break; } case 2: { updem1 = 1.26; break; } case 3: { updem1 = 1.33; break; } case 4: { updem1 = 1.41; break; } case 5: { updem1 = 1.49; break; } case 6: { updem1 = 1.57; break; } case 7: { updem1 = 1.64; break; } case 8: { updem1 = 1.72; break; } case 9: { updem1 = 1.8; break; } }
                        else
                            switch (skillindex) { case 0: { updem1 = 0.35; break; } case 1: { updem1 = 0.38; break; } case 2: { updem1 = 0.41; break; } case 3: { updem1 = 0.43; break; } case 4: { updem1 = 0.46; break; } case 5: { updem1 = 0.49; break; } case 6: { updem1 = 0.52; break; } case 7: { updem1 = 0.54; break; } case 8: { updem1 = 0.57; break; } case 9: { updem1 = 0.6; break; } }
                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        if (innight)
                        {
                            string read = "(夜)提升自身" + updem1 * 100 + "%伤害";
                            renewread(combo, read);
                        }
                        else
                        {
                            string read = "(昼)提升自身" + updem1 * 100 + "%伤害";
                            renewread(combo, read);
                        }
                        break;
                    }
                case 102106:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 0; break; } case 1: { updem1 = 0.2; break; } case 2: { updem1 = 0.3; break; } case 3: { updem1 = 0.5; break; } case 4: { updem1 = 0.7; break; } case 5: { updem1 = 0.8; break; } case 6: { updem1 = 1; break; } case 7: { updem1 = 1.2; break; } case 8: { updem1 = 1.3; break; } case 9: { updem1 = 1.5; break; } }

                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        string read = "爆破榴弹,半径4," + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 100108:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20.00; break; } case 1: { cdtime = 19.60; break; } case 2: { cdtime = 19.10; break; } case 3: { cdtime = 18.70; break; } case 4: { cdtime = 18.20; break; } case 5: { cdtime = 17.80; break; } case 6: { cdtime = 17.30; break; } case 7: { cdtime = 16.90; break; } case 8: { cdtime = 16.40; break; } case 9: { cdtime = 16.00; break; } }
                        switch (skillindex) { case 0: { attime = 6.00; break; } case 1: { attime = 6.40; break; } case 2: { attime = 6.80; break; } case 3: { attime = 7.20; break; } case 4: { attime = 7.60; break; } case 5: { attime = 8.00; break; } case 6: { attime = 8.40; break; } case 7: { attime = 8.80; break; } case 8: { attime = 9.40; break; } case 9: { attime = 10.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.45; break; } case 1: { updem1 = 0.48; break; } case 2: { updem1 = 0.52; break; } case 3: { updem1 = 0.55; break; } case 4: { updem1 = 0.58; break; } case 5: { updem1 = 0.62; break; } case 6: { updem1 = 0.65; break; } case 7: { updem1 = 0.68; break; } case 8: { updem1 = 0.72; break; } case 9: { updem1 = 0.75; break; } }

                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("4");
                        string read = "提升自身" + updem1 * 100 + "%伤害";
                        renewread(combo, read);
                        break;
                    }
                case 102109:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 3; break; } case 1: { updem1 = 3.7; break; } case 2: { updem1 = 4.3; break; } case 3: { updem1 = 5; break; } case 4: { updem1 = 5.7; break; } case 5: { updem1 = 6.3; break; } case 6: { updem1 = 7; break; } case 7: { updem1 = 7.7; break; } case 8: { updem1 = 8.3; break; } case 9: { updem1 = 9; break; } }


                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        string read = "杀伤榴弹,半径1.5," + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 102108:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 0; break; } case 1: { updem1 = 0.2; break; } case 2: { updem1 = 0.4; break; } case 3: { updem1 = 0.6; break; } case 4: { updem1 = 0.8; break; } case 5: { updem1 = 1; break; } case 6: { updem1 = 1.2; break; } case 7: { updem1 = 1.4; break; } case 8: { updem1 = 1.6; break; } case 9: { updem1 = 1.8; break; } }


                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        string read = "爆破榴弹,半径4," + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 102107:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 0; break; } case 1: { updem1 = 0.2; break; } case 2: { updem1 = 0.4; break; } case 3: { updem1 = 0.5; break; } case 4: { updem1 = 0.7; break; } case 5: { updem1 = 0.9; break; } case 6: { updem1 = 1.1; break; } case 7: { updem1 = 1.2; break; } case 8: { updem1 = 1.4; break; } case 9: { updem1 = 1.6; break; } }


                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        string read = "爆破榴弹,半径4," + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 101701:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3.00; break; } case 1: { attime = 3.20; break; } case 2: { attime = 3.40; break; } case 3: { attime = 3.70; break; } case 4: { attime = 3.90; break; } case 5: { attime = 4.10; break; } case 6: { attime = 4.30; break; } case 7: { attime = 4.60; break; } case 8: { attime = 4.80; break; } case 9: { attime = 5.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.2; updem2 = 0.1; break; } case 1: { updem1 = 0.22; updem2 = 0.11; break; } case 2: { updem1 = 0.23; updem2 = 0.11; break; } case 3: { updem1 = 0.25; updem2 = 0.12; break; } case 4: { updem1 = 0.27; updem2 = 0.12; break; } case 5: { updem1 = 0.28; updem2 = 0.13; break; } case 6: { updem1 = 0.3; updem2 = 0.13; break; } case 7: { updem1 = 0.32; updem2 = 0.14; break; } case 8: { updem1 = 0.33; updem2 = 0.14; break; } case 9: { updem1 = 0.35; updem2 = 0.15; break; } }

                        if (ischecked)
                        {

                            skillupdamage[combo] *= 1 + updem1;
                            skillupshotspeed[combo] *= 1 + updem2;
                            renewindex(combo);

                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升自身" + updem1 * 100 + "%伤害," + updem2 * 100 + "%射速";
                        renewread(combo, read);
                        break;
                    }
                case 100301:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20.00; break; } case 1: { cdtime = 19.60; break; } case 2: { cdtime = 19.10; break; } case 3: { cdtime = 18.70; break; } case 4: { cdtime = 18.20; break; } case 5: { cdtime = 17.80; break; } case 6: { cdtime = 17.30; break; } case 7: { cdtime = 16.90; break; } case 8: { cdtime = 16.40; break; } case 9: { cdtime = 16.00; break; } }
                        switch (skillindex) { case 0: { attime = 9.00; break; } case 1: { attime = 9.70; break; } case 2: { attime = 10.30; break; } case 3: { attime = 11.00; break; } case 4: { attime = 11.70; break; } case 5: { attime = 12.30; break; } case 6: { attime = 13.00; break; } case 7: { attime = 13.70; break; } case 8: { attime = 14.30; break; } case 9: { attime = 15.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 2; break; } case 1: { updem1 = 2.33; break; } case 2: { updem1 = 2.67; break; } case 3: { updem1 = 3; break; } case 4: { updem1 = 3.33; break; } case 5: { updem1 = 3.67; break; } case 6: { updem1 = 4; break; } case 7: { updem1 = 4.33; break; } case 8: { updem1 = 4.67; break; } case 9: { updem1 = 5; break; } }

                        if (ischecked)
                        {
                            skilluphit[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        string read = "提升自身" + updem1 * 100 + "%命中";
                        renewread(combo, read);
                        break;
                    }
                case 101703:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20.00; break; } case 1: { cdtime = 19.60; break; } case 2: { cdtime = 19.10; break; } case 3: { cdtime = 18.70; break; } case 4: { cdtime = 18.20; break; } case 5: { cdtime = 17.80; break; } case 6: { cdtime = 17.30; break; } case 7: { cdtime = 16.90; break; } case 8: { cdtime = 16.40; break; } case 9: { cdtime = 16.00; break; } }
                        switch (skillindex) { case 0: { attime = 3.00; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.4; updem2 = 0.15; break; } case 1: { updem1 = 0.43; updem2 = 0.16; break; } case 2: { updem1 = 0.46; updem2 = 0.17; break; } case 3: { updem1 = 0.48; updem2 = 0.18; break; } case 4: { updem1 = 0.51; updem2 = 0.19; break; } case 5: { updem1 = 0.54; updem2 = 0.21; break; } case 6: { updem1 = 0.57; updem2 = 0.22; break; } case 7: { updem1 = 0.59; updem2 = 0.23; break; } case 8: { updem1 = 0.62; updem2 = 0.24; break; } case 9: { updem1 = 0.65; updem2 = 0.25; break; } }

                        if (ischecked)
                        {

                            skillupdamage[combo] *= 1 + updem1;
                            skillupshotspeed[combo] *= 1 + updem2;
                            renewindex(combo);

                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升自身" + updem1 * 100 + "%伤害," + updem2 * 100 + "%射速";
                        renewread(combo, read);
                        break;
                    }
                case 100111:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 18.00; break; } case 1: { cdtime = 18.00; break; } case 2: { cdtime = 18.00; break; } case 3: { cdtime = 18.00; break; } case 4: { cdtime = 18.00; break; } case 5: { cdtime = 18.00; break; } case 6: { cdtime = 18.00; break; } case 7: { cdtime = 18.00; break; } case 8: { cdtime = 18.00; break; } case 9: { cdtime = 18.00; break; } }
                        switch (skillindex) { case 0: { attime = 4.00; break; } case 1: { attime = 4.20; break; } case 2: { attime = 4.40; break; } case 3: { attime = 4.70; break; } case 4: { attime = 4.90; break; } case 5: { attime = 5.10; break; } case 6: { attime = 5.30; break; } case 7: { attime = 5.60; break; } case 8: { attime = 5.80; break; } case 9: { attime = 6.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.25; break; } case 1: { updem1 = 0.3; break; } case 2: { updem1 = 0.35; break; } case 3: { updem1 = 0.4; break; } case 4: { updem1 = 0.45; break; } case 5: { updem1 = 0.5; break; } case 6: { updem1 = 0.55; break; } case 7: { updem1 = 0.6; break; } case 8: { updem1 = 0.65; break; } case 9: { updem1 = 0.7; break; } }

                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        string read = "提升自身" + updem1 * 100 + "%伤害";
                        renewread(combo, read);
                        break;
                    }
                case 301502:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { updem1 = 0.2; break; } case 1: { updem1 = 0.3; break; } case 2: { updem1 = 0.5; break; } case 3: { updem1 = 0.6; break; } case 4: { updem1 = 0.7; break; } case 5: { updem1 = 0.9; break; } case 6: { updem1 = 1; break; } case 7: { updem1 = 1.1; break; } case 8: { updem1 = 1.3; break; } case 9: { updem1 = 1.4; break; } }

                        //   if (ischecked)
                        //   {
                        skilluprenju[combo] = 1 + updem1;
                        renewindex(combo);
                        //   }

                        //     string cd = "(此技能算法未写,暂时平均加到伤害上)";
                        gun[index].cd = -1;
                        renewattime(combo, "99");
                        gun[index].startcd = ("-1");
                        string read = "被动,每攻击3次,下次伤害" + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 100117:
                    {
                        double cdtime = 18;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { attime = 4.00; break; } case 1: { attime = 4.20; break; } case 2: { attime = 4.40; break; } case 3: { attime = 4.70; break; } case 4: { attime = 4.90; break; } case 5: { attime = 5.10; break; } case 6: { attime = 5.30; break; } case 7: { attime = 5.60; break; } case 8: { attime = 5.80; break; } case 9: { attime = 6.00; break; } }
                        if (innight)
                            switch (skillindex) { case 0: { updem1 = 0.4; break; } case 1: { updem1 = 0.47; break; } case 2: { updem1 = 0.54; break; } case 3: { updem1 = 0.62; break; } case 4: { updem1 = 0.69; break; } case 5: { updem1 = 0.76; break; } case 6: { updem1 = 0.83; break; } case 7: { updem1 = 0.91; break; } case 8: { updem1 = 0.98; break; } case 9: { updem1 = 1.05; break; } }
                        else
                            switch (skillindex) { case 0: { updem1 = 0.12; break; } case 1: { updem1 = 0.15; break; } case 2: { updem1 = 0.17; break; } case 3: { updem1 = 0.2; break; } case 4: { updem1 = 0.22; break; } case 5: { updem1 = 0.25; break; } case 6: { updem1 = 0.27; break; } case 7: { updem1 = 0.3; break; } case 8: { updem1 = 0.32; break; } case 9: { updem1 = 0.35; break; } }
                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        if (innight)
                        {
                            string read = "(夜)提升自身" + updem1 * 100 + "%伤害";
                            renewread(combo, read);
                        }
                        else
                        {
                            string read = "(昼)提升自身" + updem1 * 100 + "%伤害";
                            renewread(combo, read);
                        }
                        break;
                    }
                case 105101:
                    {
                        double cdtime = 18;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { attime = 6.00; break; } case 1: { attime = 6.20; break; } case 2: { attime = 6.40; break; } case 3: { attime = 6.70; break; } case 4: { attime = 6.90; break; } case 5: { attime = 7.10; break; } case 6: { attime = 7.30; break; } case 7: { attime = 7.60; break; } case 8: { attime = 7.80; break; } case 9: { attime = 8.00; break; } }
                        if (innight)
                            switch (skillindex) { case 0: { updem1 = 0.25; break; } case 1: { updem1 = 0.27; break; } case 2: { updem1 = 0.29; break; } case 3: { updem1 = 0.32; break; } case 4: { updem1 = 0.34; break; } case 5: { updem1 = 0.36; break; } case 6: { updem1 = 0.38; break; } case 7: { updem1 = 0.41; break; } case 8: { updem1 = 0.43; break; } case 9: { updem1 = 0.45; break; } }
                        else
                            switch (skillindex) { case 0: { updem1 = 0.05; break; } case 1: { updem1 = 0.06; break; } case 2: { updem1 = 0.06; break; } case 3: { updem1 = 0.07; break; } case 4: { updem1 = 0.07; break; } case 5: { updem1 = 0.08; break; } case 6: { updem1 = 0.08; break; } case 7: { updem1 = 0.09; break; } case 8: { updem1 = 0.09; break; } case 9: { updem1 = 0.1; break; } }

                        switch (skillindex) { case 0: { updem2 = 1; break; } case 1: { updem2 = 2; break; } case 2: { updem2 = 2; break; } case 3: { updem2 = 2; break; } case 4: { updem2 = 2; break; } case 5: { updem2 = 3; break; } case 6: { updem2 = 3; break; } case 7: { updem2 = 3; break; } case 8: { updem2 = 3; break; } case 9: { updem2 = 4; break; } }


                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            skillupbelt[combo] += updem2;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        if (innight)
                        {
                            string read = "(夜)提升自身" + updem1 * 100 + "%伤害,弹链+" + updem2 + "(不算弹链时间)";
                            renewread(combo, read);
                        }
                        else
                        {
                            string read = "(昼)提升自身" + updem1 * 100 + "%伤害,弹链+" + updem2 + "(不算弹链时间)";
                            renewread(combo, read);
                        }
                        break;
                    }
                case 105202:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 18.00; break; } case 1: { cdtime = 18.00; break; } case 2: { cdtime = 18.00; break; } case 3: { cdtime = 18.00; break; } case 4: { cdtime = 18.00; break; } case 5: { cdtime = 18.00; break; } case 6: { cdtime = 18.00; break; } case 7: { cdtime = 18.00; break; } case 8: { cdtime = 18.00; break; } case 9: { cdtime = 18.00; break; } }
                        switch (skillindex) { case 0: { attime = 1.00; break; } case 1: { attime = 1.60; break; } case 2: { attime = 2.10; break; } case 3: { attime = 2.70; break; } case 4: { attime = 3.20; break; } case 5: { attime = 3.80; break; } case 6: { attime = 4.30; break; } case 7: { attime = 4.90; break; } case 8: { attime = 5.40; break; } case 9: { attime = 6.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.25; break; } case 1: { updem1 = 0.29; break; } case 2: { updem1 = 0.34; break; } case 3: { updem1 = 0.38; break; } case 4: { updem1 = 0.43; break; } case 5: { updem1 = 0.47; break; } case 6: { updem1 = 0.52; break; } case 7: { updem1 = 0.56; break; } case 8: { updem1 = 0.61; break; } case 9: { updem1 = 0.65; break; } }

                        if (ischecked)
                        {
                            skilluphit[combo] *= 1 + updem1;
                            isfullcrit[combo] = true;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("3");
                        string read = "提升自身" + updem1 * 100 + "%命中,必爆";
                        renewread(combo, read);
                        break;
                    }
                case 105201:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 18.00; break; } case 1: { cdtime = 18.00; break; } case 2: { cdtime = 18.00; break; } case 3: { cdtime = 18.00; break; } case 4: { cdtime = 18.00; break; } case 5: { cdtime = 18.00; break; } case 6: { cdtime = 18.00; break; } case 7: { cdtime = 18.00; break; } case 8: { cdtime = 18.00; break; } case 9: { cdtime = 18.00; break; } }
                        switch (skillindex) { case 0: { attime = 1.00; break; } case 1: { attime = 1.60; break; } case 2: { attime = 2.10; break; } case 3: { attime = 2.70; break; } case 4: { attime = 3.20; break; } case 5: { attime = 3.80; break; } case 6: { attime = 4.30; break; } case 7: { attime = 4.90; break; } case 8: { attime = 5.40; break; } case 9: { attime = 6.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.22; break; } case 1: { updem1 = 0.25; break; } case 2: { updem1 = 0.3; break; } case 3: { updem1 = 0.35; break; } case 4: { updem1 = 0.39; break; } case 5: { updem1 = 0.43; break; } case 6: { updem1 = 0.47; break; } case 7: { updem1 = 0.52; break; } case 8: { updem1 = 0.56; break; } case 9: { updem1 = 0.60; break; } }

                        if (ischecked)
                        {
                            skilluphit[combo] *= 1 + updem1;
                            isfullcrit[combo] = true;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("3");
                        string read = "提升自身" + updem1 * 100 + "%命中,必爆";
                        renewread(combo, read);
                        break;
                    }
                case 105102:
                    {
                        double cdtime = 18;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { attime = 4.00; break; } case 1: { attime = 4.20; break; } case 2: { attime = 4.40; break; } case 3: { attime = 4.70; break; } case 4: { attime = 4.90; break; } case 5: { attime = 5.10; break; } case 6: { attime = 5.30; break; } case 7: { attime = 5.60; break; } case 8: { attime = 5.80; break; } case 9: { attime = 6.00; break; } }

                        switch (skillindex) { case 0: { updem1 = 0.16; break; } case 1: { updem1 = 0.17; break; } case 2: { updem1 = 0.19; break; } case 3: { updem1 = 0.2; break; } case 4: { updem1 = 0.21; break; } case 5: { updem1 = 0.23; break; } case 6: { updem1 = 0.24; break; } case 7: { updem1 = 0.25; break; } case 8: { updem1 = 0.27; break; } case 9: { updem1 = 0.28; break; } }

                        switch (skillindex) { case 0: { updem2 = 1; break; } case 1: { updem2 = 1; break; } case 2: { updem2 = 2; break; } case 3: { updem2 = 2; break; } case 4: { updem2 = 2; break; } case 5: { updem2 = 3; break; } case 6: { updem2 = 3; break; } case 7: { updem2 = 3; break; } case 8: { updem2 = 3; break; } case 9: { updem2 = 3; break; } }


                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            skillupbelt[combo] += updem2;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");


                        string read = "提升自身" + updem1 * 100 + "%伤害,弹链+" + updem2 + "(不算弹链时间)";
                        renewread(combo, read);
                        break;
                    }
                case 100110:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 18.00; break; } case 1: { cdtime = 18.00; break; } case 2: { cdtime = 18.00; break; } case 3: { cdtime = 18.00; break; } case 4: { cdtime = 18.00; break; } case 5: { cdtime = 18.00; break; } case 6: { cdtime = 18.00; break; } case 7: { cdtime = 18.00; break; } case 8: { cdtime = 18.00; break; } case 9: { cdtime = 18.00; break; } }
                        switch (skillindex) { case 0: { attime = 4.00; break; } case 1: { attime = 4.20; break; } case 2: { attime = 4.40; break; } case 3: { attime = 4.70; break; } case 4: { attime = 4.90; break; } case 5: { attime = 5.10; break; } case 6: { attime = 5.30; break; } case 7: { attime = 5.60; break; } case 8: { attime = 5.80; break; } case 9: { attime = 6.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.22; break; } case 1: { updem1 = 0.27; break; } case 2: { updem1 = 0.32; break; } case 3: { updem1 = 0.36; break; } case 4: { updem1 = 0.41; break; } case 5: { updem1 = 0.46; break; } case 6: { updem1 = 0.51; break; } case 7: { updem1 = 0.55; break; } case 8: { updem1 = 0.6; break; } case 9: { updem1 = 0.65; break; } }

                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升自身" + updem1 * 100 + "%伤害";
                        renewread(combo, read);
                        break;
                    }
                case 301503:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { updem1 = 0.5; break; } case 1: { updem1 = 0.6; break; } case 2: { updem1 = 0.7; break; } case 3: { updem1 = 0.9; break; } case 4: { updem1 = 1; break; } case 5: { updem1 = 1.1; break; } case 6: { updem1 = 1.2; break; } case 7: { updem1 = 1.4; break; } case 8: { updem1 = 1.5; break; } case 9: { updem1 = 1.6; break; } }


                        skilluprenju[combo] = 1 + updem1;
                        renewindex(combo);


                        //   string cd = "(此技能算法未写,暂时平均加到伤害上)";
                        gun[index].cd = -1;
                        renewattime(combo, "99");
                        gun[index].startcd = ("-1");
                        string read = "被动,每攻击3次,下次伤害" + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 100109:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 18.00; break; } case 1: { cdtime = 18.00; break; } case 2: { cdtime = 18.00; break; } case 3: { cdtime = 18.00; break; } case 4: { cdtime = 18.00; break; } case 5: { cdtime = 18.00; break; } case 6: { cdtime = 18.00; break; } case 7: { cdtime = 18.00; break; } case 8: { cdtime = 18.00; break; } case 9: { cdtime = 18.00; break; } }
                        switch (skillindex) { case 0: { attime = 4.00; break; } case 1: { attime = 4.20; break; } case 2: { attime = 4.40; break; } case 3: { attime = 4.70; break; } case 4: { attime = 4.90; break; } case 5: { attime = 5.10; break; } case 6: { attime = 5.30; break; } case 7: { attime = 5.60; break; } case 8: { attime = 5.80; break; } case 9: { attime = 6.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.2; break; } case 1: { updem1 = 0.24; break; } case 2: { updem1 = 0.29; break; } case 3: { updem1 = 0.33; break; } case 4: { updem1 = 0.38; break; } case 5: { updem1 = 0.42; break; } case 6: { updem1 = 0.47; break; } case 7: { updem1 = 0.51; break; } case 8: { updem1 = 0.56; break; } case 9: { updem1 = 0.6; break; } }

                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升自身" + updem1 * 100 + "%伤害";
                        renewread(combo, read);
                        break;
                    }
                case 105104:
                    {
                        double cdtime = 18;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { attime = 6.00; break; } case 1: { attime = 6.20; break; } case 2: { attime = 6.40; break; } case 3: { attime = 6.70; break; } case 4: { attime = 6.90; break; } case 5: { attime = 7.10; break; } case 6: { attime = 7.30; break; } case 7: { attime = 7.60; break; } case 8: { attime = 7.80; break; } case 9: { attime = 8.00; break; } }

                        switch (skillindex) { case 0: { updem1 = 0.18; break; } case 1: { updem1 = 0.19; break; } case 2: { updem1 = 0.21; break; } case 3: { updem1 = 0.22; break; } case 4: { updem1 = 0.23; break; } case 5: { updem1 = 0.25; break; } case 6: { updem1 = 0.26; break; } case 7: { updem1 = 0.27; break; } case 8: { updem1 = 0.29; break; } case 9: { updem1 = 0.3; break; } }

                        switch (skillindex) { case 0: { updem2 = 1; break; } case 1: { updem2 = 2; break; } case 2: { updem2 = 2; break; } case 3: { updem2 = 2; break; } case 4: { updem2 = 2; break; } case 5: { updem2 = 3; break; } case 6: { updem2 = 3; break; } case 7: { updem2 = 3; break; } case 8: { updem2 = 3; break; } case 9: { updem2 = 4; break; } }


                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            skillupbelt[combo] += updem2;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");


                        string read = "提升自身" + updem1 * 100 + "%伤害,弹链+" + updem2 + "(不算弹链时间)";
                        renewread(combo, read);
                        break;
                    }
                case 105103:
                    {
                        double cdtime = 18;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { attime = 6.00; break; } case 1: { attime = 6.20; break; } case 2: { attime = 6.40; break; } case 3: { attime = 6.70; break; } case 4: { attime = 6.90; break; } case 5: { attime = 7.10; break; } case 6: { attime = 7.30; break; } case 7: { attime = 7.60; break; } case 8: { attime = 7.80; break; } case 9: { attime = 8.00; break; } }

                        switch (skillindex) { case 0: { updem1 = 0.18; break; } case 1: { updem1 = 0.19; break; } case 2: { updem1 = 0.21; break; } case 3: { updem1 = 0.22; break; } case 4: { updem1 = 0.23; break; } case 5: { updem1 = 0.25; break; } case 6: { updem1 = 0.26; break; } case 7: { updem1 = 0.27; break; } case 8: { updem1 = 0.29; break; } case 9: { updem1 = 0.3; break; } }

                        switch (skillindex) { case 0: { updem2 = 1; break; } case 1: { updem2 = 1; break; } case 2: { updem2 = 2; break; } case 3: { updem2 = 2; break; } case 4: { updem2 = 2; break; } case 5: { updem2 = 3; break; } case 6: { updem2 = 3; break; } case 7: { updem2 = 3; break; } case 8: { updem2 = 3; break; } case 9: { updem2 = 3; break; } }


                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            skillupbelt[combo] += updem2;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");


                        string read = "提升自身" + updem1 * 100 + "%伤害,弹链+" + updem2 + "(不算弹链时间)";
                        renewread(combo, read);
                        break;
                    }
                case 101401:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15.00; break; } case 1: { cdtime = 14.70; break; } case 2: { cdtime = 14.30; break; } case 3: { cdtime = 14.00; break; } case 4: { cdtime = 13.70; break; } case 5: { cdtime = 13.30; break; } case 6: { cdtime = 13.00; break; } case 7: { cdtime = 12.70; break; } case 8: { cdtime = 12.30; break; } case 9: { cdtime = 12.00; break; } }
                        switch (skillindex) { case 0: { attime = 5.00; break; } case 1: { attime = 6.00; break; } case 2: { attime = 6.00; break; } case 3: { attime = 6.00; break; } case 4: { attime = 7.00; break; } case 5: { attime = 7.00; break; } case 6: { attime = 7.00; break; } case 7: { attime = 8.00; break; } case 8: { attime = 8.00; break; } case 9: { attime = 8.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.32; break; } case 1: { updem1 = 0.33; break; } case 2: { updem1 = 0.34; break; } case 3: { updem1 = 0.35; break; } case 4: { updem1 = 0.36; break; } case 5: { updem1 = 0.36; break; } case 6: { updem1 = 0.37; break; } case 7: { updem1 = 0.38; break; } case 8: { updem1 = 0.39; break; } case 9: { updem1 = 0.4; break; } }

                        if (ischecked)
                        {
                            skilldowndodge *= 1 - updem1;
                            for (int i = 0; i < 9; i++)
                            {
                                renewindex(i);
                            }
                        }


                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "降低敌方全体" + updem1 * 100 + "%回避";
                        renewread(combo, read);
                        break;
                    }
                case 101601:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15.00; break; } case 1: { cdtime = 14.70; break; } case 2: { cdtime = 14.30; break; } case 3: { cdtime = 14.00; break; } case 4: { cdtime = 13.70; break; } case 5: { cdtime = 13.30; break; } case 6: { cdtime = 13.00; break; } case 7: { cdtime = 12.70; break; } case 8: { cdtime = 12.30; break; } case 9: { cdtime = 12.00; break; } }
                        switch (skillindex) { case 0: { attime = 5.00; break; } case 1: { attime = 6.00; break; } case 2: { attime = 6.00; break; } case 3: { attime = 6.00; break; } case 4: { attime = 7.00; break; } case 5: { attime = 7.00; break; } case 6: { attime = 7.00; break; } case 7: { attime = 8.00; break; } case 8: { attime = 8.00; break; } case 9: { attime = 8.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.12; break; } case 1: { updem1 = 0.13; break; } case 2: { updem1 = 0.14; break; } case 3: { updem1 = 0.15; break; } case 4: { updem1 = 0.16; break; } case 5: { updem1 = 0.18; break; } case 6: { updem1 = 0.19; break; } case 7: { updem1 = 0.2; break; } case 8: { updem1 = 0.21; break; } case 9: { updem1 = 0.22; break; } }




                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "降低敌方全体" + updem1 * 100 + "%射速(不算)";
                        renewread(combo, read);
                        break;
                    }
                case 100201:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3.00; break; } case 1: { attime = 3.20; break; } case 2: { attime = 3.40; break; } case 3: { attime = 3.70; break; } case 4: { attime = 3.90; break; } case 5: { attime = 4.10; break; } case 6: { attime = 4.30; break; } case 7: { attime = 4.60; break; } case 8: { attime = 4.80; break; } case 9: { attime = 5.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.6; break; } case 1: { updem1 = 0.66; break; } case 2: { updem1 = 0.71; break; } case 3: { updem1 = 0.77; break; } case 4: { updem1 = 0.82; break; } case 5: { updem1 = 0.88; break; } case 6: { updem1 = 0.93; break; } case 7: { updem1 = 0.99; break; } case 8: { updem1 = 1.04; break; } case 9: { updem1 = 1.1; break; } }

                        if (ischecked)
                        {
                            skillupdodge[combo] *= 1 + updem1;
                            renewindex(combo);
                            renewtank();
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升自身" + updem1 * 100 + "%回避";
                        renewread(combo, read);
                        break;
                    }

                case 100114:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10.00; break; } case 1: { cdtime = 9.80; break; } case 2: { cdtime = 9.60; break; } case 3: { cdtime = 9.30; break; } case 4: { cdtime = 9.10; break; } case 5: { cdtime = 8.90; break; } case 6: { cdtime = 8.70; break; } case 7: { cdtime = 8.40; break; } case 8: { cdtime = 8.20; break; } case 9: { cdtime = 8.00; break; } }
                        if (innight)
                        {
                            switch (skillindex) { case 0: { attime = 6.00; break; } case 1: { attime = 6.40; break; } case 2: { attime = 6.80; break; } case 3: { attime = 7.40; break; } case 4: { attime = 7.80; break; } case 5: { attime = 8.20; break; } case 6: { attime = 8.60; break; } case 7: { attime = 9.20; break; } case 8: { attime = 9.60; break; } case 9: { attime = 10.00; break; } }
                            switch (skillindex) { case 0: { updem1 = 0.5; break; } case 1: { updem1 = 0.54; break; } case 2: { updem1 = 0.59; break; } case 3: { updem1 = 0.63; break; } case 4: { updem1 = 0.68; break; } case 5: { updem1 = 0.72; break; } case 6: { updem1 = 0.77; break; } case 7: { updem1 = 0.81; break; } case 8: { updem1 = 0.86; break; } case 9: { updem1 = 0.9; break; } }
                        }
                        else
                        {
                            switch (skillindex) { case 0: { attime = 3.5; break; } case 1: { attime = 3.8; break; } case 2: { attime = 4.1; break; } case 3: { attime = 4.3; break; } case 4: { attime = 4.6; break; } case 5: { attime = 4.9; break; } case 6: { attime = 5.2; break; } case 7: { attime = 5.4; break; } case 8: { attime = 5.7; break; } case 9: { attime = 6.00; break; } }
                            switch (skillindex) { case 0: { updem1 = 0.16; break; } case 1: { updem1 = 0.18; break; } case 2: { updem1 = 0.19; break; } case 3: { updem1 = 0.21; break; } case 4: { updem1 = 0.22; break; } case 5: { updem1 = 0.24; break; } case 6: { updem1 = 0.25; break; } case 7: { updem1 = 0.27; break; } case 8: { updem1 = 0.28; break; } case 9: { updem1 = 0.3; break; } }
                        }
                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        if (innight)
                        {
                            string read = "(夜)提升自身" + updem1 * 100 + "%伤害";
                            renewread(combo, read);
                        }
                        else
                        {
                            string read = "(昼)提升自身" + updem1 * 100 + "%伤害";
                            renewread(combo, read);
                        }
                        break;
                    }
                case 100504:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15.00; break; } case 1: { cdtime = 14.70; break; } case 2: { cdtime = 14.30; break; } case 3: { cdtime = 14.00; break; } case 4: { cdtime = 13.70; break; } case 5: { cdtime = 13.30; break; } case 6: { cdtime = 13.00; break; } case 7: { cdtime = 12.70; break; } case 8: { cdtime = 12.30; break; } case 9: { cdtime = 12.00; break; } }
                        switch (skillindex) { case 0: { attime = 5.00; break; } case 1: { attime = 6.00; break; } case 2: { attime = 6.00; break; } case 3: { attime = 6.00; break; } case 4: { attime = 7.00; break; } case 5: { attime = 7.00; break; } case 6: { attime = 7.00; break; } case 7: { attime = 8.00; break; } case 8: { attime = 8.00; break; } case 9: { attime = 8.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.15; break; } case 1: { updem1 = 0.16; break; } case 2: { updem1 = 0.17; break; } case 3: { updem1 = 0.18; break; } case 4: { updem1 = 0.19; break; } case 5: { updem1 = 0.2; break; } case 6: { updem1 = 0.21; break; } case 7: { updem1 = 0.22; break; } case 8: { updem1 = 0.23; break; } case 9: { updem1 = 0.25; break; } }
                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupdamage[i] *= 1 + updem1;
                                renewindex(i);
                            }
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");

                        string read = "提升全体" + updem1 * 100 + "%伤害";
                        renewread(combo, read);

                        break;
                    }
                case 100804:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        switch (skillindex) { case 0: { attime = 5.00; break; } case 1: { attime = 6.00; break; } case 2: { attime = 6.00; break; } case 3: { attime = 6.00; break; } case 4: { attime = 7.00; break; } case 5: { attime = 7.00; break; } case 6: { attime = 7.00; break; } case 7: { attime = 8.00; break; } case 8: { attime = 8.00; break; } case 9: { attime = 8.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.15; break; } case 1: { updem1 = 0.16; break; } case 2: { updem1 = 0.17; break; } case 3: { updem1 = 0.18; break; } case 4: { updem1 = 0.19; break; } case 5: { updem1 = 0.2; break; } case 6: { updem1 = 0.21; break; } case 7: { updem1 = 0.22; break; } case 8: { updem1 = 0.23; break; } case 9: { updem1 = 0.25; break; } }

                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupshotspeed[i] *= 1 + updem1;
                                renewindex(i);
                            }
                        }
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升全体" + updem1 * 100 + "%射速";
                        renewread(combo, read);
                        break;
                    }
                case 101403:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15.00; break; } case 1: { cdtime = 14.70; break; } case 2: { cdtime = 14.30; break; } case 3: { cdtime = 14.00; break; } case 4: { cdtime = 13.70; break; } case 5: { cdtime = 13.30; break; } case 6: { cdtime = 13.00; break; } case 7: { cdtime = 12.70; break; } case 8: { cdtime = 12.30; break; } case 9: { cdtime = 12.00; break; } }
                        switch (skillindex) { case 0: { attime = 5.00; break; } case 1: { attime = 6.00; break; } case 2: { attime = 6.00; break; } case 3: { attime = 6.00; break; } case 4: { attime = 7.00; break; } case 5: { attime = 7.00; break; } case 6: { attime = 7.00; break; } case 7: { attime = 8.00; break; } case 8: { attime = 8.00; break; } case 9: { attime = 8.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.4; break; } case 1: { updem1 = 0.42; break; } case 2: { updem1 = 0.43; break; } case 3: { updem1 = 0.45; break; } case 4: { updem1 = 0.47; break; } case 5: { updem1 = 0.48; break; } case 6: { updem1 = 0.5; break; } case 7: { updem1 = 0.52; break; } case 8: { updem1 = 0.53; break; } case 9: { updem1 = 0.55; break; } }

                        if (ischecked)
                        {
                            skilldowndodge *= 1 - updem1;
                            for (int i = 0; i < 9; i++)
                            {
                                renewindex(i);
                            }
                        }


                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "降低敌方全体" + updem1 * 100 + "%回避";
                        renewread(combo, read);
                        break;
                    }
                case 100511:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15.00; break; } case 1: { cdtime = 14.70; break; } case 2: { cdtime = 14.30; break; } case 3: { cdtime = 14.00; break; } case 4: { cdtime = 13.70; break; } case 5: { cdtime = 13.30; break; } case 6: { cdtime = 13.00; break; } case 7: { cdtime = 12.70; break; } case 8: { cdtime = 12.30; break; } case 9: { cdtime = 12.00; break; } }
                        if (innight)
                        {
                            switch (skillindex) { case 0: { attime = 5.00; break; } case 1: { attime = 6.00; break; } case 2: { attime = 6.00; break; } case 3: { attime = 6.00; break; } case 4: { attime = 7.00; break; } case 5: { attime = 7.00; break; } case 6: { attime = 7.00; break; } case 7: { attime = 8.00; break; } case 8: { attime = 8.00; break; } case 9: { attime = 8.00; break; } }

                            switch (skillindex) { case 0: { updem1 = 0.18; break; } case 1: { updem1 = 0.2; break; } case 2: { updem1 = 0.22; break; } case 3: { updem1 = 0.24; break; } case 4: { updem1 = 0.26; break; } case 5: { updem1 = 0.27; break; } case 6: { updem1 = 0.29; break; } case 7: { updem1 = 0.31; break; } case 8: { updem1 = 0.33; break; } case 9: { updem1 = 0.35; break; } case 11: { updem1 = 1.4; break; } }
                        }
                        else
                        {
                            switch (skillindex) { case 0: { attime = 3.00; break; } case 1: { attime = 3.20; break; } case 2: { attime = 3.40; break; } case 3: { attime = 3.70; break; } case 4: { attime = 3.90; break; } case 5: { attime = 4.10; break; } case 6: { attime = 4.30; break; } case 7: { attime = 4.60; break; } case 8: { attime = 4.80; break; } case 9: { attime = 5.00; break; } }

                            switch (skillindex) { case 0: { updem1 = 0.1; break; } case 1: { updem1 = 0.11; break; } case 2: { updem1 = 0.12; break; } case 3: { updem1 = 0.13; break; } case 4: { updem1 = 0.14; break; } case 5: { updem1 = 0.16; break; } case 6: { updem1 = 0.17; break; } case 7: { updem1 = 0.18; break; } case 8: { updem1 = 0.19; break; } case 9: { updem1 = 0.2; break; } }
                        }
                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupdamage[i] *= 1 + updem1;
                                renewindex(i);
                            }
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");

                        if (innight)
                        {
                            string read = "(夜)提升全体" + updem1 * 100 + "%伤害";
                            renewread(combo, read);
                        }
                        else
                        {
                            string read = "(昼)提升全体" + updem1 * 100 + "%伤害";
                            renewread(combo, read);
                        }
                        break;
                    }
                case 100603:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }

                        switch (skillindex) { case 0: { attime = 5.00; break; } case 1: { attime = 6.00; break; } case 2: { attime = 6.00; break; } case 3: { attime = 6.00; break; } case 4: { attime = 7.00; break; } case 5: { attime = 7.00; break; } case 6: { attime = 7.00; break; } case 7: { attime = 8.00; break; } case 8: { attime = 8.00; break; } case 9: { attime = 8.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.35; break; } case 1: { updem1 = 0.38; break; } case 2: { updem1 = 0.41; break; } case 3: { updem1 = 0.43; break; } case 4: { updem1 = 0.46; break; } case 5: { updem1 = 0.49; break; } case 6: { updem1 = 0.52; break; } case 7: { updem1 = 0.54; break; } case 8: { updem1 = 0.57; break; } case 9: { updem1 = 0.6; break; } }

                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupdodge[i] *= 1 + updem1;
                                renewindex(i);
                                renewtank();
                            }
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");

                        string read = "提升全体" + updem1 * 100 + "%回避";
                        renewread(combo, read);
                        break;
                    }
                case 102403:
                    {

                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 2.5; break; } case 1: { attime = 2.7; break; } case 2: { attime = 2.8; break; } case 3: { attime = 3; break; } case 4: { attime = 3.2; break; } case 5: { attime = 3.3; break; } case 6: { attime = 3.5; break; } case 7: { attime = 3.7; break; } case 8: { attime = 3.8; break; } case 9: { attime = 4; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.25; updem2 = 0.30; break; } case 1: { updem1 = 0.27; updem2 = 0.32; break; } case 2: { updem1 = 0.28; updem2 = 0.34; break; } case 3: { updem1 = 0.30; updem2 = 0.37; break; } case 4: { updem1 = 0.32; updem2 = 0.39; break; } case 5: { updem1 = 0.33; updem2 = 0.41; break; } case 6: { updem1 = 0.35; updem2 = 0.43; break; } case 7: { updem1 = 0.37; updem2 = 0.46; break; } case 8: { updem1 = 0.38; updem2 = 0.48; break; } case 9: { updem1 = 0.40; updem2 = 0.50; break; } }

                        //    if (ischecked)
                        //    {
                        //        skilldownhit *= 1 - updem1;
                        //        renewindex(combo);
                        //     }
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("1");
                        string read = "烟雾弹,半径2.5,降射速" + updem1 * 100 + "%移速" + updem2 * 100 + "%(不算)";
                        renewread(combo, read);
                        break;
                    }
                case 100406:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20.00; break; } case 1: { cdtime = 19.60; break; } case 2: { cdtime = 19.10; break; } case 3: { cdtime = 18.70; break; } case 4: { cdtime = 18.20; break; } case 5: { cdtime = 17.80; break; } case 6: { cdtime = 17.30; break; } case 7: { cdtime = 16.90; break; } case 8: { cdtime = 16.40; break; } case 9: { cdtime = 16.00; break; } }
                        switch (skillindex) { case 0: { attime = 6.00; break; } case 1: { attime = 6.40; break; } case 2: { attime = 6.80; break; } case 3: { attime = 7.20; break; } case 4: { attime = 7.60; break; } case 5: { attime = 8.00; break; } case 6: { attime = 8.40; break; } case 7: { attime = 8.80; break; } case 8: { attime = 9.40; break; } case 9: { attime = 10.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.35; break; } case 1: { updem1 = 0.38; break; } case 2: { updem1 = 0.41; break; } case 3: { updem1 = 0.43; break; } case 4: { updem1 = 0.46; break; } case 5: { updem1 = 0.49; break; } case 6: { updem1 = 0.52; break; } case 7: { updem1 = 0.54; break; } case 8: { updem1 = 0.57; break; } case 9: { updem1 = 0.6; break; } }

                        if (ischecked)
                        {
                            skillupshotspeed[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("4");
                        string read = "提升自身" + updem1 * 100 + "%射速";
                        renewread(combo, read);
                        break;
                    }
                case 301504:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { updem1 = 0.5; break; } case 1: { updem1 = 0.7; break; } case 2: { updem1 = 0.8; break; } case 3: { updem1 = 1; break; } case 4: { updem1 = 1.2; break; } case 5: { updem1 = 1.3; break; } case 6: { updem1 = 1.5; break; } case 7: { updem1 = 1.7; break; } case 8: { updem1 = 1.8; break; } case 9: { updem1 = 2; break; } }


                        skilluprenju[combo] = 1 + updem1;
                        renewindex(combo);


                        //  string cd = "(此技能算法未写,暂时平均加到伤害上)";
                        gun[index].cd = -1;
                        renewattime(combo, "99");
                        gun[index].startcd = ("-1");
                        string read = "被动,每攻击3次,下次伤害" + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 100121:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 18.00; break; } case 1: { cdtime = 18.00; break; } case 2: { cdtime = 18.00; break; } case 3: { cdtime = 18.00; break; } case 4: { cdtime = 18.00; break; } case 5: { cdtime = 18.00; break; } case 6: { cdtime = 18.00; break; } case 7: { cdtime = 18.00; break; } case 8: { cdtime = 18.00; break; } case 9: { cdtime = 18.00; break; } }
                        if (innight)
                        {
                            switch (skillindex) { case 0: { attime = 4.00; break; } case 1: { attime = 4.20; break; } case 2: { attime = 4.40; break; } case 3: { attime = 4.70; break; } case 4: { attime = 4.90; break; } case 5: { attime = 5.10; break; } case 6: { attime = 5.30; break; } case 7: { attime = 5.60; break; } case 8: { attime = 5.80; break; } case 9: { attime = 6.00; break; } }

                            switch (skillindex) { case 0: { updem1 = 0.32; break; } case 1: { updem1 = 0.38; break; } case 2: { updem1 = 0.44; break; } case 3: { updem1 = 0.5; break; } case 4: { updem1 = 0.56; break; } case 5: { updem1 = 0.61; break; } case 6: { updem1 = 0.67; break; } case 7: { updem1 = 0.73; break; } case 8: { updem1 = 0.79; break; } case 9: { updem1 = 0.85; break; } }

                        }
                        else
                        {
                            switch (skillindex) { case 0: { attime = 4.00; break; } case 1: { attime = 4.20; break; } case 2: { attime = 4.40; break; } case 3: { attime = 4.70; break; } case 4: { attime = 4.90; break; } case 5: { attime = 5.10; break; } case 6: { attime = 5.30; break; } case 7: { attime = 5.60; break; } case 8: { attime = 5.80; break; } case 9: { attime = 6.00; break; } }

                            switch (skillindex) { case 0: { updem1 = 0.1; break; } case 1: { updem1 = 0.12; break; } case 2: { updem1 = 0.14; break; } case 3: { updem1 = 0.17; break; } case 4: { updem1 = 0.19; break; } case 5: { updem1 = 0.21; break; } case 6: { updem1 = 0.23; break; } case 7: { updem1 = 0.26; break; } case 8: { updem1 = 0.28; break; } case 9: { updem1 = 0.3; break; } }

                        }
                        if (ischecked)
                        {

                            skillupdamage[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");

                        if (innight)
                        {
                            string read = "(夜)提升自身" + updem1 * 100 + "%伤害";
                            renewread(combo, read);
                        }
                        else
                        {
                            string read = "(昼)提升自身" + updem1 * 100 + "%伤害";
                            renewread(combo, read);
                        }
                        break;
                    }
                case 200201:
                    {
                        double cdtime = 1;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { updem1 = 0.25; break; } case 1: { updem1 = 0.28; break; } case 2: { updem1 = 0.31; break; } case 3: { updem1 = 0.33; break; } case 4: { updem1 = 0.36; break; } case 5: { updem1 = 0.39; break; } case 6: { updem1 = 0.42; break; } case 7: { updem1 = 0.44; break; } case 8: { updem1 = 0.47; break; } case 9: { updem1 = 0.5; break; } }

                        //  if (ischecked)
                        //  {
                        skillupnegev[combo] = updem1;
                        renewindex(combo);
                        //   }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("0");
                        string read = "每次换弹提升伤害" + updem1 * 100 + "%,可叠加25s";
                        renewread(combo, read);
                        break;
                    }
                case 100502:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15.00; break; } case 1: { cdtime = 14.70; break; } case 2: { cdtime = 14.30; break; } case 3: { cdtime = 14.00; break; } case 4: { cdtime = 13.70; break; } case 5: { cdtime = 13.30; break; } case 6: { cdtime = 13.00; break; } case 7: { cdtime = 12.70; break; } case 8: { cdtime = 12.30; break; } case 9: { cdtime = 12.00; break; } }
                        switch (skillindex) { case 0: { attime = 5.00; break; } case 1: { attime = 6.00; break; } case 2: { attime = 6.00; break; } case 3: { attime = 6.00; break; } case 4: { attime = 7.00; break; } case 5: { attime = 7.00; break; } case 6: { attime = 7.00; break; } case 7: { attime = 8.00; break; } case 8: { attime = 8.00; break; } case 9: { attime = 8.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.11; break; } case 1: { updem1 = 0.12; break; } case 2: { updem1 = 0.13; break; } case 3: { updem1 = 0.14; break; } case 4: { updem1 = 0.15; break; } case 5: { updem1 = 0.16; break; } case 6: { updem1 = 0.17; break; } case 7: { updem1 = 0.18; break; } case 8: { updem1 = 0.19; break; } case 9: { updem1 = 0.2; break; } }
                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupdamage[i] *= 1 + updem1;
                                renewindex(i);
                            }
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");

                        string read = "提升全体" + updem1 * 100 + "%伤害";
                        renewread(combo, read);

                        break;
                    }
                case 101504:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        switch (skillindex) { case 0: { attime = 4; break; } case 1: { attime = 4; break; } case 2: { attime = 4; break; } case 3: { attime = 5; break; } case 4: { attime = 5; break; } case 5: { attime = 5; break; } case 6: { attime = 5; break; } case 7: { attime = 6; break; } case 8: { attime = 6; break; } case 9: { attime = 6; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.3; break; } case 1: { updem1 = 0.32; break; } case 2: { updem1 = 0.33; break; } case 3: { updem1 = 0.35; break; } case 4: { updem1 = 0.37; break; } case 5: { updem1 = 0.38; break; } case 6: { updem1 = 0.4; break; } case 7: { updem1 = 0.42; break; } case 8: { updem1 = 0.43; break; } case 9: { updem1 = 0.45; break; } }

                        if (ischecked)
                        {
                            skilldownhit *= 1 - updem1;
                            renewtank();
                        }


                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "降低敌方全体" + updem1 * 100 + "%命中";
                        renewread(combo, read);
                        break;
                    }
                case 100204:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.8; break; } case 1: { updem1 = 0.88; break; } case 2: { updem1 = 0.96; break; } case 3: { updem1 = 1.03; break; } case 4: { updem1 = 1.11; break; } case 5: { updem1 = 1.19; break; } case 6: { updem1 = 1.27; break; } case 7: { updem1 = 1.34; break; } case 8: { updem1 = 1.42; break; } case 9: { updem1 = 1.5; break; } }

                        if (ischecked)
                        {
                            skillupdodge[combo] *= 1 + updem1;
                            renewindex(combo);
                            renewtank();
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升自身" + updem1 * 100 + "%回避";
                        renewread(combo, read);
                        break;
                    }
                case 100116:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 3.67; break; } case 1: { attime = 3.93; break; } case 2: { attime = 4.20; break; } case 3: { attime = 4.43; break; } case 4: { attime = 4.70; break; } case 5: { attime = 4.97; break; } case 6: { attime = 5.23; break; } case 7: { attime = 5.47; break; } case 8: { attime = 5.73; break; } case 9: { attime = 6.00; break; } }
                        if (innight)
                            switch (skillindex) { case 0: { updem1 = 1.2; break; } case 1: { updem1 = 1.29; break; } case 2: { updem1 = 1.38; break; } case 3: { updem1 = 1.47; break; } case 4: { updem1 = 1.56; break; } case 5: { updem1 = 1.64; break; } case 6: { updem1 = 1.73; break; } case 7: { updem1 = 1.82; break; } case 8: { updem1 = 1.91; break; } case 9: { updem1 = 2; break; } }

                        else
                            switch (skillindex) { case 0: { updem1 = 0.4; break; } case 1: { updem1 = 0.43; break; } case 2: { updem1 = 0.47; break; } case 3: { updem1 = 0.5; break; } case 4: { updem1 = 0.53; break; } case 5: { updem1 = 0.57; break; } case 6: { updem1 = 0.6; break; } case 7: { updem1 = 0.63; break; } case 8: { updem1 = 0.67; break; } case 9: { updem1 = 0.7; break; } }
                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        if (innight)
                        {
                            string read = "(夜)提升自身" + updem1 * 100 + "%伤害";
                            renewread(combo, read);
                        }
                        else
                        {
                            string read = "(昼)提升自身" + updem1 * 100 + "%伤害";
                            renewread(combo, read);
                        }
                        break;
                    }
                case 102110:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 3.5; break; } case 1: { updem1 = 4.2; break; } case 2: { updem1 = 4.9; break; } case 3: { updem1 = 5.7; break; } case 4: { updem1 = 6.4; break; } case 5: { updem1 = 7.1; break; } case 6: { updem1 = 7.8; break; } case 7: { updem1 = 8.6; break; } case 8: { updem1 = 9.3; break; } case 9: { updem1 = 10; break; } }

                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        string read = "杀伤榴弹,半径1.5," + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 105203:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 18.00; break; } case 1: { cdtime = 18.00; break; } case 2: { cdtime = 18.00; break; } case 3: { cdtime = 18.00; break; } case 4: { cdtime = 18.00; break; } case 5: { cdtime = 18.00; break; } case 6: { cdtime = 18.00; break; } case 7: { cdtime = 18.00; break; } case 8: { cdtime = 18.00; break; } case 9: { cdtime = 18.00; break; } }
                        switch (skillindex) { case 0: { attime = 1.00; break; } case 1: { attime = 1.60; break; } case 2: { attime = 2.10; break; } case 3: { attime = 2.70; break; } case 4: { attime = 3.20; break; } case 5: { attime = 3.80; break; } case 6: { attime = 4.30; break; } case 7: { attime = 4.90; break; } case 8: { attime = 5.40; break; } case 9: { attime = 6.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.3; break; } case 1: { updem1 = 0.34; break; } case 2: { updem1 = 0.39; break; } case 3: { updem1 = 0.43; break; } case 4: { updem1 = 0.48; break; } case 5: { updem1 = 0.52; break; } case 6: { updem1 = 0.57; break; } case 7: { updem1 = 0.61; break; } case 8: { updem1 = 0.66; break; } case 9: { updem1 = 0.7; break; } }

                        if (ischecked)
                        {
                            skilluphit[combo] *= 1 + updem1;
                            isfullcrit[combo] = true;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("3");
                        string read = "提升自身" + updem1 * 100 + "%命中,必爆";
                        renewread(combo, read);
                        break;
                    }
                case 104101:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20.00; break; } case 1: { cdtime = 19.60; break; } case 2: { cdtime = 19.10; break; } case 3: { cdtime = 18.70; break; } case 4: { cdtime = 18.20; break; } case 5: { cdtime = 17.80; break; } case 6: { cdtime = 17.30; break; } case 7: { cdtime = 16.90; break; } case 8: { cdtime = 16.40; break; } case 9: { cdtime = 16.00; break; } }
                        switch (skillindex) { case 0: { attime = 3.00; break; } case 1: { attime = 3.20; break; } case 2: { attime = 3.30; break; } case 3: { attime = 3.50; break; } case 4: { attime = 3.70; break; } case 5: { attime = 3.80; break; } case 6: { attime = 4.00; break; } case 7: { attime = 4.20; break; } case 8: { attime = 4.30; break; } case 9: { attime = 4.50; break; } }
                        switch (skillindex) { case 0: { updem1 = 1; break; } case 1: { updem1 = 1; break; } case 2: { updem1 = 1; break; } case 3: { updem1 = 1; break; } case 4: { updem1 = 1; break; } case 5: { updem1 = 1; break; } case 6: { updem1 = 1; break; } case 7: { updem1 = 1; break; } case 8: { updem1 = 2; break; } case 9: { updem1 = 2; break; } }

                        if (ischecked)
                        {
                            skilldamageagain[combo] = updem1 + 1;
                            renewindex(combo);
                        }
                        //     renewtime(combo, num2);
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");

                        string read = "每次攻击造成" + (updem1 + 1) + "次伤害";

                        renewread(combo, read);

                        break;
                    }
                case 105105:
                    {
                        double cdtime = 18;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { attime = 6.00; break; } case 1: { attime = 6.20; break; } case 2: { attime = 6.40; break; } case 3: { attime = 6.70; break; } case 4: { attime = 6.90; break; } case 5: { attime = 7.10; break; } case 6: { attime = 7.30; break; } case 7: { attime = 7.60; break; } case 8: { attime = 7.80; break; } case 9: { attime = 8.00; break; } }

                        switch (skillindex) { case 0: { updem1 = 0.2; break; } case 1: { updem1 = 0.22; break; } case 2: { updem1 = 0.23; break; } case 3: { updem1 = 0.25; break; } case 4: { updem1 = 0.27; break; } case 5: { updem1 = 0.28; break; } case 6: { updem1 = 0.3; break; } case 7: { updem1 = 0.32; break; } case 8: { updem1 = 0.33; break; } case 9: { updem1 = 0.35; break; } }

                        switch (skillindex) { case 0: { updem2 = 1; break; } case 1: { updem2 = 2; break; } case 2: { updem2 = 2; break; } case 3: { updem2 = 2; break; } case 4: { updem2 = 2; break; } case 5: { updem2 = 3; break; } case 6: { updem2 = 3; break; } case 7: { updem2 = 3; break; } case 8: { updem2 = 3; break; } case 9: { updem2 = 4; break; } }


                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            skillupbelt[combo] += updem2;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");


                        string read = "提升自身" + updem1 * 100 + "%伤害,弹链+" + updem2 + "(不算弹链时间)";
                        renewread(combo, read);
                        break;
                    }
                case 101604:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15.00; break; } case 1: { cdtime = 14.70; break; } case 2: { cdtime = 14.30; break; } case 3: { cdtime = 14.00; break; } case 4: { cdtime = 13.70; break; } case 5: { cdtime = 13.30; break; } case 6: { cdtime = 13.00; break; } case 7: { cdtime = 12.70; break; } case 8: { cdtime = 12.30; break; } case 9: { cdtime = 12.00; break; } }
                        switch (skillindex) { case 0: { attime = 5.00; break; } case 1: { attime = 6.00; break; } case 2: { attime = 6.00; break; } case 3: { attime = 6.00; break; } case 4: { attime = 7.00; break; } case 5: { attime = 7.00; break; } case 6: { attime = 7.00; break; } case 7: { attime = 8.00; break; } case 8: { attime = 8.00; break; } case 9: { attime = 8.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.18; break; } case 1: { updem1 = 0.19; break; } case 2: { updem1 = 0.21; break; } case 3: { updem1 = 0.22; break; } case 4: { updem1 = 0.23; break; } case 5: { updem1 = 0.25; break; } case 6: { updem1 = 0.26; break; } case 7: { updem1 = 0.27; break; } case 8: { updem1 = 0.29; break; } case 9: { updem1 = 0.3; break; } }




                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "降低敌方全体" + updem1 * 100 + "%射速(不算)";
                        renewread(combo, read);
                        break;
                    }
                case 102204:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 2.50; break; } case 1: { attime = 2.70; break; } case 2: { attime = 2.90; break; } case 3: { attime = 3.20; break; } case 4: { attime = 3.40; break; } case 5: { attime = 3.60; break; } case 6: { attime = 3.80; break; } case 7: { attime = 4.10; break; } case 8: { attime = 4.30; break; } case 9: { attime = 4.50; break; } }


                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        string read = "闪光弹,半径2.5";
                        renewread(combo, read);
                        break;
                    }
                case 102804:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 2.5; break; } case 1: { updem1 = 3; break; } case 2: { updem1 = 3.5; break; } case 3: { updem1 = 4; break; } case 4: { updem1 = 4.5; break; } case 5: { updem1 = 5; break; } case 6: { updem1 = 5.5; break; } case 7: { updem1 = 6; break; } case 8: { updem1 = 6.5; break; } case 9: { updem1 = 7; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("15");
                        string read = "2s瞄准,最右" + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 100118:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 9.00; break; } case 1: { attime = 9.70; break; } case 2: { attime = 10.30; break; } case 3: { attime = 11.00; break; } case 4: { attime = 11.70; break; } case 5: { attime = 12.30; break; } case 6: { attime = 13.00; break; } case 7: { attime = 13.70; break; } case 8: { attime = 14.30; break; } case 9: { attime = 15.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.3; break; } case 1: { updem1 = 0.32; break; } case 2: { updem1 = 0.34; break; } case 3: { updem1 = 0.37; break; } case 4: { updem1 = 0.39; break; } case 5: { updem1 = 0.41; break; } case 6: { updem1 = 0.43; break; } case 7: { updem1 = 0.46; break; } case 8: { updem1 = 0.48; break; } case 9: { updem1 = 0.5; break; } }
                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("2");

                        string read = "提升自身" + updem1 * 100 + "%伤害";
                        renewread(combo, read);

                        break;
                    }
                case 100408:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20.00; break; } case 1: { cdtime = 19.60; break; } case 2: { cdtime = 19.10; break; } case 3: { cdtime = 18.70; break; } case 4: { cdtime = 18.20; break; } case 5: { cdtime = 17.80; break; } case 6: { cdtime = 17.30; break; } case 7: { cdtime = 16.90; break; } case 8: { cdtime = 16.40; break; } case 9: { cdtime = 16.00; break; } }
                        switch (skillindex) { case 0: { attime = 9.00; break; } case 1: { attime = 9.70; break; } case 2: { attime = 10.30; break; } case 3: { attime = 11.00; break; } case 4: { attime = 11.70; break; } case 5: { attime = 12.30; break; } case 6: { attime = 13.00; break; } case 7: { attime = 13.70; break; } case 8: { attime = 14.30; break; } case 9: { attime = 15.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.3; break; } case 1: { updem1 = 0.32; break; } case 2: { updem1 = 0.34; break; } case 3: { updem1 = 0.37; break; } case 4: { updem1 = 0.39; break; } case 5: { updem1 = 0.41; break; } case 6: { updem1 = 0.43; break; } case 7: { updem1 = 0.46; break; } case 8: { updem1 = 0.48; break; } case 9: { updem1 = 0.5; break; } }

                        if (ischecked)
                        {
                            skillupshotspeed[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("2");
                        string read = "提升自身" + updem1 * 100 + "%射速";
                        renewread(combo, read);
                        break;
                    }
                case 101410:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15.00; break; } case 1: { cdtime = 14.70; break; } case 2: { cdtime = 14.30; break; } case 3: { cdtime = 14.00; break; } case 4: { cdtime = 13.70; break; } case 5: { cdtime = 13.30; break; } case 6: { cdtime = 13.00; break; } case 7: { cdtime = 12.70; break; } case 8: { cdtime = 12.30; break; } case 9: { cdtime = 12.00; break; } }
                        if (innight)
                        {
                            switch (skillindex) { case 0: { attime = 5.00; break; } case 1: { attime = 6.00; break; } case 2: { attime = 6.00; break; } case 3: { attime = 6.00; break; } case 4: { attime = 7.00; break; } case 5: { attime = 7.00; break; } case 6: { attime = 7.00; break; } case 7: { attime = 8.00; break; } case 8: { attime = 8.00; break; } case 9: { attime = 8.00; break; } }

                            switch (skillindex) { case 0: { updem1 = 0.55; break; } case 1: { updem1 = 0.57; break; } case 2: { updem1 = 0.59; break; } case 3: { updem1 = 0.62; break; } case 4: { updem1 = 0.64; break; } case 5: { updem1 = 0.66; break; } case 6: { updem1 = 0.68; break; } case 7: { updem1 = 0.71; break; } case 8: { updem1 = 0.73; break; } case 9: { updem1 = 0.75; break; } }
                        }
                        else
                        {
                            switch (skillindex) { case 0: { attime = 3.00; break; } case 1: { attime = 3.20; break; } case 2: { attime = 3.40; break; } case 3: { attime = 3.70; break; } case 4: { attime = 3.90; break; } case 5: { attime = 4.10; break; } case 6: { attime = 4.30; break; } case 7: { attime = 4.60; break; } case 8: { attime = 4.80; break; } case 9: { attime = 5.00; break; } }

                            switch (skillindex) { case 0: { updem1 = 0.3; break; } case 1: { updem1 = 0.31; break; } case 2: { updem1 = 0.32; break; } case 3: { updem1 = 0.33; break; } case 4: { updem1 = 0.34; break; } case 5: { updem1 = 0.36; break; } case 6: { updem1 = 0.37; break; } case 7: { updem1 = 0.38; break; } case 8: { updem1 = 0.39; break; } case 9: { updem1 = 0.4; break; } }

                        }
                        if (ischecked)
                        {
                            skilldowndodge *= 1 - updem1;
                            for (int i = 0; i < 9; i++)
                            {
                                renewindex(i);
                            }
                        }


                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        if (innight)
                        {
                            string read = "(夜)降低敌方全体" + updem1 * 100 + "%回避";
                            renewread(combo, read);
                        }
                        else
                        {
                            string read = "(昼)降低敌方全体" + updem1 * 100 + "%回避";
                            renewread(combo, read);
                        }
                        break;
                    }
                case 100120:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10.00; break; } case 1: { cdtime = 9.80; break; } case 2: { cdtime = 9.60; break; } case 3: { cdtime = 9.30; break; } case 4: { cdtime = 9.10; break; } case 5: { cdtime = 8.90; break; } case 6: { cdtime = 8.70; break; } case 7: { cdtime = 8.40; break; } case 8: { cdtime = 8.20; break; } case 9: { cdtime = 8.00; break; } }
                        switch (skillindex) { case 0: { attime = 3.00; break; } case 1: { attime = 3.20; break; } case 2: { attime = 3.40; break; } case 3: { attime = 3.70; break; } case 4: { attime = 3.90; break; } case 5: { attime = 4.10; break; } case 6: { attime = 4.30; break; } case 7: { attime = 4.60; break; } case 8: { attime = 4.80; break; } case 9: { attime = 5.00; break; } }

                        switch (skillindex) { case 0: { updem1 = 1.6; break; } case 1: { updem1 = 1.71; break; } case 2: { updem1 = 1.82; break; } case 3: { updem1 = 1.93; break; } case 4: { updem1 = 2.04; break; } case 5: { updem1 = 2.16; break; } case 6: { updem1 = 2.27; break; } case 7: { updem1 = 2.38; break; } case 8: { updem1 = 2.49; break; } case 9: { updem1 = 2.6; break; } }


                        if (ischecked)
                        {

                            skillupdamage[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("4");


                        string read = "提升自身" + updem1 * 100 + "%伤害";
                        renewread(combo, read);

                        break;
                    }
                case 102103:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 1.2; break; } case 1: { updem1 = 1.7; break; } case 2: { updem1 = 2.2; break; } case 3: { updem1 = 2.6; break; } case 4: { updem1 = 3.1; break; } case 5: { updem1 = 3.6; break; } case 6: { updem1 = 4.1; break; } case 7: { updem1 = 4.5; break; } case 8: { updem1 = 5; break; } case 9: { updem1 = 5.5; break; } }

                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("3");
                        string read = "手榴弹,半径2.5," + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 100501:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15.00; break; } case 1: { cdtime = 14.70; break; } case 2: { cdtime = 14.30; break; } case 3: { cdtime = 14.00; break; } case 4: { cdtime = 13.70; break; } case 5: { cdtime = 13.30; break; } case 6: { cdtime = 13.00; break; } case 7: { cdtime = 12.70; break; } case 8: { cdtime = 12.30; break; } case 9: { cdtime = 12.00; break; } }
                        switch (skillindex) { case 0: { attime = 5.00; break; } case 1: { attime = 6.00; break; } case 2: { attime = 6.00; break; } case 3: { attime = 6.00; break; } case 4: { attime = 7.00; break; } case 5: { attime = 7.00; break; } case 6: { attime = 7.00; break; } case 7: { attime = 8.00; break; } case 8: { attime = 8.00; break; } case 9: { attime = 8.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.1; break; } case 1: { updem1 = 0.11; break; } case 2: { updem1 = 0.12; break; } case 3: { updem1 = 0.13; break; } case 4: { updem1 = 0.14; break; } case 5: { updem1 = 0.14; break; } case 6: { updem1 = 0.15; break; } case 7: { updem1 = 0.16; break; } case 8: { updem1 = 0.17; break; } case 9: { updem1 = 0.18; break; } }
                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupdamage[i] *= 1 + updem1;
                                renewindex(i);
                            }
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");

                        string read = "提升全体" + updem1 * 100 + "%伤害";
                        renewread(combo, read);

                        break;
                    }
                case 105502:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15.00; break; } case 1: { cdtime = 14.70; break; } case 2: { cdtime = 14.30; break; } case 3: { cdtime = 14.00; break; } case 4: { cdtime = 13.70; break; } case 5: { cdtime = 13.30; break; } case 6: { cdtime = 13.00; break; } case 7: { cdtime = 12.70; break; } case 8: { cdtime = 12.30; break; } case 9: { cdtime = 12.00; break; } }
                        switch (skillindex) { case 0: { attime = 5.00; break; } case 1: { attime = 5.30; break; } case 2: { attime = 5.70; break; } case 3: { attime = 6.00; break; } case 4: { attime = 6.30; break; } case 5: { attime = 6.70; break; } case 6: { attime = 7.00; break; } case 7: { attime = 7.30; break; } case 8: { attime = 7.70; break; } case 9: { attime = 8.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.32; updem2 = 0.16; break; } case 1: { updem1 = 0.35; updem2 = 0.17; break; } case 2: { updem1 = 0.37; updem2 = 0.19; break; } case 3: { updem1 = 0.40; updem2 = 0.20; break; } case 4: { updem1 = 0.42; updem2 = 0.21; break; } case 5: { updem1 = 0.45; updem2 = 0.23; break; } case 6: { updem1 = 0.47; updem2 = 0.24; break; } case 7: { updem1 = 0.50; updem2 = 0.25; break; } case 8: { updem1 = 0.52; updem2 = 0.27; break; } case 9: { updem1 = 0.55; updem2 = 0.28; break; } }

                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupdodge[i] *= 1 + updem2;
                                skilluphit[i] *= 1 + updem1;
                                renewindex(i);
                                renewtank();
                            }

                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升全体" + updem2 * 100 + "%回避," + updem1 * 100 + "%命中";
                        renewread(combo, read);
                        break;
                    }
                case 100701:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15.00; break; } case 1: { cdtime = 14.70; break; } case 2: { cdtime = 14.30; break; } case 3: { cdtime = 14.00; break; } case 4: { cdtime = 13.70; break; } case 5: { cdtime = 13.30; break; } case 6: { cdtime = 13.00; break; } case 7: { cdtime = 12.70; break; } case 8: { cdtime = 12.30; break; } case 9: { cdtime = 12.00; break; } }
                        switch (skillindex) { case 0: { attime = 5.00; break; } case 1: { attime = 6.00; break; } case 2: { attime = 6.00; break; } case 3: { attime = 6.00; break; } case 4: { attime = 7.00; break; } case 5: { attime = 7.00; break; } case 6: { attime = 7.00; break; } case 7: { attime = 8.00; break; } case 8: { attime = 8.00; break; } case 9: { attime = 8.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.5; break; } case 1: { updem1 = 0.56; break; } case 2: { updem1 = 0.61; break; } case 3: { updem1 = 0.67; break; } case 4: { updem1 = 0.72; break; } case 5: { updem1 = 0.78; break; } case 6: { updem1 = 0.83; break; } case 7: { updem1 = 0.89; break; } case 8: { updem1 = 0.94; break; } case 9: { updem1 = 1; break; } }
                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skilluphit[i] *= 1 + updem1;
                                renewindex(i);
                            }

                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升全体" + updem1 * 100 + "%命中";
                        renewread(combo, read);
                        break;
                    }
                case 105604:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15.00; break; } case 1: { cdtime = 14.70; break; } case 2: { cdtime = 14.30; break; } case 3: { cdtime = 14.00; break; } case 4: { cdtime = 13.70; break; } case 5: { cdtime = 13.30; break; } case 6: { cdtime = 13.00; break; } case 7: { cdtime = 12.70; break; } case 8: { cdtime = 12.30; break; } case 9: { cdtime = 12.00; break; } }
                        switch (skillindex) { case 0: { attime = 3.00; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.15; updem2 = 0.40; break; } case 1: { updem1 = 0.16; updem2 = 0.43; break; } case 2: { updem1 = 0.17; updem2 = 0.47; break; } case 3: { updem1 = 0.18; updem2 = 0.50; break; } case 4: { updem1 = 0.19; updem2 = 0.53; break; } case 5: { updem1 = 0.21; updem2 = 0.57; break; } case 6: { updem1 = 0.22; updem2 = 0.60; break; } case 7: { updem1 = 0.23; updem2 = 0.63; break; } case 8: { updem1 = 0.24; updem2 = 0.67; break; } case 9: { updem1 = 0.25; updem2 = 0.70; break; } }

                        if (ischecked)
                        {

                            skillupdodge[combo] *= 1 + updem2;
                            skilldowndamage *= 1 - updem1;
                            renewindex(combo);
                            renewtank();


                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("3");
                        string read = "提升自身" + updem2 * 100 + "%回避,降低敌方全体" + updem1 * 100 + "%伤害";
                        renewread(combo, read);
                        break;
                    }
                case 103201:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 1; updem2 = 0.00; break; } case 1: { updem1 = 1.1; updem2 = 1.00; break; } case 2: { updem1 = 1.2; updem2 = 2.00; break; } case 3: { updem1 = 1.3; updem2 = 3.00; break; } case 4: { updem1 = 1.4; updem2 = 4.00; break; } case 5: { updem1 = 1.6; updem2 = 5.00; break; } case 6: { updem1 = 1.7; updem2 = 6.00; break; } case 7: { updem1 = 1.8; updem2 = 7.00; break; } case 8: { updem1 = 1.9; updem2 = 8.00; break; } case 9: { updem1 = 2; updem2 = 9.00; break; } }
                        if (ischecked)
                        {
                            renewdamage(combo, (updem2 + 1) * 100);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("15");
                        string read = "固定伤害,击退" + (updem1 + 1) + "码";
                        renewread(combo, read);
                        break;
                    }
                case 103203:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.2; break; } case 1: { updem1 = 0.3; break; } case 2: { updem1 = 0.5; break; } case 3: { updem1 = 0.6; break; } case 4: { updem1 = 0.8; break; } case 5: { updem1 = 0.9; break; } case 6: { updem1 = 1.1; break; } case 7: { updem1 = 1.2; break; } case 8: { updem1 = 1.4; break; } case 9: { updem1 = 1.5; break; } }
                        switch (skillindex) { case 0: { updem2 = 0; break; } case 1: { updem2 = 0.1; break; } case 2: { updem2 = 0.2; break; } case 3: { updem2 = 0.3; break; } case 4: { updem2 = 0.4; break; } case 5: { updem2 = 0.6; break; } case 6: { updem2 = 0.7; break; } case 7: { updem2 = 0.8; break; } case 8: { updem2 = 0.9; break; } case 9: { updem2 = 1; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        string read = "额外一次" + (updem1 + 1) + "倍攻击,击退" + (updem2 + 2) + "码";
                        renewread(combo, read);
                        break;
                    }
                case 106004:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;
                        double updem3 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.8; break; } case 1: { updem1 = 0.9; break; } case 2: { updem1 = 1; break; } case 3: { updem1 = 1.1; break; } case 4: { updem1 = 1.2; break; } case 5: { updem1 = 1.3; break; } case 6: { updem1 = 1.4; break; } case 7: { updem1 = 1.4; break; } case 8: { updem1 = 1.5; break; } case 9: { updem1 = 1.5; break; } }
                        switch (skillindex) { case 0: { updem2 = 1.2; break; } case 1: { updem2 = 1.3; break; } case 2: { updem2 = 1.5; break; } case 3: { updem2 = 1.6; break; } case 4: { updem2 = 1.8; break; } case 5: { updem2 = 1.9; break; } case 6: { updem2 = 2.1; break; } case 7: { updem2 = 2.2; break; } case 8: { updem2 = 2.4; break; } case 9: { updem2 = 2.5; break; } }
                        switch (skillindex) { case 0: { updem3 = 1.6; break; } case 1: { updem3 = 1.7; break; } case 2: { updem3 = 2; break; } case 3: { updem3 = 2.1; break; } case 4: { updem3 = 2.4; break; } case 5: { updem3 = 2.5; break; } case 6: { updem3 = 2.8; break; } case 7: { updem3 = 3; break; } case 8: { updem3 = 3.3; break; } case 9: { updem3 = 3.5; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + updem2 + updem3;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        string read = "进行三次伤害逐渐提升的攻击，对每个目标造成" + updem1 + "/" + updem2 + "/" + updem3 + "倍的伤害。";
                        renewread(combo, read);
                        break;
                    }
                case 105302:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20.00; break; } case 1: { cdtime = 19.60; break; } case 2: { cdtime = 19.10; break; } case 3: { cdtime = 18.70; break; } case 4: { cdtime = 18.20; break; } case 5: { cdtime = 17.80; break; } case 6: { cdtime = 17.30; break; } case 7: { cdtime = 16.90; break; } case 8: { cdtime = 16.40; break; } case 9: { cdtime = 16.00; break; } }
                        switch (skillindex) { case 0: { attime = 4.00; break; } case 1: { attime = 4.20; break; } case 2: { attime = 4.40; break; } case 3: { attime = 4.70; break; } case 4: { attime = 4.90; break; } case 5: { attime = 5.10; break; } case 6: { attime = 5.30; break; } case 7: { attime = 5.60; break; } case 8: { attime = 5.80; break; } case 9: { attime = 6.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.30; updem2 = 0.00; break; } case 1: { updem1 = 0.33; updem2 = 0.00; break; } case 2: { updem1 = 0.37; updem2 = 0.00; break; } case 3: { updem1 = 0.40; updem2 = 0.00; break; } case 4: { updem1 = 0.43; updem2 = 0.00; break; } case 5: { updem1 = 0.47; updem2 = 0.00; break; } case 6: { updem1 = 0.50; updem2 = 0.00; break; } case 7: { updem1 = 0.53; updem2 = 0.00; break; } case 8: { updem1 = 0.57; updem2 = 0.00; break; } case 9: { updem1 = 0.60; updem2 = 0.00; break; } }

                        if (ischecked)
                        {

                            skilluparmor[combo] *= 1 + updem1;
                            renewindex(combo);
                            renewtank();


                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("10");
                        string read = "提升自身" + updem1 * 100 + "%护甲";
                        renewread(combo, read);
                        break;
                    }
                case 105303:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20.00; break; } case 1: { cdtime = 19.60; break; } case 2: { cdtime = 19.10; break; } case 3: { cdtime = 18.70; break; } case 4: { cdtime = 18.20; break; } case 5: { cdtime = 17.80; break; } case 6: { cdtime = 17.30; break; } case 7: { cdtime = 16.90; break; } case 8: { cdtime = 16.40; break; } case 9: { cdtime = 16.00; break; } }
                        switch (skillindex) { case 0: { attime = 4.00; break; } case 1: { attime = 4.20; break; } case 2: { attime = 4.40; break; } case 3: { attime = 4.70; break; } case 4: { attime = 4.90; break; } case 5: { attime = 5.10; break; } case 6: { attime = 5.30; break; } case 7: { attime = 5.60; break; } case 8: { attime = 5.80; break; } case 9: { attime = 6.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.40; updem2 = 0.00; break; } case 1: { updem1 = 0.43; updem2 = 0.00; break; } case 2: { updem1 = 0.47; updem2 = 0.00; break; } case 3: { updem1 = 0.50; updem2 = 0.00; break; } case 4: { updem1 = 0.53; updem2 = 0.00; break; } case 5: { updem1 = 0.57; updem2 = 0.00; break; } case 6: { updem1 = 0.60; updem2 = 0.00; break; } case 7: { updem1 = 0.63; updem2 = 0.00; break; } case 8: { updem1 = 0.67; updem2 = 0.00; break; } case 9: { updem1 = 0.70; updem2 = 0.00; break; } }

                        if (ischecked)
                        {

                            skilluparmor[combo] *= 1 + updem1;
                            renewindex(combo);
                            renewtank();


                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("10");
                        string read = "提升自身" + updem1 * 100 + "%护甲";
                        renewread(combo, read);
                        break;
                    }
                case 103202:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 0; break; } case 1: { updem1 = 0.1; break; } case 2: { updem1 = 0.2; break; } case 3: { updem1 = 0.3; break; } case 4: { updem1 = 0.4; break; } case 5: { updem1 = 0.6; break; } case 6: { updem1 = 0.7; break; } case 7: { updem1 = 0.8; break; } case 8: { updem1 = 0.9; break; } case 9: { updem1 = 1; break; } }
                        switch (skillindex) { case 0: { updem2 = 0; break; } case 1: { updem2 = 0.1; break; } case 2: { updem2 = 0.2; break; } case 3: { updem2 = 0.3; break; } case 4: { updem2 = 0.4; break; } case 5: { updem2 = 0.6; break; } case 6: { updem2 = 0.7; break; } case 7: { updem2 = 0.8; break; } case 8: { updem2 = 0.9; break; } case 9: { updem2 = 1; break; } }

                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        string read = "额外一次" + (updem1 + 1) + "倍攻击,击退" + (updem2 + 2) + "码";
                        renewread(combo, read);
                        break;
                    }
                case 100122:
                    {
                        double cdtime = 0;
                        double attime = 8;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20.00; break; } case 1: { cdtime = 19.60; break; } case 2: { cdtime = 19.10; break; } case 3: { cdtime = 18.70; break; } case 4: { cdtime = 18.20; break; } case 5: { cdtime = 17.80; break; } case 6: { cdtime = 17.30; break; } case 7: { cdtime = 16.90; break; } case 8: { cdtime = 16.40; break; } case 9: { cdtime = 16.00; break; } }


                        switch (skillindex) { case 0: { updem1 = 0.3; break; } case 1: { updem1 = 0.4; break; } case 2: { updem1 = 0.5; break; } case 3: { updem1 = 0.6; break; } case 4: { updem1 = 0.7; break; } case 5: { updem1 = 0.8; break; } case 6: { updem1 = 0.9; break; } case 7: { updem1 = 1; break; } case 8: { updem1 = 1.1; break; } case 9: { updem1 = 1.2; break; } }

                        if (ischecked)
                        {

                            skillupdamage[combo] *= 1 + updem1;
                            skilltarget[combo] = 5;
                            renewindex(combo);

                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");


                        string read = "提升自身" + updem1 * 100 + "%伤害,目标5";
                        renewread(combo, read);

                        break;
                    }
                case 105403:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20.00; break; } case 1: { cdtime = 19.60; break; } case 2: { cdtime = 19.10; break; } case 3: { cdtime = 18.70; break; } case 4: { cdtime = 18.20; break; } case 5: { cdtime = 17.80; break; } case 6: { cdtime = 17.30; break; } case 7: { cdtime = 16.90; break; } case 8: { cdtime = 16.40; break; } case 9: { cdtime = 16.00; break; } }
                        switch (skillindex) { case 0: { attime = 4.00; break; } case 1: { attime = 4.20; break; } case 2: { attime = 4.40; break; } case 3: { attime = 4.70; break; } case 4: { attime = 4.90; break; } case 5: { attime = 5.10; break; } case 6: { attime = 5.30; break; } case 7: { attime = 5.60; break; } case 8: { attime = 5.80; break; } case 9: { attime = 6.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.28; updem2 = 0.25; break; } case 1: { updem1 = 0.31; updem2 = 0.28; break; } case 2: { updem1 = 0.34; updem2 = 0.31; break; } case 3: { updem1 = 0.37; updem2 = 0.33; break; } case 4: { updem1 = 0.40; updem2 = 0.36; break; } case 5: { updem1 = 0.43; updem2 = 0.39; break; } case 6: { updem1 = 0.46; updem2 = 0.42; break; } case 7: { updem1 = 0.49; updem2 = 0.44; break; } case 8: { updem1 = 0.52; updem2 = 0.47; break; } case 9: { updem1 = 0.55; updem2 = 0.5; break; } }

                        if (ischecked)
                        {

                            skillupdodge[combo] *= 1 + updem2;
                            skilluparmor[combo] *= 1 + updem1;
                            renewindex(combo);
                            renewtank();


                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("10");
                        string read = "提升自身" + updem1 * 100 + "%护甲," + updem2 * 100 + "%回避";
                        renewread(combo, read);
                        break;
                    }
                case 105404:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20.00; break; } case 1: { cdtime = 19.60; break; } case 2: { cdtime = 19.10; break; } case 3: { cdtime = 18.70; break; } case 4: { cdtime = 18.20; break; } case 5: { cdtime = 17.80; break; } case 6: { cdtime = 17.30; break; } case 7: { cdtime = 16.90; break; } case 8: { cdtime = 16.40; break; } case 9: { cdtime = 16.00; break; } }
                        switch (skillindex) { case 0: { attime = 4.00; break; } case 1: { attime = 4.20; break; } case 2: { attime = 4.40; break; } case 3: { attime = 4.70; break; } case 4: { attime = 4.90; break; } case 5: { attime = 5.10; break; } case 6: { attime = 5.30; break; } case 7: { attime = 5.60; break; } case 8: { attime = 5.80; break; } case 9: { attime = 6.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.30; updem2 = 0.30; break; } case 1: { updem1 = 0.33; updem2 = 0.33; break; } case 2: { updem1 = 0.37; updem2 = 0.37; break; } case 3: { updem1 = 0.40; updem2 = 0.40; break; } case 4: { updem1 = 0.43; updem2 = 0.43; break; } case 5: { updem1 = 0.47; updem2 = 0.47; break; } case 6: { updem1 = 0.50; updem2 = 0.50; break; } case 7: { updem1 = 0.53; updem2 = 0.53; break; } case 8: { updem1 = 0.57; updem2 = 0.57; break; } case 9: { updem1 = 0.60; updem2 = 0.60; break; } }

                        if (ischecked)
                        {

                            skillupdodge[combo] *= 1 + updem2;
                            skilluparmor[combo] *= 1 + updem1;
                            renewindex(combo);
                            renewtank();


                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("10");
                        string read = "提升自身" + updem1 * 100 + "%护甲," + updem2 * 100 + "%回避";
                        renewread(combo, read);
                        break;
                    }
                case 102003:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        switch (skillindex) { case 0: { attime = 5; break; } case 1: { attime = 6; break; } case 2: { attime = 6; break; } case 3: { attime = 6; break; } case 4: { attime = 7; break; } case 5: { attime = 7; break; } case 6: { attime = 7; break; } case 7: { attime = 8; break; } case 8: { attime = 8; break; } case 9: { attime = 8; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.12; updem2 = 0.12; break; } case 1: { updem1 = 0.13; updem2 = 0.13; break; } case 2: { updem1 = 0.14; updem2 = 0.14; break; } case 3: { updem1 = 0.15; updem2 = 0.15; break; } case 4: { updem1 = 0.16; updem2 = 0.16; break; } case 5: { updem1 = 0.16; updem2 = 0.16; break; } case 6: { updem1 = 0.17; updem2 = 0.17; break; } case 7: { updem1 = 0.18; updem2 = 0.18; break; } case 8: { updem1 = 0.19; updem2 = 0.19; break; } case 9: { updem1 = 0.2; updem2 = 0.2; break; } }

                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupshotspeed[i] *= 1 + updem1;
                                skillupcrit[i] *= 1 + updem2;
                                renewindex(i);
                            }
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升全体" + updem1 * 100 + "%射速," + updem2 * 100 + "%暴击率";
                        renewread(combo, read);
                        break;
                    }
                case 102205:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 2; break; } case 1: { attime = 2.2; break; } case 2: { attime = 2.3; break; } case 3: { attime = 2.5; break; } case 4: { attime = 2.7; break; } case 5: { attime = 2.8; break; } case 6: { attime = 3; break; } case 7: { attime = 3.2; break; } case 8: { attime = 3.3; break; } case 9: { attime = 3.5; break; } }


                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        string read = "闪光弹,半径2.5";
                        renewread(combo, read);
                        break;
                    }
                case 103003:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 2; break; } case 1: { updem1 = 2.4; break; } case 2: { updem1 = 2.8; break; } case 3: { updem1 = 3.2; break; } case 4: { updem1 = 3.6; break; } case 5: { updem1 = 3.9; break; } case 6: { updem1 = 4.3; break; } case 7: { updem1 = 4.7; break; } case 8: { updem1 = 5.1; break; } case 9: { updem1 = 5.5; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("15");
                        string read = "2s瞄准,当前" + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 100124:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.4; break; } case 1: { updem1 = 0.43; break; } case 2: { updem1 = 0.46; break; } case 3: { updem1 = 0.48; break; } case 4: { updem1 = 0.51; break; } case 5: { updem1 = 0.54; break; } case 6: { updem1 = 0.57; break; } case 7: { updem1 = 0.59; break; } case 8: { updem1 = 0.62; break; } case 9: { updem1 = 0.65; break; } }

                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升自身" + updem1 * 100 + "%伤害";
                        renewread(combo, read);
                        break;
                    }

                case 105705:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 6; break; } case 1: { attime = 6.4; break; } case 2: { attime = 6.8; break; } case 3: { attime = 7.2; break; } case 4: { attime = 7.6; break; } case 5: { attime = 8; break; } case 6: { attime = 8.4; break; } case 7: { attime = 8.8; break; } case 8: { attime = 9.4; break; } case 9: { attime = 10; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.8; break; } case 1: { updem1 = 0.91; break; } case 2: { updem1 = 1.02; break; } case 3: { updem1 = 1.13; break; } case 4: { updem1 = 1.24; break; } case 5: { updem1 = 1.36; break; } case 6: { updem1 = 1.47; break; } case 7: { updem1 = 1.58; break; } case 8: { updem1 = 1.69; break; } case 9: { updem1 = 1.8; break; } }
                        switch (skillindex) { case 0: { updem2 = -0.2; break; } case 1: { updem2 = -0.22; break; } case 2: { updem2 = -0.23; break; } case 3: { updem2 = -0.25; break; } case 4: { updem2 = -0.27; break; } case 5: { updem2 = -0.28; break; } case 6: { updem2 = -0.3; break; } case 7: { updem2 = -0.32; break; } case 8: { updem2 = -0.33; break; } case 9: { updem2 = -0.35; break; } }

                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            skillupshotspeed[combo] *= 1 + updem2;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升自身" + updem1 * 100 + "%伤害,降低自身" + Math.Abs(updem2) * 100 + "%射速";
                        renewread(combo, read);
                        break;
                    }

                case 105204:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 18.00; break; } case 1: { cdtime = 18.00; break; } case 2: { cdtime = 18.00; break; } case 3: { cdtime = 18.00; break; } case 4: { cdtime = 18.00; break; } case 5: { cdtime = 18.00; break; } case 6: { cdtime = 18.00; break; } case 7: { cdtime = 18.00; break; } case 8: { cdtime = 18.00; break; } case 9: { cdtime = 18.00; break; } }
                        switch (skillindex) { case 0: { attime = 1.00; break; } case 1: { attime = 1.60; break; } case 2: { attime = 2.10; break; } case 3: { attime = 2.70; break; } case 4: { attime = 3.20; break; } case 5: { attime = 3.80; break; } case 6: { attime = 4.30; break; } case 7: { attime = 4.90; break; } case 8: { attime = 5.40; break; } case 9: { attime = 6.00; break; } }


                        if (innight)
                        {
                            switch (skillindex) { case 0: { updem1 = 0.3; break; } case 1: { updem1 = 0.34; break; } case 2: { updem1 = 0.39; break; } case 3: { updem1 = 0.43; break; } case 4: { updem1 = 0.48; break; } case 5: { updem1 = 0.52; break; } case 6: { updem1 = 0.57; break; } case 7: { updem1 = 0.61; break; } case 8: { updem1 = 0.66; break; } case 9: { updem1 = 0.7; break; } }
                            switch (skillindex) { case 0: { updem2 = 0.2; break; } case 1: { updem2 = 0.22; break; } case 2: { updem2 = 0.24; break; } case 3: { updem2 = 0.27; break; } case 4: { updem2 = 0.29; break; } case 5: { updem2 = 0.31; break; } case 6: { updem2 = 0.33; break; } case 7: { updem2 = 0.36; break; } case 8: { updem2 = 0.38; break; } case 9: { updem2 = 0.4; break; } }

                        }
                        else
                            switch (skillindex) { case 0: { updem1 = 0.1; break; } case 1: { updem1 = 0.11; break; } case 2: { updem1 = 0.12; break; } case 3: { updem1 = 0.13; break; } case 4: { updem1 = 0.14; break; } case 5: { updem1 = 0.16; break; } case 6: { updem1 = 0.17; break; } case 7: { updem1 = 0.18; break; } case 8: { updem1 = 0.19; break; } case 9: { updem1 = 0.2; break; } }

                        //      switch (skillindex) { case 0: { updem1 = 0.25; break; } case 1: { updem1 = 0.29; break; } case 2: { updem1 = 0.34; break; } case 3: { updem1 = 0.38; break; } case 4: { updem1 = 0.43; break; } case 5: { updem1 = 0.47; break; } case 6: { updem1 = 0.52; break; } case 7: { updem1 = 0.56; break; } case 8: { updem1 = 0.61; break; } case 9: { updem1 = 0.65; break; } }

                        if (ischecked)
                        {
                            skilluphit[combo] *= 1 + updem1;
                            if (innight)
                            {
                                skillupdamage[combo] *= 1 + updem2;
                            }
                            isfullcrit[combo] = true;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        string read = "";
                        if (innight)
                        {
                            read = "(夜)提升自身" + updem1 * 100 + "%命中," + updem2 * 100 + "%伤害,必爆";
                        }
                        else
                        {
                            read = "(昼)提升自身" + updem1 * 100 + "%命中,必爆";
                        }
                        renewread(combo, read);
                        break;
                    }
                case 100203:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.7; break; } case 1: { updem1 = 0.77; break; } case 2: { updem1 = 0.83; break; } case 3: { updem1 = 0.9; break; } case 4: { updem1 = 0.97; break; } case 5: { updem1 = 1.03; break; } case 6: { updem1 = 1.1; break; } case 7: { updem1 = 1.17; break; } case 8: { updem1 = 1.23; break; } case 9: { updem1 = 1.3; break; } }

                        if (ischecked)
                        {
                            skillupdodge[combo] *= 1 + updem1;
                            renewindex(combo);
                            renewtank();
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升自身" + updem1 * 100 + "%回避";
                        renewread(combo, read);
                        break;
                    }
                case 105805:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        switch (skillindex) { case 0: { updem1 = 4; break; } case 1: { updem1 = 4.6; break; } case 2: { updem1 = 5.1; break; } case 3: { updem1 = 5.7; break; } case 4: { updem1 = 6.2; break; } case 5: { updem1 = 6.8; break; } case 6: { updem1 = 7.3; break; } case 7: { updem1 = 7.9; break; } case 8: { updem1 = 8.4; break; } case 9: { updem1 = 9; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "飞斧,目标" + (updem1 + 1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 105903:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.25; break; } case 1: { updem1 = 0.28; break; } case 2: { updem1 = 0.31; break; } case 3: { updem1 = 0.33; break; } case 4: { updem1 = 0.36; break; } case 5: { updem1 = 0.39; break; } case 6: { updem1 = 0.42; break; } case 7: { updem1 = 0.44; break; } case 8: { updem1 = 0.47; break; } case 9: { updem1 = 0.5; break; } }
                        switch (skillindex) { case 0: { updem2 = 0.25; break; } case 1: { updem2 = 0.28; break; } case 2: { updem2 = 0.31; break; } case 3: { updem2 = 0.33; break; } case 4: { updem2 = 0.36; break; } case 5: { updem2 = 0.39; break; } case 6: { updem2 = 0.42; break; } case 7: { updem2 = 0.44; break; } case 8: { updem2 = 0.47; break; } case 9: { updem2 = 0.5; break; } }

                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            skillupcrit[combo] *= 1 + updem2;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升自身" + updem1 * 100 + "%伤害," + updem2 * 100 + "%暴击率";
                        renewread(combo, read);
                        break;
                    }
                case 106101:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        switch (skillindex)
                        {
                            case 0: { attime = 5; break; }
                            case 1: { attime = 6; break; }
                            case 2: { attime = 6; break; }
                            case 3: { attime = 6; break; }
                            case 4: { attime = 7; break; }
                            case 5: { attime = 7; break; }
                            case 6: { attime = 7; break; }
                            case 7: { attime = 8; break; }
                            case 8: { attime = 8; break; }
                            case 9: { attime = 8; break; }
                        }
                        switch (skillindex) { case 0: { updem1 = 0.06; break; } case 1: { updem1 = 0.07; break; } case 2: { updem1 = 0.08; break; } case 3: { updem1 = 0.09; break; } case 4: { updem1 = 0.1; break; } case 5: { updem1 = 0.11; break; } case 6: { updem1 = 0.12; break; } case 7: { updem1 = 0.13; break; } case 8: { updem1 = 0.14; break; } case 9: { updem1 = 0.15; break; } }
                        switch (skillindex) { case 0: { updem2 = 0.05; break; } case 1: { updem2 = 0.06; break; } case 2: { updem2 = 0.06; break; } case 3: { updem2 = 0.07; break; } case 4: { updem2 = 0.07; break; } case 5: { updem2 = 0.08; break; } case 6: { updem2 = 0.08; break; } case 7: { updem2 = 0.09; break; } case 8: { updem2 = 0.09; break; } case 9: { updem2 = 0.1; break; } }

                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupdamage[i] *= 1 + updem1;
                                skilluphit[i] *= 1 + updem2;
                                renewindex(i);
                            }
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升全体" + updem1 * 100 + "%伤害," + updem2 * 100 + "%命中";
                        renewread(combo, read);
                        break;
                    }
                case 101602:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15.00; break; } case 1: { cdtime = 14.70; break; } case 2: { cdtime = 14.30; break; } case 3: { cdtime = 14.00; break; } case 4: { cdtime = 13.70; break; } case 5: { cdtime = 13.30; break; } case 6: { cdtime = 13.00; break; } case 7: { cdtime = 12.70; break; } case 8: { cdtime = 12.30; break; } case 9: { cdtime = 12.00; break; } }
                        switch (skillindex) { case 0: { attime = 5.00; break; } case 1: { attime = 6.00; break; } case 2: { attime = 6.00; break; } case 3: { attime = 6.00; break; } case 4: { attime = 7.00; break; } case 5: { attime = 7.00; break; } case 6: { attime = 7.00; break; } case 7: { attime = 8.00; break; } case 8: { attime = 8.00; break; } case 9: { attime = 8.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.16; break; } case 1: { updem1 = 0.17; break; } case 2: { updem1 = 0.19; break; } case 3: { updem1 = 0.2; break; } case 4: { updem1 = 0.21; break; } case 5: { updem1 = 0.23; break; } case 6: { updem1 = 0.24; break; } case 7: { updem1 = 0.25; break; } case 8: { updem1 = 0.27; break; } case 9: { updem1 = 0.28; break; } }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "降低敌方全体" + updem1 * 100 + "%射速(不算)";
                        renewread(combo, read);
                        break;
                    }
                case 101903:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 1; break; } case 1: { updem1 = 1.06; break; } case 2: { updem1 = 1.11; break; } case 3: { updem1 = 1.11; break; } case 4: { updem1 = 1.22; break; } case 5: { updem1 = 1.28; break; } case 6: { updem1 = 1.33; break; } case 7: { updem1 = 1.39; break; } case 8: { updem1 = 1.44; break; } case 9: { updem1 = 1.5; break; } }
                        switch (skillindex) { case 0: { updem2 = 0.25; break; } case 1: { updem2 = 0.27; break; } case 2: { updem2 = 0.28; break; } case 3: { updem2 = 0.3; break; } case 4: { updem2 = 0.32; break; } case 5: { updem2 = 0.33; break; } case 6: { updem2 = 0.35; break; } case 7: { updem2 = 0.37; break; } case 8: { updem2 = 0.38; break; } case 9: { updem2 = 0.4; break; } }

                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            skillupdodge[combo] *= 1 + updem2;
                            renewindex(combo);
                            renewtank();
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升自身" + updem1 * 100 + "%伤害," + updem2 * 100 + "%回避";
                        renewread(combo, read);
                        break;
                    }
                case 106203:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.15; break; } case 1: { updem1 = 0.16; break; } case 2: { updem1 = 0.17; break; } case 3: { updem1 = 0.18; break; } case 4: { updem1 = 0.19; break; } case 5: { updem1 = 0.21; break; } case 6: { updem1 = 0.22; break; } case 7: { updem1 = 0.23; break; } case 8: { updem1 = 0.24; break; } case 9: { updem1 = 0.25; break; } }

                        if (ischecked)
                        {
                            if (combo - 3 >= 0)
                            {
                                skillupdamage[combo - 3] *= 1 + updem1;
                                skillupshotspeed[combo - 3] *= 1 + updem1;
                                skilluphit[combo - 3] *= 1 + updem1;
                                renewindex(combo - 3);
                            }
                            if (combo + 3 <= 8)
                            {
                                skillupdamage[combo + 3] *= 1 + updem1;
                                skillupshotspeed[combo + 3] *= 1 + updem1;
                                skilluphit[combo + 3] *= 1 + updem1;
                                renewindex(combo + 3);
                            }

                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "发动时位于自身影响格上的队友提升" + updem1 * 100 + "%伤害," + updem1 * 100 + "%射速," + updem1 * 100 + "%命中";
                        renewread(combo, read);
                        break;
                    }
                case 106404:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex)
                        {
                            case 0: { attime = 5; break; }
                            case 1: { attime = 6; break; }
                            case 2: { attime = 6; break; }
                            case 3: { attime = 6; break; }
                            case 4: { attime = 7; break; }
                            case 5: { attime = 7; break; }
                            case 6: { attime = 7; break; }
                            case 7: { attime = 8; break; }
                            case 8: { attime = 8; break; }
                            case 9: { attime = 8; break; }
                        }
                        switch (skillindex) { case 0: { updem1 = 0.5; break; } case 1: { updem1 = 0.53; break; } case 2: { updem1 = 0.57; break; } case 3: { updem1 = 0.6; break; } case 4: { updem1 = 0.63; break; } case 5: { updem1 = 0.67; break; } case 6: { updem1 = 0.7; break; } case 7: { updem1 = 0.73; break; } case 8: { updem1 = 0.77; break; } case 9: { updem1 = 0.8; break; } }
                        switch (skillindex) { case 0: { updem2 = 0.25; break; } case 1: { updem2 = 0.27; break; } case 2: { updem2 = 0.28; break; } case 3: { updem2 = 0.3; break; } case 4: { updem2 = 0.32; break; } case 5: { updem2 = 0.33; break; } case 6: { updem2 = 0.35; break; } case 7: { updem2 = 0.37; break; } case 8: { updem2 = 0.38; break; } case 9: { updem2 = 0.4; break; } }

                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            skilluphit[combo] *= 1 + updem2;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "攻击目标切换后排,提升自身" + updem1 * 100 + "%伤害," + updem2 * 100 + "%命中";
                        renewread(combo, read);
                        break;
                    }
                case 106304:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { updem1 = 0.05; break; } case 1: { updem1 = 0.07; break; } case 2: { updem1 = 0.08; break; } case 3: { updem1 = 0.1; break; } case 4: { updem1 = 0.12; break; } case 5: { updem1 = 0.13; break; } case 6: { updem1 = 0.15; break; } case 7: { updem1 = 0.17; break; } case 8: { updem1 = 0.18; break; } case 9: { updem1 = 0.2; break; } }


                        skillupboom[combo] = updem1;
                        renewindex(combo);


                        //  string cd = "(此技能算法未写,暂时平均加到伤害上)";
                        gun[index].cd = -1;
                        renewattime(combo, "99");
                        gun[index].startcd = ("-1");
                        string read = "" + updem1 * 100 + "%再射一发必暴击子弹";
                        renewread(combo, read);
                        break;
                    }
                case 100412:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3; break; } case 1: { attime = 3.2; break; } case 2: { attime = 3.4; break; } case 3: { attime = 3.7; break; } case 4: { attime = 3.9; break; } case 5: { attime = 4.1; break; } case 6: { attime = 4.3; break; } case 7: { attime = 4.6; break; } case 8: { attime = 4.8; break; } case 9: { attime = 5; break; } }
                        if (innight)
                            switch (skillindex) { case 0: { updem1 = 0.5; break; } case 1: { updem1 = 0.54; break; } case 2: { updem1 = 0.59; break; } case 3: { updem1 = 0.63; break; } case 4: { updem1 = 0.68; break; } case 5: { updem1 = 0.72; break; } case 6: { updem1 = 0.77; break; } case 7: { updem1 = 0.81; break; } case 8: { updem1 = 0.86; break; } case 9: { updem1 = 0.9; break; } }
                        else
                            switch (skillindex) { case 0: { updem1 = 0.15; break; } case 1: { updem1 = 0.16; break; } case 2: { updem1 = 0.18; break; } case 3: { updem1 = 0.19; break; } case 4: { updem1 = 0.21; break; } case 5: { updem1 = 0.22; break; } case 6: { updem1 = 0.24; break; } case 7: { updem1 = 0.25; break; } case 8: { updem1 = 0.27; break; } case 9: { updem1 = 0.28; break; } }
                        if (ischecked)
                        {
                            skillupshotspeed[combo] *= 1 + updem1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        if (innight)
                        {
                            string read = "(夜)提升自身" + updem1 * 100 + "%射速";
                            renewread(combo, read);
                        }
                        else
                        {
                            string read = "(昼)提升自身" + updem1 * 100 + "%射速";
                            renewread(combo, read);
                        }
                        break;
                    }
                case 101704:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 3.00; break; } case 1: { attime = 3.20; break; } case 2: { attime = 3.40; break; } case 3: { attime = 3.70; break; } case 4: { attime = 3.90; break; } case 5: { attime = 4.10; break; } case 6: { attime = 4.30; break; } case 7: { attime = 4.60; break; } case 8: { attime = 4.80; break; } case 9: { attime = 5.00; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.5; updem2 = 0.16; break; } case 1: { updem1 = 0.54; updem2 = 0.17; break; } case 2: { updem1 = 0.58; updem2 = 0.18; break; } case 3: { updem1 = 0.62; updem2 = 0.19; break; } case 4: { updem1 = 0.66; updem2 = 0.2; break; } case 5: { updem1 = 0.69; updem2 = 0.21; break; } case 6: { updem1 = 0.73; updem2 = 0.22; break; } case 7: { updem1 = 0.77; updem2 = 0.23; break; } case 8: { updem1 = 0.81; updem2 = 0.24; break; } case 9: { updem1 = 0.85; updem2 = 0.25; break; } }

                        if (ischecked)
                        {

                            skillupdamage[combo] *= 1 + updem1;
                            skillupshotspeed[combo] *= 1 + updem2;
                            renewindex(combo);

                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升自身" + updem1 * 100 + "%伤害," + updem2 * 100 + "%射速";
                        renewread(combo, read);
                        break;
                    }
                case 106406:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.6; break; } case 1: { updem1 = 0.7; break; } case 2: { updem1 = 0.7; break; } case 3: { updem1 = 0.8; break; } case 4: { updem1 = 0.9; break; } case 5: { updem1 = 0.9; break; } case 6: { updem1 = 1; break; } case 7: { updem1 = 1.1; break; } case 8: { updem1 = 1.1; break; } case 9: { updem1 = 1.2; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 * 8;
                            renewindex(combo);
                        }
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "冲刺,小范围8次" + (updem1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 106407:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 4; break; } case 1: { updem1 = 4.4; break; } case 2: { updem1 = 4.9; break; } case 3: { updem1 = 5.3; break; } case 4: { updem1 = 5.8; break; } case 5: { updem1 = 6.2; break; } case 6: { updem1 = 6.7; break; } case 7: { updem1 = 7.1; break; } case 8: { updem1 = 7.6; break; } case 9: { updem1 = 8; break; } }
                        switch (skillindex) { case 0: { updem2 = 6; break; } case 1: { updem2 = 6.7; break; } case 2: { updem2 = 7.3; break; } case 3: { updem2 = 8; break; } case 4: { updem2 = 8.7; break; } case 5: { updem2 = 9.3; break; } case 6: { updem2 = 10; break; } case 7: { updem2 = 10.7; break; } case 8: { updem2 = 11.3; break; } case 9: { updem2 = 12; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + updem2;
                            renewindex(combo);
                        }
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("10");
                        string read = (updem1) + "倍伤害锁定，随后导弹1.5半径" + (updem2) + "倍伤害";
                        renewread(combo, read);
                        break;
                    }
                case 102117:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 2.5; break; } case 1: { updem1 = 2.8; break; } case 2: { updem1 = 3.1; break; } case 3: { updem1 = 3.3; break; } case 4: { updem1 = 3.6; break; } case 5: { updem1 = 3.9; break; } case 6: { updem1 = 4.2; break; } case 7: { updem1 = 4.4; break; } case 8: { updem1 = 4.7; break; } case 9: { updem1 = 5; break; } }
                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 * 3;
                            renewindex(combo);
                        }
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "扔3次榴弹,1.5半径," + (updem1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 106501:
                    {
                        double cdtime = 666;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;
                        double downdem1 = 0.1;
                        double downdem2 = -0.05;
                        int rate = 0;
                        //      switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.2; updem2 = -0.2; break; } case 1: { updem1 = 0.21; updem2 = -0.21; break; } case 2: { updem1 = 0.22; updem2 = -0.21; break; } case 3: { updem1 = 0.23; updem2 = -0.22; break; } case 4: { updem1 = 0.24; updem2 = -0.22; break; } case 5: { updem1 = 0.25; updem2 = -0.23; break; } case 6: { updem1 = 0.26; updem2 = -0.23; break; } case 7: { updem1 = 0.27; updem2 = -0.24; break; } case 8: { updem1 = 0.28; updem2 = -0.24; break; } case 9: { updem1 = 0.3; updem2 = -0.25; break; } }
                        if (ischecked)
                        {
                            //        skillsolidmultiple[combo] = updem1 * 3;


                            rate = (int)((slider.Value - ump40skillclose) / 2) + 1;
                            if (rate > 5)
                                rate = 5;
                            skillupdamage[combo] *= Math.Pow((updem1 + 1), rate);
                            skillupdodge[combo] *= Math.Pow((updem2 + 1), rate);
                            renewindex(combo);
                            renewtank();
                            string read = "(释放时)每2秒伤害上升" + updem1 * 100 + "%,回避下降" + Math.Abs(updem2) * 100 + "%,最多叠加5层";
                            renewread(combo, read);

                        }
                        else
                        {
                            rate = (int)((slider.Value - ump40skillopen) / 2) + 1;
                            if (rate > 5)
                                rate = 5;
                            skillupdodge[combo] *= Math.Pow((downdem1 + 1), rate);
                            skillupdamage[combo] *= Math.Pow((downdem2 + 1), rate);
                            renewindex(combo);
                            renewtank();
                            string read = "(释放时)每2秒回避上升" + downdem1 * 100 + "%,伤害下降" + Math.Abs(downdem2) * 100 + "%,最多叠加5层";
                            renewread(combo, read);

                        }
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("1");

                        break;
                    }
                case 102303:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 2; break; } case 1: { attime = 2.4; break; } case 2: { attime = 2.7; break; } case 3: { attime = 3; break; } case 4: { attime = 3.4; break; } case 5: { attime = 3.7; break; } case 6: { attime = 4; break; } case 7: { attime = 4.4; break; } case 8: { attime = 4.7; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 2.2; updem2 = -0.50; break; } case 1: { updem1 = 2.6; updem2 = -0.40; break; } case 2: { updem1 = 2.9; updem2 = -0.4; break; } case 3: { updem1 = 3.3; updem2 = -0.30; break; } case 4: { updem1 = 3.7; updem2 = -0.30; break; } case 5: { updem1 = 4; updem2 = -0.20; break; } case 6: { updem1 = 4.4; updem2 = -0.20; break; } case 7: { updem1 = 4.8; updem2 = -0.10; break; } case 8: { updem1 = 5.1; updem2 = -0.10; break; } case 9: { updem1 = 5.5; updem2 = 0.00; break; } }

                        if (ischecked)
                        {
                            skillsolidmultiple[combo] = updem1 + 1;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("3");
                        string read = "燃烧弹,半径1.5," + (updem1 + 1) + "倍,每0.33秒" + (updem2 + 1) + "倍(不算)";
                        renewread(combo, read);
                        break;
                    }
                case 105707:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 2.5; break; } case 1: { updem1 = 2.8; break; } case 2: { updem1 = 3.2; break; } case 3: { updem1 = 3.6; break; } case 4: { updem1 = 4; break; } case 5: { updem1 = 4.4; break; } case 6: { updem1 = 4.8; break; } case 7: { updem1 = 5.2; break; } case 8: { updem1 = 5.6; break; } case 9: { updem1 = 6; break; } }
                        switch (skillindex) { case 0: { updem2 = 4.5; break; } case 1: { updem2 = 5.1; break; } case 2: { updem2 = 5.7; break; } case 3: { updem2 = 6.3; break; } case 4: { updem2 = 6.9; break; } case 5: { updem2 = 7.5; break; } case 6: { updem2 = 8.1; break; } case 7: { updem2 = 8.7; break; } case 8: { updem2 = 9.3; break; } case 9: { updem2 = 10; break; } }
                        if (ischecked)
                        {
                            if (enemyarmor.Text != "0")
                                skillsolidmultiple[combo] = updem2;
                            else
                                skillsolidmultiple[combo] = updem1;
                            renewindex(combo);
                        }
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("15");
                        string read = "2s瞄准,血量最高" + (updem1) + "倍,有甲则" + (updem2) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 105706:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.8; break; } case 1: { updem1 = 0.9; break; } case 2: { updem1 = 1; break; } case 3: { updem1 = 1.1; break; } case 4: { updem1 = 1.2; break; } case 5: { updem1 = 1.3; break; } case 6: { updem1 = 1.4; break; } case 7: { updem1 = 1.5; break; } case 8: { updem1 = 1.6; break; } case 9: { updem1 = 1.8; break; } }
                        if (ischecked)
                        {

                            skillsolidmultiple[combo] = updem1;
                            renewindex(combo);
                        }
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "2s瞄准最远,贯通" + (updem1) + "倍,目标额外" + (updem1) + "倍";
                        renewread(combo, read);
                        break;
                    }
                case 105904:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 20; break; } case 1: { cdtime = 19.6; break; } case 2: { cdtime = 19.1; break; } case 3: { cdtime = 18.7; break; } case 4: { cdtime = 18.2; break; } case 5: { cdtime = 17.8; break; } case 6: { cdtime = 17.3; break; } case 7: { cdtime = 16.9; break; } case 8: { cdtime = 16.4; break; } case 9: { cdtime = 16; break; } }
                        switch (skillindex) { case 0: { attime = 5; break; } case 1: { attime = 6; break; } case 2: { attime = 6; break; } case 3: { attime = 6; break; } case 4: { attime = 7; break; } case 5: { attime = 7; break; } case 6: { attime = 7; break; } case 7: { attime = 8; break; } case 8: { attime = 8; break; } case 9: { attime = 8; break; } }
                        if (!innight)
                        {
                            switch (skillindex) { case 0: { updem1 = 0.2; break; } case 1: { updem1 = 0.23; break; } case 2: { updem1 = 0.27; break; } case 3: { updem1 = 0.3; break; } case 4: { updem1 = 0.33; break; } case 5: { updem1 = 0.37; break; } case 6: { updem1 = 0.4; break; } case 7: { updem1 = 0.43; break; } case 8: { updem1 = 0.47; break; } case 9: { updem1 = 0.5; break; } }
                            switch (skillindex) { case 0: { updem2 = 0.15; break; } case 1: { updem2 = 0.16; break; } case 2: { updem2 = 0.17; break; } case 3: { updem2 = 0.18; break; } case 4: { updem2 = 0.19; break; } case 5: { updem2 = 0.2; break; } case 6: { updem2 = 0.21; break; } case 7: { updem2 = 0.22; break; } case 8: { updem2 = 0.23; break; } case 9: { updem2 = 0.25; break; } }
                        }
                        else
                        {
                            switch (skillindex) { case 0: { updem1 = 0.6; break; } case 1: { updem1 = 0.67; break; } case 2: { updem1 = 0.73; break; } case 3: { updem1 = 0.8; break; } case 4: { updem1 = 0.87; break; } case 5: { updem1 = 0.93; break; } case 6: { updem1 = 1; break; } case 7: { updem1 = 1.07; break; } case 8: { updem1 = 1.13; break; } case 9: { updem1 = 1.2; break; } }
                            switch (skillindex) { case 0: { updem2 = 0.25; break; } case 1: { updem2 = 0.28; break; } case 2: { updem2 = 0.31; break; } case 3: { updem2 = 0.33; break; } case 4: { updem2 = 0.36; break; } case 5: { updem2 = 0.39; break; } case 6: { updem2 = 0.42; break; } case 7: { updem2 = 0.44; break; } case 8: { updem2 = 0.47; break; } case 9: { updem2 = 0.5; break; } }
                        }

                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            skillupcrit[combo] *= 1 + updem2;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("5");
                        if (innight)
                        {
                            string read = "(夜)提升自身" + updem1 * 100 + "%伤害," + updem2 * 100 + "%暴击率";
                            renewread(combo, read);
                        }
                        else
                        {
                            string read = "(昼)提升自身" + updem1 * 100 + "%伤害," + updem2 * 100 + "%暴击率";
                            renewread(combo, read);
                        }
                        break;
                    }
                case 105106:
                    {
                        double cdtime = 18;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { attime = 6.00; break; } case 1: { attime = 6.20; break; } case 2: { attime = 6.40; break; } case 3: { attime = 6.70; break; } case 4: { attime = 6.90; break; } case 5: { attime = 7.10; break; } case 6: { attime = 7.30; break; } case 7: { attime = 7.60; break; } case 8: { attime = 7.80; break; } case 9: { attime = 8.00; break; } }
                        if (innight)
                            switch (skillindex) { case 0: { updem1 = 0.28; break; } case 1: { updem1 = 0.3; break; } case 2: { updem1 = 0.33; break; } case 3: { updem1 = 0.35; break; } case 4: { updem1 = 0.38; break; } case 5: { updem1 = 0.4; break; } case 6: { updem1 = 0.43; break; } case 7: { updem1 = 0.45; break; } case 8: { updem1 = 0.48; break; } case 9: { updem1 = 0.5; break; } }
                        else
                            switch (skillindex) { case 0: { updem1 = 0.06; break; } case 1: { updem1 = 0.07; break; } case 2: { updem1 = 0.07; break; } case 3: { updem1 = 0.08; break; } case 4: { updem1 = 0.08; break; } case 5: { updem1 = 0.09; break; } case 6: { updem1 = 0.09; break; } case 7: { updem1 = 0.1; break; } case 8: { updem1 = 0.1; break; } case 9: { updem1 = 0.11; break; } }

                        switch (skillindex) { case 0: { updem2 = 1; break; } case 1: { updem2 = 2; break; } case 2: { updem2 = 2; break; } case 3: { updem2 = 2; break; } case 4: { updem2 = 2; break; } case 5: { updem2 = 3; break; } case 6: { updem2 = 3; break; } case 7: { updem2 = 3; break; } case 8: { updem2 = 3; break; } case 9: { updem2 = 4; break; } }


                        if (ischecked)
                        {
                            skillupdamage[combo] *= 1 + updem1;
                            skillupbelt[combo] += updem2;
                            renewindex(combo);
                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("8");
                        if (innight)
                        {
                            string read = "(夜)提升自身" + updem1 * 100 + "%伤害,弹链+" + updem2 + "(不算弹链时间)";
                            renewread(combo, read);
                        }
                        else
                        {
                            string read = "(昼)提升自身" + updem1 * 100 + "%伤害,弹链+" + updem2 + "(不算弹链时间)";
                            renewread(combo, read);
                        }
                        break;
                    }
                case 106601:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 10; break; } case 1: { cdtime = 9.8; break; } case 2: { cdtime = 9.6; break; } case 3: { cdtime = 9.3; break; } case 4: { cdtime = 9.1; break; } case 5: { cdtime = 8.9; break; } case 6: { cdtime = 8.7; break; } case 7: { cdtime = 8.4; break; } case 8: { cdtime = 8.2; break; } case 9: { cdtime = 8; break; } }
                        switch (skillindex) { case 0: { attime = 3.00; break; } case 1: { attime = 3.30; break; } case 2: { attime = 3.70; break; } case 3: { attime = 4; break; } case 4: { attime = 4.3; break; } case 5: { attime = 4.7; break; } case 6: { attime = 5; break; } case 7: { attime = 5.3; break; } case 8: { attime = 5.7; break; } case 9: { attime = 6; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.3; break; } case 1: { updem1 = 0.32; break; } case 2: { updem1 = 0.34; break; } case 3: { updem1 = 0.37; break; } case 4: { updem1 = 0.39; break; } case 5: { updem1 = 0.41; break; } case 6: { updem1 = 0.43; break; } case 7: { updem1 = 0.46; break; } case 8: { updem1 = 0.48; break; } case 9: { updem1 = 0.5; break; } }

                        if (ischecked)
                        {

                            skilluphit[combo] *= 1 + updem1;
                            skillupshotspeed[combo] *= 1 + updem1;
                            renewindex(combo);

                        }

                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "提升自身" + updem1 * 100 + "%命中," + updem1 * 100 + "%射速";
                        renewread(combo, read);
                        break;
                    }

                case 106701:
                    {
                        double cdtime = 0;
                        double attime = 0;
                        double updem1 = 0;
                        double updem2 = 0;

                        switch (skillindex) { case 0: { cdtime = 15; break; } case 1: { cdtime = 14.7; break; } case 2: { cdtime = 14.3; break; } case 3: { cdtime = 14; break; } case 4: { cdtime = 13.7; break; } case 5: { cdtime = 13.3; break; } case 6: { cdtime = 13; break; } case 7: { cdtime = 12.7; break; } case 8: { cdtime = 12.3; break; } case 9: { cdtime = 12; break; } }
                        switch (skillindex) { case 0: { attime = 3.00; break; } case 1: { attime = 3.20; break; } case 2: { attime = 3.40; break; } case 3: { attime = 3.70; break; } case 4: { attime = 3.90; break; } case 5: { attime = 4.10; break; } case 6: { attime = 4.30; break; } case 7: { attime = 4.60; break; } case 8: { attime = 4.80; break; } case 9: { attime = 5; break; } }
                        switch (skillindex) { case 0: { updem1 = 0.25; break; } case 1: { updem1 = 0.27; break; } case 2: { updem1 = 0.28; break; } case 3: { updem1 = 0.3; break; } case 4: { updem1 = 0.32; break; } case 5: { updem1 = 0.33; break; } case 6: { updem1 = 0.35; break; } case 7: { updem1 = 0.37; break; } case 8: { updem1 = 0.38; break; } case 9: { updem1 = 0.4; break; } }
                        switch (skillindex) { case 0: { updem2 = 1.5; break; } case 1: { updem2 = 1.7; break; } case 2: { updem2 = 1.8; break; } case 3: { updem2 = 2; break; } case 4: { updem2 = 2.2; break; } case 5: { updem2 = 2.3; break; } case 6: { updem2 = 2.5; break; } case 7: { updem2 = 2.7; break; } case 8: { updem2 = 2.8; break; } case 9: { updem2 = 3; break; } }

                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skilldamageagain[i] = updem1 + 1;
                                renewindex(i);
                            }
                            skillsolidmultiple[combo] = updem2;
                            renewindex(combo);
                        }
                        //     先偷懒成群体突击眼
                        gun[index].cd = cdtime;
                        renewattime(combo, attime.ToString());
                        gun[index].startcd = ("6");
                        string read = "";
                        if (combo%3==0)
                        read = "1s瞄准最近," + (updem2 ) + "倍,BOSS优先,集火";
                        else if (combo % 3 == 1)
                            read = "1s瞄准血量最高," + (updem2) + "倍,BOSS优先,集火";
                        else if (combo % 3 == 2)
                            read = "1s瞄准最远," + (updem2) + "倍,BOSS优先,集火";
                        renewread(combo, read);

                        break;
                    }

                default:
                    break;


            }

            return;
        }
        /// <summary>
        /// 左上格技能等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SkillLevel0_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int skillindex = SkillLevel0.SelectedIndex;
            int index = Combo0.SelectedIndex;
            if (index == -1 || skillindex == -1)
                return;
            //   calcprobabiliy(0, index, skillindex);
            renewskill();
        }
        /// <summary>
        /// 上格技能等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SkillLevel1_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int skillindex = SkillLevel1.SelectedIndex;
            int index = Combo1.SelectedIndex;
            if (index == -1 || skillindex == -1)
                return;
            //  calcprobabiliy(1, index, skillindex);
            renewskill();
        }
        /// <summary>
        /// 右上格技能等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SkillLevel2_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int skillindex = SkillLevel2.SelectedIndex;
            int index = Combo2.SelectedIndex;
            if (index == -1 || skillindex == -1)
                return;
            //  calcprobabiliy(2, index, skillindex);
            renewskill();
        }
        /// <summary>
        /// 左中格技能等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SkillLevel3_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int skillindex = SkillLevel3.SelectedIndex;
            int index = Combo3.SelectedIndex;
            if (index == -1 || skillindex == -1)
                return;
            //  calcprobabiliy(3, index, skillindex);
            renewskill();
        }
        /// <summary>
        /// 中格技能等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SkillLevel4_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int skillindex = SkillLevel4.SelectedIndex;
            int index = Combo4.SelectedIndex;
            if (index == -1 || skillindex == -1)
                return;
            //  calcprobabiliy(4, index, skillindex);
            renewskill();
        }
        /// <summary>
        /// 右中格技能等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SkillLevel5_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int skillindex = SkillLevel5.SelectedIndex;
            int index = Combo5.SelectedIndex;
            if (index == -1 || skillindex == -1)
                return;
            //  calcprobabiliy(5, index, skillindex);
            renewskill();
        }
        /// <summary>
        /// 左下格技能等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SkillLevel6_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int skillindex = SkillLevel6.SelectedIndex;
            int index = Combo6.SelectedIndex;
            if (index == -1 || skillindex == -1)
                return;
            //  calcprobabiliy(6, index, skillindex);
            renewskill();
        }
        /// <summary>
        /// 下格技能等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SkillLevel7_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int skillindex = SkillLevel7.SelectedIndex;
            int index = Combo7.SelectedIndex;
            if (index == -1 || skillindex == -1)
                return;
            //  calcprobabiliy(7, index, skillindex);
            renewskill();
        }
        /// <summary>
        /// 右下格技能等级改变事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SkillLevel8_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int skillindex = SkillLevel8.SelectedIndex;
            int index = Combo8.SelectedIndex;
            if (index == -1 || skillindex == -1)
                return;
            //  calcprobabiliy(8, index, skillindex);
            renewskill();
        }
        /// <summary>
        /// 凑数用按钮点击。。。已抛弃的功能
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buff_Click(object sender, RoutedEventArgs e)
        {
            buffOn bo = new buffOn();
            bo.gg = gg;
            bo.select = new int[9];
            bo.select[0] = Combo0.SelectedIndex;
            bo.select[1] = Combo1.SelectedIndex;
            bo.select[2] = Combo2.SelectedIndex;
            bo.select[3] = Combo3.SelectedIndex;
            bo.select[4] = Combo4.SelectedIndex;
            bo.select[5] = Combo5.SelectedIndex;
            bo.select[6] = Combo6.SelectedIndex;
            bo.select[7] = Combo7.SelectedIndex;
            bo.select[8] = Combo8.SelectedIndex;
            bo.ShowDialog();
        }

        /// <summary>
        /// 点击更新链接
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Hyperlink_Click(object sender, RoutedEventArgs e)
        {
            System.Diagnostics.Process.Start("iexplore.exe", hyperLink.NavigateUri.ToString());
        }

        /// <summary>
        /// 给装备选项上色
        /// </summary>
        /// <param name="rank">星级</param>
        /// <param name="str">名称</param>
        /// <returns></returns>
        public Label BrushEquipCombobox(int rank, string str)
        {
            Label l = new Label();
            l.Content = str;
            if (rank == 2)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                l.Foreground = br;
            }
            else if (rank == 3)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                l.Foreground = br;
            }
            else if (rank == 4)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                l.Foreground = br;
            }
            else if (rank == 5)
            {
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Orange"));
                l.Foreground = br;
            }
            return l;
        }

        /// <summary>
        /// 导入枪娘可用装备数据
        /// </summary>
        /// <param name="index">该格枪娘index</param>
        /// <param name="levelindex">该格枪娘等级index</param>
        /// <param name="combo">哪一格</param>
        public void loadequipcb(int index, int levelindex, int combo)
        {
            if (levelindex == -1)
                return;
            if (index == -1 || index == GUN_NUMBER || levelindex < 19)
                return;
            int ranklevel = 0;
            int cardlevel = 0;
            string[] type1 = gun[index].equiptype1.Split(',');
            string[] type2 = gun[index].equiptype2.Split(',');
            string[] type3 = gun[index].equiptype3.Split(',');
            if (levelindex < 29)
            {
                ranklevel = 2;
                cardlevel = 1;
            }
            else if (levelindex < 44)
            {
                ranklevel = 3;
                cardlevel = 1;
            }
            else if (levelindex < 49)
            {
                ranklevel = 4;
                cardlevel = 1;
            }
            else if (levelindex < 59)
            {
                ranklevel = 4;
                cardlevel = 2;
            }
            else if (levelindex < 79)
            {
                ranklevel = 5;
                cardlevel = 2;
            }
            else
            {
                ranklevel = 5;
                cardlevel = 3;
            }
            switch (combo)
            {
                case 0:
                    {
                        if (cardlevel >= 1)
                        {
                            equipcb01.IsEnabled = true;
                            equipcb01.Items.Clear();
                            equipcb01.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type1)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb01.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb01.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 2)
                        {
                            equipcb02.IsEnabled = true;
                            equipcb02.Items.Clear();
                            equipcb02.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type2)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb02.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb02.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 3)
                        {
                            equipcb03.IsEnabled = true;
                            equipcb03.Items.Clear();
                            equipcb03.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type3)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb03.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb03.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        break;
                    }
                case 1:
                    {
                        if (cardlevel >= 1)
                        {
                            equipcb11.IsEnabled = true;
                            equipcb11.Items.Clear();
                            equipcb11.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type1)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb11.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb11.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 2)
                        {
                            equipcb12.IsEnabled = true;
                            equipcb12.Items.Clear();
                            equipcb12.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type2)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb12.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb12.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 3)
                        {
                            equipcb13.IsEnabled = true;
                            equipcb13.Items.Clear();
                            equipcb13.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type3)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb13.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb13.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        break;
                    }
                case 2:
                    {
                        if (cardlevel >= 1)
                        {
                            equipcb21.IsEnabled = true;
                            equipcb21.Items.Clear();
                            equipcb21.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type1)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb21.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb21.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 2)
                        {
                            equipcb22.IsEnabled = true;
                            equipcb22.Items.Clear();
                            equipcb22.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type2)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb22.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb22.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 3)
                        {
                            equipcb23.IsEnabled = true;
                            equipcb23.Items.Clear();
                            equipcb23.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type3)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb23.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb23.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        break;
                    }
                case 3:
                    {
                        if (cardlevel >= 1)
                        {
                            equipcb31.IsEnabled = true;
                            equipcb31.Items.Clear();
                            equipcb31.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type1)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb31.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb31.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 2)
                        {
                            equipcb32.IsEnabled = true;
                            equipcb32.Items.Clear();
                            equipcb32.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type2)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb32.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb32.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 3)
                        {
                            equipcb33.IsEnabled = true;
                            equipcb33.Items.Clear();
                            equipcb33.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type3)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb33.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb33.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        break;
                    }
                case 4:
                    {
                        if (cardlevel >= 1)
                        {
                            equipcb41.IsEnabled = true;
                            equipcb41.Items.Clear();
                            equipcb41.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type1)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb41.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb41.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 2)
                        {
                            equipcb42.IsEnabled = true;
                            equipcb42.Items.Clear();
                            equipcb42.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type2)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb42.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb42.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 3)
                        {
                            equipcb43.IsEnabled = true;
                            equipcb43.Items.Clear();
                            equipcb43.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type3)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb43.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb43.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        break;
                    }
                case 5:
                    {
                        if (cardlevel >= 1)
                        {
                            equipcb51.IsEnabled = true;
                            equipcb51.Items.Clear();
                            equipcb51.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type1)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb51.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb51.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 2)
                        {
                            equipcb52.IsEnabled = true;
                            equipcb52.Items.Clear();
                            equipcb52.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type2)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb52.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb52.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 3)
                        {
                            equipcb53.IsEnabled = true;
                            equipcb53.Items.Clear();
                            equipcb53.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type3)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb53.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb53.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        break;
                    }
                case 6:
                    {
                        if (cardlevel >= 1)
                        {
                            equipcb61.IsEnabled = true;
                            equipcb61.Items.Clear();
                            equipcb61.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type1)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb61.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb61.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 2)
                        {
                            equipcb62.IsEnabled = true;
                            equipcb62.Items.Clear();
                            equipcb62.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type2)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb62.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb62.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 3)
                        {
                            equipcb63.IsEnabled = true;
                            equipcb63.Items.Clear();
                            equipcb63.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type3)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb63.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb63.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        break;
                    }
                case 7:
                    {
                        if (cardlevel >= 1)
                        {
                            equipcb71.IsEnabled = true;
                            equipcb71.Items.Clear();
                            equipcb71.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type1)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb71.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb71.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 2)
                        {
                            equipcb72.IsEnabled = true;
                            equipcb72.Items.Clear();
                            equipcb72.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type2)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb72.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb72.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 3)
                        {
                            equipcb73.IsEnabled = true;
                            equipcb73.Items.Clear();
                            equipcb73.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type3)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb73.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb73.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        break;
                    }
                case 8:
                    {
                        if (cardlevel >= 1)
                        {
                            equipcb81.IsEnabled = true;
                            equipcb81.Items.Clear();
                            equipcb81.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type1)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb81.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb81.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 2)
                        {
                            equipcb82.IsEnabled = true;
                            equipcb82.Items.Clear();
                            equipcb82.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type2)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb82.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb82.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        if (cardlevel >= 3)
                        {
                            equipcb83.IsEnabled = true;
                            equipcb83.Items.Clear();
                            equipcb83.Items.Add(BrushEquipCombobox(equip[30].rank, equip[30].name));
                            foreach (string type in type3)
                            {
                                for (int i = 0; i < EQUIP_NUMBER; i++)
                                {
                                    if (equip[i].type == int.Parse(type) && equip[i].rank <= ranklevel)
                                    {
                                        if (equip[i].forwhat == "")
                                            equipcb83.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                        else if (StringinD(equip[i].forwhat, index.ToString()))
                                            equipcb83.Items.Add(BrushEquipCombobox(equip[i].rank, equip[i].name));
                                    }
                                }
                            }
                        }
                        break;
                    }
                default:
                    break;
            }
        }

        /// <summary>
        /// 得到装备index
        /// </summary>
        /// <param name="name">装备名称</param>
        /// <returns></returns>
        public int getequipindex(string name)
        {
            if (name == null)
                return -1;
            int equipindex = 0;
            for (; equipindex < EQUIP_NUMBER; equipindex++)
            {
                if (name == equip[equipindex].name)
                    break;
            }
            return equipindex;
        }
        /// <summary>
        /// 清空装备栏
        /// </summary>
        /// <param name="combo">哪一格</param>
        public void clearequip(int combo)
        {
            equipdamage[combo] = 0;
            equiphit[combo] = 0;
            equipdodge[combo] = 0;
            equipbelt[combo] = 0;
            equipcrit[combo] = 0;
            equipnightsee[combo] = 0;
            equipshotspeed[combo] = 0;
            equipbreakarmor[combo] = 10;
            equiparmor[combo] = 0;
            equipcritharm[combo] = 0;
            equiprifledslug[combo] = false;
        }
        /// <summary>
        /// 计算装备加成
        /// </summary>
        /// <param name="combo">哪一格</param>
        /// <param name="equipindex">装备index</param>
        public void calcequip(int combo, int equipindex, double number, int property)
        {
            switch (property)
            {
                case 1:
                    {
                        if (!String.IsNullOrEmpty(equip[equipindex].property1))
                        {
                            switch (equip[equipindex].property1)
                            {
                                case "伤害":
                                    {
                                        equipdamage[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "回避":
                                    {
                                        equipdodge[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "穿甲":
                                    {
                                        equipbreakarmor[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "暴击率":
                                    {
                                        equipcrit[combo] += number / 100;
                                        break;
                                    }
                                case "命中":
                                    {
                                        equiphit[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "射速":
                                    {
                                        equipshotspeed[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "夜视抵消":
                                    {
                                        equipnightsee[combo] += number;
                                        break;
                                    }
                                case "弹链":
                                    {
                                        equipbelt[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "暴击伤害":
                                    {
                                        equipcritharm[combo] += double.Parse(number.ToString()) / 100;
                                        break;
                                    }
                                case "护甲":
                                    {
                                        equiparmor[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "目标":
                                    {
                                        int index = 0;
                                        bool skillon = false;
                                        switch (combo)
                                        {
                                            case 0: { index = Combo0.SelectedIndex; skillon = cb0.IsChecked == true; break; }
                                            case 1: { index = Combo1.SelectedIndex; skillon = cb1.IsChecked == true; break; }
                                            case 2: { index = Combo2.SelectedIndex; skillon = cb2.IsChecked == true; break; }
                                            case 3: { index = Combo3.SelectedIndex; skillon = cb3.IsChecked == true; break; }
                                            case 4: { index = Combo4.SelectedIndex; skillon = cb4.IsChecked == true; break; }
                                            case 5: { index = Combo5.SelectedIndex; skillon = cb5.IsChecked == true; break; }
                                            case 6: { index = Combo6.SelectedIndex; skillon = cb6.IsChecked == true; break; }
                                            case 7: { index = Combo7.SelectedIndex; skillon = cb7.IsChecked == true; break; }
                                            case 8: { index = Combo8.SelectedIndex; skillon = cb8.IsChecked == true; break; }
                                        }
                                        if (skillon && gun[index].type == 100122)
                                            break;
                                        else
                                            equiprifledslug[combo] = true;
                                        break;
                                    }
                                default: break;

                            }
                        }
                        break;
                    }
                case 2:
                    {

                        if (!String.IsNullOrEmpty(equip[equipindex].property2))
                        {
                            switch (equip[equipindex].property2)
                            {
                                case "伤害":
                                    {
                                        equipdamage[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "回避":
                                    {
                                        equipdodge[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "穿甲":
                                    {
                                        equipbreakarmor[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "暴击率":
                                    {
                                        equipcrit[combo] += number / 100;
                                        break;
                                    }
                                case "命中":
                                    {
                                        equiphit[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "射速":
                                    {
                                        equipshotspeed[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "夜视抵消":
                                    {
                                        equipnightsee[combo] += number;
                                        break;
                                    }
                                case "弹链":
                                    {
                                        equipbelt[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "暴击伤害":
                                    {
                                        equipcritharm[combo] += double.Parse(number.ToString()) / 100;
                                        break;
                                    }
                                case "护甲":
                                    {
                                        equiparmor[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "目标":
                                    {
                                        int index = 0;
                                        bool skillon = false;
                                        switch (combo)
                                        {
                                            case 0: { index = Combo0.SelectedIndex; skillon = cb0.IsChecked == true; break; }
                                            case 1: { index = Combo1.SelectedIndex; skillon = cb1.IsChecked == true; break; }
                                            case 2: { index = Combo2.SelectedIndex; skillon = cb2.IsChecked == true; break; }
                                            case 3: { index = Combo3.SelectedIndex; skillon = cb3.IsChecked == true; break; }
                                            case 4: { index = Combo4.SelectedIndex; skillon = cb4.IsChecked == true; break; }
                                            case 5: { index = Combo5.SelectedIndex; skillon = cb5.IsChecked == true; break; }
                                            case 6: { index = Combo6.SelectedIndex; skillon = cb6.IsChecked == true; break; }
                                            case 7: { index = Combo7.SelectedIndex; skillon = cb7.IsChecked == true; break; }
                                            case 8: { index = Combo8.SelectedIndex; skillon = cb8.IsChecked == true; break; }
                                        }
                                        if (skillon && gun[index].type == 100122)
                                            break;
                                        else
                                            equiprifledslug[combo] = true;
                                        break;
                                    }
                                default: break;

                            }
                        }
                        break;
                    }
                case 3:
                    {
                        if (!String.IsNullOrEmpty(equip[equipindex].property3))
                        {
                            switch (equip[equipindex].property3)
                            {
                                case "伤害":
                                    {
                                        equipdamage[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "回避":
                                    {
                                        equipdodge[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "穿甲":
                                    {
                                        equipbreakarmor[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "暴击率":
                                    {
                                        equipcrit[combo] += number / 100;
                                        break;
                                    }
                                case "命中":
                                    {
                                        equiphit[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "射速":
                                    {
                                        equipshotspeed[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "夜视抵消":
                                    {
                                        equipnightsee[combo] += number;
                                        break;
                                    }
                                case "弹链":
                                    {
                                        equipbelt[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "暴击伤害":
                                    {
                                        equipcritharm[combo] += double.Parse(number.ToString()) / 100;
                                        break;
                                    }
                                case "护甲":
                                    {
                                        equiparmor[combo] += int.Parse(number.ToString());
                                        break;
                                    }
                                case "目标":
                                    {
                                        int index = 0;
                                        bool skillon = false;
                                        switch (combo)
                                        {
                                            case 0: { index = Combo0.SelectedIndex; skillon = cb0.IsChecked == true; break; }
                                            case 1: { index = Combo1.SelectedIndex; skillon = cb1.IsChecked == true; break; }
                                            case 2: { index = Combo2.SelectedIndex; skillon = cb2.IsChecked == true; break; }
                                            case 3: { index = Combo3.SelectedIndex; skillon = cb3.IsChecked == true; break; }
                                            case 4: { index = Combo4.SelectedIndex; skillon = cb4.IsChecked == true; break; }
                                            case 5: { index = Combo5.SelectedIndex; skillon = cb5.IsChecked == true; break; }
                                            case 6: { index = Combo6.SelectedIndex; skillon = cb6.IsChecked == true; break; }
                                            case 7: { index = Combo7.SelectedIndex; skillon = cb7.IsChecked == true; break; }
                                            case 8: { index = Combo8.SelectedIndex; skillon = cb8.IsChecked == true; break; }
                                        }
                                        if (skillon && gun[index].type == 100122)
                                            break;
                                        else
                                            equiprifledslug[combo] = true;
                                        break;
                                    }
                                case "命中-20,射速-10":
                                    {
                                        equiphit[combo] += -20;
                                        equipshotspeed[combo] += -10;
                                        break;
                                    }
                                default: break;

                            }
                        }
                        break;
                    }
            }

            /*    switch (equip[equipindex].type) 
                {
                    case 1:
                        {
                            equipcrit[combo] += equip[equipindex].critup;
                            break;
                        }
                    case 2:
                        {
                            equiphit[combo] += equip[equipindex].hit;
                            equipdamage[combo] += equip[equipindex].damage;
                            equipshotspeed[combo] += equip[equipindex].shotspeed;
                            break;
                        }
                    case 3:
                        {
                            equiphit[combo] += equip[equipindex].hit;
                            equipshotspeed[combo] += equip[equipindex].shotspeed;
                            break;
                        }
                    case 4:
                        {
                            equipnightsee[combo] += equip[equipindex].nightsee;
                            break;
                        }
                    case 5:
                        {
                            equipbreakarmor[combo] += equip[equipindex].breakarmor;
                            equipshotspeed[combo] += equip[equipindex].shotspeed;
                            break;
                        }
                    case 8:
                        {
                            equipdamage[combo] += equip[equipindex].damage;
                            equiphit[combo] += equip[equipindex].hit;
                            break;
                        }
                    case 9:
                        {
                            equipshotspeed[combo] += equip[equipindex].shotspeed;
                            equipdamage[combo] += equip[equipindex].damage;
                            equipbelt[combo] += equip[equipindex].belt;
                            break;
                        }
                    case 10:
                        {
                            equipdodge[combo] += equip[equipindex].dodge;
                            equipdamage[combo] += equip[equipindex].damage;
                            break;
                        }
                    case 13:
                        break;
                    default:
                        break;
                }*/

        }
        /// <summary>
        /// 设置装备tooltips
        /// </summary>
        /// <param name="combo">哪一格装备格</param>
        /// <param name="index">装备index</param>
        private void setequiptooltips(int combo, int index)
        {
            switch (combo)
            {
                case 1:
                    {
                        equipcb01.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 2:
                    {
                        equipcb02.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 3:
                    {
                        equipcb03.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 11:
                    {
                        equipcb11.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 12:
                    {
                        equipcb12.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 13:
                    {
                        equipcb13.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 21:
                    {
                        equipcb21.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 22:
                    {
                        equipcb22.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 23:
                    {
                        equipcb23.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 31:
                    {
                        equipcb31.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 32:
                    {
                        equipcb32.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 33:
                    {
                        equipcb33.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 41:
                    {
                        equipcb41.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 42:
                    {
                        equipcb42.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 43:
                    {
                        equipcb43.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 51:
                    {
                        equipcb51.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 52:
                    {
                        equipcb52.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 53:
                    {
                        equipcb53.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 61:
                    {
                        equipcb61.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 62:
                    {
                        equipcb62.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 63:
                    {
                        equipcb63.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 71:
                    {
                        equipcb71.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 72:
                    {
                        equipcb72.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 73:
                    {
                        equipcb73.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 81:
                    {
                        equipcb81.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 82:
                    {
                        equipcb82.ToolTip = equip[index].tooltip;
                        break;
                    }
                case 83:
                    {
                        equipcb83.ToolTip = equip[index].tooltip;
                        break;
                    }
            }
        }
        /// <summary>
        /// 01装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb01_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb011.IsEnabled = false;
            equiptb012.IsEnabled = false;
            equiptb013.IsEnabled = false;
            equiptb011.SelectedIndex = -1;
            equiptb012.SelectedIndex = -1;
            equiptb013.SelectedIndex = -1;
            //        clearequip(0);

            int comboindex = Combo0.SelectedIndex;

            if (equipcb01.SelectedItem != null)
            {
                string equipselect01 = equipcb01.SelectedItem.ToString();
                int equipindex01 = getequipindex(equipselect01.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex01].property1))
                {
                    equiptb011.IsEnabled = true;
                    equiptb011.Items.Clear();
                    for (int i = (int)equip[equipindex01].down1; i <= equip[equipindex01].up1; i++)
                    {
                        equiptb011.Items.Add(i);
                    }
                    equiptb011.SelectedIndex = equiptb011.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex01].property2))
                {
                    equiptb012.IsEnabled = true;
                    equiptb012.Items.Clear();
                    for (int i = (int)equip[equipindex01].down2; i <= equip[equipindex01].up2; i++)
                    {
                        equiptb012.Items.Add(i);
                    }
                    equiptb012.SelectedIndex = equiptb012.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex01].property3))
                {
                    equiptb013.IsEnabled = true;
                    equiptb013.Items.Clear();
                    for (int i = (int)equip[equipindex01].down3; i <= equip[equipindex01].up3; i++)
                    {
                        equiptb013.Items.Add(i);
                    }
                    equiptb013.SelectedIndex = equiptb013.Items.Count - 1;
                }
                if (equipindex01 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb02.SelectedItem != null && equipcb02.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb02.SelectedItem.ToString().Substring(31))].type == equip[equipindex01].type)
                            {
                                equipcb01.SelectedIndex = 0; return;
                            }
                    }
                if (equip[equipindex01].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb01.Foreground = br;
                }
                else if (equip[equipindex01].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb01.Foreground = br;
                }
                else if (equip[equipindex01].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb01.Foreground = br;
                }
                else if (equip[equipindex01].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb01.Foreground = br;
                }
                setequiptooltips(1, equipindex01);
            }
            if (equipcb02.SelectedItem != null)
            {
                string equipselect02 = equipcb02.SelectedItem.ToString();
                int equipindex02 = getequipindex(equipselect02.Substring(31));

                if (equipindex02 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb03.SelectedItem != null && equipcb03.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb03.SelectedItem.ToString().Substring(31))].type == equip[equipindex02].type)
                            {
                                equipcb01.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb01.SelectedItem != null && equipcb01.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb01.SelectedItem.ToString().Substring(31))].type == equip[equipindex02].type)
                            {
                                equipcb01.SelectedIndex = 0; return;
                            }
                    }
            }
            if (equipcb03.SelectedItem != null)
            {
                string equipselect03 = equipcb03.SelectedItem.ToString();
                int equipindex03 = getequipindex(equipselect03.Substring(31));
                if (equipindex03 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb02.SelectedItem != null && equipcb02.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb02.SelectedItem.ToString().Substring(31))].type == equip[equipindex03].type)
                            {
                                equipcb01.SelectedIndex = 0; return;
                            }
                    }
            }
            renewskill();
        }
        /// <summary>
        /// 02装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb02_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb021.IsEnabled = false;
            equiptb022.IsEnabled = false;
            equiptb023.IsEnabled = false;
            equiptb021.SelectedIndex = -1;
            equiptb022.SelectedIndex = -1;
            equiptb023.SelectedIndex = -1;
            //clearequip(0);
            int comboindex = Combo0.SelectedIndex;

            if (equipcb01.SelectedItem != null)
            {
                string equipselect01 = equipcb01.SelectedItem.ToString();
                int equipindex01 = getequipindex(equipselect01.Substring(31));
                if (equipindex01 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb02.SelectedItem != null && equipcb02.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb02.SelectedItem.ToString().Substring(31))].type == equip[equipindex01].type)
                            {
                                equipcb02.SelectedIndex = 0; return;
                            }

                    }
                //    if (equipcb02.SelectedIndex > -1)
                //        calcequip(0, equipindex01,1);
            }
            if (equipcb02.SelectedItem != null)
            {
                string equipselect02 = equipcb02.SelectedItem.ToString();
                int equipindex02 = getequipindex(equipselect02.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex02].property1))
                {
                    equiptb021.IsEnabled = true;
                    equiptb021.Items.Clear();
                    for (int i = (int)equip[equipindex02].down1; i <= equip[equipindex02].up1; i++)
                    {
                        equiptb021.Items.Add(i);
                    }
                    equiptb021.SelectedIndex = equiptb021.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex02].property2))
                {
                    equiptb022.IsEnabled = true;
                    equiptb022.Items.Clear();
                    for (int i = (int)equip[equipindex02].down2; i <= equip[equipindex02].up2; i++)
                    {
                        equiptb022.Items.Add(i);
                    }
                    equiptb022.SelectedIndex = equiptb022.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex02].property3))
                {
                    equiptb023.IsEnabled = true;
                    equiptb023.Items.Clear();
                    for (int i = (int)equip[equipindex02].down3; i <= equip[equipindex02].up3; i++)
                    {
                        equiptb023.Items.Add(i);
                    }
                    equiptb023.SelectedIndex = equiptb023.Items.Count - 1;
                }
                if (equipindex02 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb03.SelectedItem != null && equipcb03.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb03.SelectedItem.ToString().Substring(31))].type == equip[equipindex02].type)
                            {
                                equipcb02.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb01.SelectedItem != null && equipcb01.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb01.SelectedItem.ToString().Substring(31))].type == equip[equipindex02].type)
                            {
                                equipcb02.SelectedIndex = 0; return;
                            }
                    }
                //     if (equipcb02.SelectedIndex > -1)
                //         calcequip(0, equipindex02,2);
                if (equip[equipindex02].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb02.Foreground = br;
                }
                else if (equip[equipindex02].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb02.Foreground = br;
                }
                else if (equip[equipindex02].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb02.Foreground = br;
                }
                else if (equip[equipindex02].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb02.Foreground = br;
                }
                setequiptooltips(2, equipindex02);
            }
            if (equipcb03.SelectedItem != null)
            {
                string equipselect03 = equipcb03.SelectedItem.ToString();
                int equipindex03 = getequipindex(equipselect03.Substring(31));
                if (equipindex03 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb02.SelectedItem != null && equipcb02.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb02.SelectedItem.ToString().Substring(31))].type == equip[equipindex03].type)
                            {
                                equipcb02.SelectedIndex = 0; return;
                            }
                    }

                //    if (equipcb02.SelectedIndex > -1)
                //        calcequip(0, equipindex03,3);
            }
            renewskill();
        }
        /// <summary>
        /// 03装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb03_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb031.IsEnabled = false;
            equiptb032.IsEnabled = false;
            equiptb033.IsEnabled = false;
            equiptb031.SelectedIndex = -1;
            equiptb032.SelectedIndex = -1;
            equiptb033.SelectedIndex = -1;
            //clearequip(0);
            int comboindex = Combo0.SelectedIndex;

            if (equipcb01.SelectedItem != null)
            {
                string equipselect01 = equipcb01.SelectedItem.ToString();
                int equipindex01 = getequipindex(equipselect01.Substring(31));
                if (equipindex01 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb02.SelectedItem != null && equipcb02.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb02.SelectedItem.ToString().Substring(31))].type == equip[equipindex01].type)
                            {
                                equipcb03.SelectedIndex = 0; return;
                            }
                    }
                //     if (equipcb03.SelectedIndex > -1)
                //         calcequip(0, equipindex01,1);
            }
            if (equipcb02.SelectedItem != null)
            {
                string equipselect02 = equipcb02.SelectedItem.ToString();
                int equipindex02 = getequipindex(equipselect02.Substring(31));
                if (equipindex02 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb03.SelectedItem != null && equipcb03.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb03.SelectedItem.ToString().Substring(31))].type == equip[equipindex02].type)
                            {
                                equipcb03.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb01.SelectedItem != null && equipcb01.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb01.SelectedItem.ToString().Substring(31))].type == equip[equipindex02].type)
                            {
                                equipcb03.SelectedIndex = 0; return;
                            }
                    }
                //    if (equipcb03.SelectedIndex > -1)
                //        calcequip(0, equipindex02,2);
            }
            if (equipcb03.SelectedItem != null)
            {
                string equipselect03 = equipcb03.SelectedItem.ToString();
                int equipindex03 = getequipindex(equipselect03.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex03].property1))
                {
                    equiptb031.IsEnabled = true;
                    equiptb031.Items.Clear();
                    for (int i = (int)equip[equipindex03].down1; i <= equip[equipindex03].up1; i++)
                    {
                        equiptb031.Items.Add(i);
                    }
                    equiptb031.SelectedIndex = equiptb031.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex03].property2))
                {
                    equiptb032.IsEnabled = true;
                    equiptb032.Items.Clear();
                    for (int i = (int)equip[equipindex03].down2; i <= equip[equipindex03].up2; i++)
                    {
                        equiptb032.Items.Add(i);
                    }
                    equiptb032.SelectedIndex = equiptb032.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex03].property3))
                {
                    equiptb033.IsEnabled = true;
                    equiptb033.Items.Clear();
                    for (int i = (int)equip[equipindex03].down3; i <= equip[equipindex03].up3; i++)
                    {
                        equiptb033.Items.Add(i);
                    }
                    equiptb033.SelectedIndex = equiptb033.Items.Count - 1;
                }
                if (equipindex03 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb02.SelectedItem != null && equipcb02.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb02.SelectedItem.ToString().Substring(31))].type == equip[equipindex03].type)
                            {
                                equipcb03.SelectedIndex = 0; return;
                            }
                    }


                //     if (equipcb03.SelectedIndex > -1) 
                //          calcequip(0, equipindex03,3);
                if (equip[equipindex03].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb03.Foreground = br;
                }
                else if (equip[equipindex03].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb03.Foreground = br;
                }
                else if (equip[equipindex03].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb03.Foreground = br;
                }
                else if (equip[equipindex03].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb03.Foreground = br;
                }
                setequiptooltips(3, equipindex03);
            }
            renewskill();
        }
        /// <summary>
        /// 11装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb11_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb111.IsEnabled = false;
            equiptb112.IsEnabled = false;
            equiptb113.IsEnabled = false;
            equiptb111.SelectedIndex = -1;
            equiptb112.SelectedIndex = -1;
            equiptb113.SelectedIndex = -1;
            //clearequip(1);
            int comboindex = Combo1.SelectedIndex;

            if (equipcb11.SelectedItem != null)
            {
                string equipselect11 = equipcb11.SelectedItem.ToString();
                int equipindex11 = getequipindex(equipselect11.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex11].property1))
                {
                    equiptb111.IsEnabled = true;
                    equiptb111.Items.Clear();
                    for (int i = (int)equip[equipindex11].down1; i <= equip[equipindex11].up1; i++)
                    {
                        equiptb111.Items.Add(i);
                    }
                    equiptb111.SelectedIndex = equiptb111.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex11].property2))
                {
                    equiptb112.IsEnabled = true;
                    equiptb112.Items.Clear();
                    for (int i = (int)equip[equipindex11].down2; i <= equip[equipindex11].up2; i++)
                    {
                        equiptb112.Items.Add(i);
                    }
                    equiptb112.SelectedIndex = equiptb112.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex11].property3))
                {
                    equiptb113.IsEnabled = true;
                    equiptb113.Items.Clear();
                    for (int i = (int)equip[equipindex11].down3; i <= equip[equipindex11].up3; i++)
                    {
                        equiptb113.Items.Add(i);
                    }
                    equiptb113.SelectedIndex = equiptb113.Items.Count - 1;
                }
                if (equipindex11 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb12.SelectedItem != null && equipcb12.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb12.SelectedItem.ToString().Substring(31))].type == equip[equipindex11].type)
                            {
                                equipcb11.SelectedIndex = 0; return;
                            }
                    }
                //    if (equipcb11.SelectedIndex > -1)
                //        calcequip(1, equipindex11,11);
                if (equip[equipindex11].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb11.Foreground = br;
                }
                else if (equip[equipindex11].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb11.Foreground = br;
                }
                else if (equip[equipindex11].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb11.Foreground = br;
                }
                else if (equip[equipindex11].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb11.Foreground = br;
                }
                setequiptooltips(11, equipindex11);
            }
            if (equipcb12.SelectedItem != null)
            {
                string equipselect12 = equipcb12.SelectedItem.ToString();
                int equipindex12 = getequipindex(equipselect12.Substring(31));
                if (equipindex12 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb13.SelectedItem != null && equipcb13.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb13.SelectedItem.ToString().Substring(31))].type == equip[equipindex12].type)
                            {
                                equipcb11.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb11.SelectedItem != null && equipcb11.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb11.SelectedItem.ToString().Substring(31))].type == equip[equipindex12].type)
                            {
                                equipcb11.SelectedIndex = 0; return;
                            }
                    }
                //      if (equipcb11.SelectedIndex > -1)
                //          calcequip(1, equipindex12,12);
            }
            if (equipcb13.SelectedItem != null)
            {
                string equipselect13 = equipcb13.SelectedItem.ToString();
                int equipindex13 = getequipindex(equipselect13.Substring(31));
                if (equipindex13 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb12.SelectedItem != null && equipcb12.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb12.SelectedItem.ToString().Substring(31))].type == equip[equipindex13].type)
                            {
                                equipcb11.SelectedIndex = 0; return;
                            }
                    }

                //        if (equipcb11.SelectedIndex > -1)
                //            calcequip(1, equipindex13,13);
            }
            renewskill();
        }
        /// <summary>
        /// 12装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb12_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb121.IsEnabled = false;
            equiptb122.IsEnabled = false;
            equiptb123.IsEnabled = false;
            equiptb121.SelectedIndex = -1;
            equiptb122.SelectedIndex = -1;
            equiptb123.SelectedIndex = -1;
            //clearequip(1);
            int comboindex = Combo1.SelectedIndex;

            if (equipcb11.SelectedItem != null)
            {
                string equipselect11 = equipcb11.SelectedItem.ToString();
                int equipindex11 = getequipindex(equipselect11.Substring(31));
                if (equipindex11 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb12.SelectedItem != null && equipcb12.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb12.SelectedItem.ToString().Substring(31))].type == equip[equipindex11].type)
                            {
                                equipcb12.SelectedIndex = 0; return;
                            }
                    }
                //    if (equipcb12.SelectedIndex > -1)
                //        calcequip(1, equipindex11,11);
            }
            if (equipcb12.SelectedItem != null)
            {
                string equipselect12 = equipcb12.SelectedItem.ToString();
                int equipindex12 = getequipindex(equipselect12.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex12].property1))
                {
                    equiptb121.IsEnabled = true;
                    equiptb121.Items.Clear();
                    for (int i = (int)equip[equipindex12].down1; i <= equip[equipindex12].up1; i++)
                    {
                        equiptb121.Items.Add(i);
                    }
                    equiptb121.SelectedIndex = equiptb121.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex12].property2))
                {
                    equiptb122.IsEnabled = true;
                    equiptb122.Items.Clear();
                    for (int i = (int)equip[equipindex12].down2; i <= equip[equipindex12].up2; i++)
                    {
                        equiptb122.Items.Add(i);
                    }
                    equiptb122.SelectedIndex = equiptb122.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex12].property3))
                {
                    equiptb123.IsEnabled = true;
                    equiptb123.Items.Clear();
                    for (int i = (int)equip[equipindex12].down3; i <= equip[equipindex12].up3; i++)
                    {
                        equiptb123.Items.Add(i);
                    }
                    equiptb123.SelectedIndex = equiptb123.Items.Count - 1;
                }
                if (equipindex12 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb13.SelectedItem != null && equipcb13.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb13.SelectedItem.ToString().Substring(31))].type == equip[equipindex12].type)
                            {
                                equipcb12.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb11.SelectedItem != null && equipcb11.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb11.SelectedItem.ToString().Substring(31))].type == equip[equipindex12].type)
                            {
                                equipcb12.SelectedIndex = 0; return;
                            }
                    }
                //    if (equipcb12.SelectedIndex > -1)
                //       calcequip(1, equipindex12,12);
                if (equip[equipindex12].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb12.Foreground = br;
                }
                else if (equip[equipindex12].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb12.Foreground = br;
                }
                else if (equip[equipindex12].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb12.Foreground = br;
                }
                else if (equip[equipindex12].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb12.Foreground = br;
                }
                setequiptooltips(12, equipindex12);
            }
            if (equipcb13.SelectedItem != null)
            {
                string equipselect13 = equipcb13.SelectedItem.ToString();
                int equipindex13 = getequipindex(equipselect13.Substring(31));
                if (equipindex13 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb12.SelectedItem != null && equipcb12.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb12.SelectedItem.ToString().Substring(31))].type == equip[equipindex13].type)
                            {
                                equipcb12.SelectedIndex = 0; return;
                            }
                    }

                //   if (equipcb12.SelectedIndex > -1)
                //       calcequip(1, equipindex13,13);
            }
            renewskill();
        }
        /// <summary>
        ///13装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb13_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb131.IsEnabled = false;
            equiptb132.IsEnabled = false;
            equiptb133.IsEnabled = false;
            equiptb131.SelectedIndex = -1;
            equiptb132.SelectedIndex = -1;
            equiptb133.SelectedIndex = -1;
            //clearequip(1);
            int comboindex = Combo1.SelectedIndex;

            if (equipcb11.SelectedItem != null)
            {
                string equipselect11 = equipcb11.SelectedItem.ToString();
                int equipindex11 = getequipindex(equipselect11.Substring(31));
                if (equipindex11 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb12.SelectedItem != null && equipcb12.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb12.SelectedItem.ToString().Substring(31))].type == equip[equipindex11].type)
                            {
                                equipcb13.SelectedIndex = 0; return;
                            }
                    }
                //  if (equipcb13.SelectedIndex > -1)
                //      calcequip(1, equipindex11,11);
            }
            if (equipcb12.SelectedItem != null)
            {
                string equipselect12 = equipcb12.SelectedItem.ToString();
                int equipindex12 = getequipindex(equipselect12.Substring(31));
                if (equipindex12 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb13.SelectedItem != null && equipcb13.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb13.SelectedItem.ToString().Substring(31))].type == equip[equipindex12].type)
                            {
                                equipcb13.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb11.SelectedItem != null && equipcb11.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb11.SelectedItem.ToString().Substring(31))].type == equip[equipindex12].type)
                            {
                                equipcb13.SelectedIndex = 0; return;
                            }
                    }
                //   if (equipcb13.SelectedIndex > -1)
                //       calcequip(1, equipindex12,12);
            }
            if (equipcb13.SelectedItem != null)
            {
                string equipselect13 = equipcb13.SelectedItem.ToString();
                int equipindex13 = getequipindex(equipselect13.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex13].property1))
                {
                    equiptb131.IsEnabled = true;
                    equiptb131.Items.Clear();
                    for (int i = (int)equip[equipindex13].down1; i <= equip[equipindex13].up1; i++)
                    {
                        equiptb131.Items.Add(i);
                    }
                    equiptb131.SelectedIndex = equiptb131.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex13].property2))
                {
                    equiptb132.IsEnabled = true;
                    equiptb132.Items.Clear();
                    for (int i = (int)equip[equipindex13].down2; i <= equip[equipindex13].up2; i++)
                    {
                        equiptb132.Items.Add(i);
                    }
                    equiptb132.SelectedIndex = equiptb132.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex13].property3))
                {
                    equiptb133.IsEnabled = true;
                    equiptb133.Items.Clear();
                    for (int i = (int)equip[equipindex13].down3; i <= equip[equipindex13].up3; i++)
                    {
                        equiptb133.Items.Add(i);
                    }
                    equiptb133.SelectedIndex = equiptb133.Items.Count - 1;
                }
                if (equipindex13 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb12.SelectedItem != null && equipcb12.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb12.SelectedItem.ToString().Substring(31))].type == equip[equipindex13].type)
                            {
                                equipcb13.SelectedIndex = 0; return;
                            }
                    }

                //      if (equipcb13.SelectedIndex > -1)
                //         calcequip(1, equipindex13,13);
                if (equip[equipindex13].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb13.Foreground = br;
                }
                else if (equip[equipindex13].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb13.Foreground = br;
                }
                else if (equip[equipindex13].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb13.Foreground = br;
                }
                else if (equip[equipindex13].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb13.Foreground = br;
                }
                setequiptooltips(13, equipindex13);
            }
            renewskill();
        }
        /// <summary>
        /// 21装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb21_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb211.IsEnabled = false;
            equiptb212.IsEnabled = false;
            equiptb213.IsEnabled = false;
            equiptb211.SelectedIndex = -1;
            equiptb212.SelectedIndex = -1;
            equiptb213.SelectedIndex = -1;
            //clearequip(2);
            int comboindex = Combo2.SelectedIndex;

            if (equipcb21.SelectedItem != null)
            {
                string equipselect21 = equipcb21.SelectedItem.ToString();
                int equipindex21 = getequipindex(equipselect21.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex21].property1))
                {
                    equiptb211.IsEnabled = true;
                    equiptb211.Items.Clear();
                    for (int i = (int)equip[equipindex21].down1; i <= equip[equipindex21].up1; i++)
                    {
                        equiptb211.Items.Add(i);
                    }
                    equiptb211.SelectedIndex = equiptb211.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex21].property2))
                {
                    equiptb212.IsEnabled = true;
                    equiptb212.Items.Clear();
                    for (int i = (int)equip[equipindex21].down2; i <= equip[equipindex21].up2; i++)
                    {
                        equiptb212.Items.Add(i);
                    }
                    equiptb212.SelectedIndex = equiptb212.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex21].property3))
                {
                    equiptb213.IsEnabled = true;
                    equiptb213.Items.Clear();
                    for (int i = (int)equip[equipindex21].down3; i <= equip[equipindex21].up3; i++)
                    {
                        equiptb213.Items.Add(i);
                    }
                    equiptb213.SelectedIndex = equiptb213.Items.Count - 1;
                }
                if (equipindex21 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb22.SelectedItem != null && equipcb22.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb22.SelectedItem.ToString().Substring(31))].type == equip[equipindex21].type)
                            {
                                equipcb21.SelectedIndex = 0; return;
                            }
                    }
                //     if (equipcb21.SelectedIndex > -1)
                //          calcequip(2, equipindex21,21);
                if (equip[equipindex21].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb21.Foreground = br;
                }
                else if (equip[equipindex21].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb21.Foreground = br;
                }
                else if (equip[equipindex21].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb21.Foreground = br;
                }
                else if (equip[equipindex21].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb21.Foreground = br;
                }
                setequiptooltips(21, equipindex21);
            }
            if (equipcb22.SelectedItem != null)
            {
                string equipselect22 = equipcb22.SelectedItem.ToString();
                int equipindex22 = getequipindex(equipselect22.Substring(31));
                if (equipindex22 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb23.SelectedItem != null && equipcb23.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb23.SelectedItem.ToString().Substring(31))].type == equip[equipindex22].type)
                            {
                                equipcb21.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb21.SelectedItem != null && equipcb21.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb21.SelectedItem.ToString().Substring(31))].type == equip[equipindex22].type)
                            {
                                equipcb21.SelectedIndex = 0; return;
                            }
                    }
                //    if (equipcb21.SelectedIndex > -1)
                //         calcequip(2, equipindex22,22);
            }
            if (equipcb23.SelectedItem != null)
            {
                string equipselect23 = equipcb23.SelectedItem.ToString();
                int equipindex23 = getequipindex(equipselect23.Substring(31));
                if (equipindex23 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb22.SelectedItem != null && equipcb22.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb22.SelectedItem.ToString().Substring(31))].type == equip[equipindex23].type)
                            {
                                equipcb21.SelectedIndex = 0; return;
                            }
                    }

                //    if (equipcb21.SelectedIndex > -1)
                //        calcequip(2, equipindex23,23);
            }
            renewskill();
        }
        /// <summary>
        /// 22装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb22_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb221.IsEnabled = false;
            equiptb222.IsEnabled = false;
            equiptb223.IsEnabled = false;
            equiptb221.SelectedIndex = -1;
            equiptb222.SelectedIndex = -1;
            equiptb223.SelectedIndex = -1;
            //clearequip(2);
            int comboindex = Combo2.SelectedIndex;

            if (equipcb21.SelectedItem != null)
            {
                string equipselect21 = equipcb21.SelectedItem.ToString();
                int equipindex21 = getequipindex(equipselect21.Substring(31));
                if (equipindex21 != -1)
                    if (equipindex21 != -1)
                        if (comboindex == 51 || comboindex == 52)
                        {
                            if (equipcb22.SelectedItem != null && equipcb22.SelectedItem.ToString().Substring(31) != " ")
                                if (equip[getequipindex(equipcb22.SelectedItem.ToString().Substring(31))].type == equip[equipindex21].type)
                                {
                                    equipcb22.SelectedIndex = 0; return;
                                }
                        }
                //  if (equipcb22.SelectedIndex > -1)
                //      calcequip(2, equipindex21,21);
            }
            if (equipcb22.SelectedItem != null)
            {
                string equipselect22 = equipcb22.SelectedItem.ToString();
                int equipindex22 = getequipindex(equipselect22.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex22].property1))
                {
                    equiptb221.IsEnabled = true;
                    equiptb221.Items.Clear();
                    for (int i = (int)equip[equipindex22].down1; i <= equip[equipindex22].up1; i++)
                    {
                        equiptb221.Items.Add(i);
                    }
                    equiptb221.SelectedIndex = equiptb221.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex22].property2))
                {
                    equiptb222.IsEnabled = true;
                    equiptb222.Items.Clear();
                    for (int i = (int)equip[equipindex22].down2; i <= equip[equipindex22].up2; i++)
                    {
                        equiptb222.Items.Add(i);
                    }
                    equiptb222.SelectedIndex = equiptb222.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex22].property3))
                {
                    equiptb223.IsEnabled = true;
                    equiptb223.Items.Clear();
                    for (int i = (int)equip[equipindex22].down3; i <= equip[equipindex22].up3; i++)
                    {
                        equiptb223.Items.Add(i);
                    }
                    equiptb223.SelectedIndex = equiptb223.Items.Count - 1;
                }
                if (equipindex22 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb23.SelectedItem != null && equipcb23.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb23.SelectedItem.ToString().Substring(31))].type == equip[equipindex22].type)
                            {
                                equipcb22.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb21.SelectedItem != null && equipcb21.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb21.SelectedItem.ToString().Substring(31))].type == equip[equipindex22].type)
                            {
                                equipcb22.SelectedIndex = 0; return;
                            }
                    }
                //   if (equipcb22.SelectedIndex > -1)
                //       calcequip(2, equipindex22,22);
                if (equip[equipindex22].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb22.Foreground = br;
                }
                else if (equip[equipindex22].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb22.Foreground = br;
                }
                else if (equip[equipindex22].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb22.Foreground = br;
                }
                else if (equip[equipindex22].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb22.Foreground = br;
                }
                setequiptooltips(22, equipindex22);
            }
            if (equipcb23.SelectedItem != null)
            {
                string equipselect23 = equipcb23.SelectedItem.ToString();
                int equipindex23 = getequipindex(equipselect23.Substring(31));
                if (equipindex23 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb22.SelectedItem != null && equipcb22.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb22.SelectedItem.ToString().Substring(31))].type == equip[equipindex23].type)
                            {
                                equipcb22.SelectedIndex = 0; return;
                            }
                    }

                //   if (equipcb22.SelectedIndex > -1)
                //       calcequip(2, equipindex23,23);
            }
            renewskill();
        }
        /// <summary>
        /// 23装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb23_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb231.IsEnabled = false;
            equiptb232.IsEnabled = false;
            equiptb233.IsEnabled = false;
            equiptb231.SelectedIndex = -1;
            equiptb232.SelectedIndex = -1;
            equiptb233.SelectedIndex = -1;
            //clearequip(2);
            int comboindex = Combo2.SelectedIndex;

            if (equipcb21.SelectedItem != null)
            {
                string equipselect21 = equipcb21.SelectedItem.ToString();
                int equipindex21 = getequipindex(equipselect21.Substring(31));
                if (equipindex21 != -1)
                    if (equipindex21 != -1)
                        if (comboindex == 51 || comboindex == 52)
                        {
                            if (equipcb22.SelectedItem != null && equipcb22.SelectedItem.ToString().Substring(31) != " ")
                                if (equip[getequipindex(equipcb22.SelectedItem.ToString().Substring(31))].type == equip[equipindex21].type)
                                {
                                    equipcb23.SelectedIndex = 0; return;
                                }
                        }
                //    if (equipcb23.SelectedIndex > -1)
                //        calcequip(2, equipindex21,21);
            }
            if (equipcb22.SelectedItem != null)
            {
                string equipselect22 = equipcb22.SelectedItem.ToString();
                int equipindex22 = getequipindex(equipselect22.Substring(31));
                if (equipindex22 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb23.SelectedItem != null && equipcb23.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb23.SelectedItem.ToString().Substring(31))].type == equip[equipindex22].type)
                            {
                                equipcb23.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb21.SelectedItem != null && equipcb21.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb21.SelectedItem.ToString().Substring(31))].type == equip[equipindex22].type)
                            {
                                equipcb23.SelectedIndex = 0; return;
                            }
                    }
                //    if (equipcb23.SelectedIndex > -1)
                //        calcequip(2, equipindex22,22);
            }
            if (equipcb23.SelectedItem != null)
            {
                string equipselect23 = equipcb23.SelectedItem.ToString();
                int equipindex23 = getequipindex(equipselect23.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex23].property1))
                {
                    equiptb231.IsEnabled = true;
                    equiptb231.Items.Clear();
                    for (int i = (int)equip[equipindex23].down1; i <= equip[equipindex23].up1; i++)
                    {
                        equiptb231.Items.Add(i);
                    }
                    equiptb231.SelectedIndex = equiptb231.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex23].property2))
                {
                    equiptb232.IsEnabled = true;
                    equiptb232.Items.Clear();
                    for (int i = (int)equip[equipindex23].down2; i <= equip[equipindex23].up2; i++)
                    {
                        equiptb232.Items.Add(i);
                    }
                    equiptb232.SelectedIndex = equiptb232.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex23].property3))
                {
                    equiptb233.IsEnabled = true;
                    equiptb233.Items.Clear();
                    for (int i = (int)equip[equipindex23].down3; i <= equip[equipindex23].up3; i++)
                    {
                        equiptb233.Items.Add(i);
                    }
                    equiptb233.SelectedIndex = equiptb233.Items.Count - 1;
                }
                if (equipindex23 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb22.SelectedItem != null && equipcb22.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb22.SelectedItem.ToString().Substring(31))].type == equip[equipindex23].type)
                            {
                                equipcb23.SelectedIndex = 0; return;
                            }
                    }

                //   if (equipcb23.SelectedIndex > -1)
                //      calcequip(2, equipindex23,23);
                if (equip[equipindex23].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb23.Foreground = br;
                }
                else if (equip[equipindex23].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb23.Foreground = br;
                }
                else if (equip[equipindex23].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb23.Foreground = br;
                }
                else if (equip[equipindex23].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb23.Foreground = br;
                }
                setequiptooltips(23, equipindex23);
            }
            renewskill();
        }
        /// <summary>
        ///31装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb31_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb311.IsEnabled = false;
            equiptb312.IsEnabled = false;
            equiptb313.IsEnabled = false;
            equiptb311.SelectedIndex = -1;
            equiptb312.SelectedIndex = -1;
            equiptb313.SelectedIndex = -1;
            //clearequip(3);
            int comboindex = Combo3.SelectedIndex;

            if (equipcb31.SelectedItem != null)
            {
                string equipselect31 = equipcb31.SelectedItem.ToString();
                int equipindex31 = getequipindex(equipselect31.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex31].property1))
                {
                    equiptb311.IsEnabled = true;
                    equiptb311.Items.Clear();
                    for (int i = (int)equip[equipindex31].down1; i <= equip[equipindex31].up1; i++)
                    {
                        equiptb311.Items.Add(i);
                    }
                    equiptb311.SelectedIndex = equiptb311.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex31].property2))
                {
                    equiptb312.IsEnabled = true;
                    equiptb312.Items.Clear();
                    for (int i = (int)equip[equipindex31].down2; i <= equip[equipindex31].up2; i++)
                    {
                        equiptb312.Items.Add(i);
                    }
                    equiptb312.SelectedIndex = equiptb312.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex31].property3))
                {
                    equiptb313.IsEnabled = true;
                    equiptb313.Items.Clear();
                    for (int i = (int)equip[equipindex31].down3; i <= equip[equipindex31].up3; i++)
                    {
                        equiptb313.Items.Add(i);
                    }
                    equiptb313.SelectedIndex = equiptb313.Items.Count - 1;
                }
                if (equipindex31 != -1)
                    if (equipindex31 != -1)
                        if (comboindex == 51 || comboindex == 52)
                        {
                            if (equipcb32.SelectedItem != null && equipcb32.SelectedItem.ToString().Substring(31) != " ")
                                if (equip[getequipindex(equipcb32.SelectedItem.ToString().Substring(31))].type == equip[equipindex31].type)
                                {
                                    equipcb31.SelectedIndex = 0; return;
                                }
                        }
                //  if (equipcb31.SelectedIndex > -1)
                //      calcequip(3, equipindex31,31);
                if (equip[equipindex31].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb31.Foreground = br;
                }
                else if (equip[equipindex31].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb31.Foreground = br;
                }
                else if (equip[equipindex31].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb31.Foreground = br;
                }
                else if (equip[equipindex31].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb31.Foreground = br;
                }
                setequiptooltips(31, equipindex31);
            }
            if (equipcb32.SelectedItem != null)
            {
                string equipselect32 = equipcb32.SelectedItem.ToString();
                int equipindex32 = getequipindex(equipselect32.Substring(31));
                if (equipindex32 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb33.SelectedItem != null && equipcb33.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb33.SelectedItem.ToString().Substring(31))].type == equip[equipindex32].type)
                            {
                                equipcb31.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb31.SelectedItem != null && equipcb31.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb31.SelectedItem.ToString().Substring(31))].type == equip[equipindex32].type)
                            {
                                equipcb31.SelectedIndex = 0; return;
                            }
                    }
                //   if (equipcb31.SelectedIndex > -1)
                //       calcequip(3, equipindex32,32);
            }
            if (equipcb33.SelectedItem != null)
            {
                string equipselect33 = equipcb33.SelectedItem.ToString();
                int equipindex33 = getequipindex(equipselect33.Substring(31));
                if (equipindex33 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb32.SelectedItem != null && equipcb32.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb32.SelectedItem.ToString().Substring(31))].type == equip[equipindex33].type)
                            {
                                equipcb31.SelectedIndex = 0; return;
                            }
                    }

                //   if (equipcb31.SelectedIndex > -1)
                //      calcequip(3, equipindex33,33);
            }
            renewskill();
        }
        /// <summary>
        ///32装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb32_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb321.IsEnabled = false;
            equiptb322.IsEnabled = false;
            equiptb323.IsEnabled = false;
            equiptb321.SelectedIndex = -1;
            equiptb322.SelectedIndex = -1;
            equiptb323.SelectedIndex = -1;
            //clearequip(3);
            int comboindex = Combo3.SelectedIndex;

            if (equipcb31.SelectedItem != null)
            {
                string equipselect31 = equipcb31.SelectedItem.ToString();
                int equipindex31 = getequipindex(equipselect31.Substring(31));
                if (equipindex31 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb32.SelectedItem != null && equipcb32.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb32.SelectedItem.ToString().Substring(31))].type == equip[equipindex31].type)
                            {
                                equipcb32.SelectedIndex = 0; return;
                            }
                    }
                //    if (equipcb32.SelectedIndex > -1)
                //        calcequip(3, equipindex31,31);
            }
            if (equipcb32.SelectedItem != null)
            {
                string equipselect32 = equipcb32.SelectedItem.ToString();
                int equipindex32 = getequipindex(equipselect32.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex32].property1))
                {
                    equiptb321.IsEnabled = true;
                    equiptb321.Items.Clear();
                    for (int i = (int)equip[equipindex32].down1; i <= equip[equipindex32].up1; i++)
                    {
                        equiptb321.Items.Add(i);
                    }
                    equiptb321.SelectedIndex = equiptb321.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex32].property2))
                {
                    equiptb322.IsEnabled = true;
                    equiptb322.Items.Clear();
                    for (int i = (int)equip[equipindex32].down2; i <= equip[equipindex32].up2; i++)
                    {
                        equiptb322.Items.Add(i);
                    }
                    equiptb322.SelectedIndex = equiptb322.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex32].property3))
                {
                    equiptb323.IsEnabled = true;
                    equiptb323.Items.Clear();
                    for (int i = (int)equip[equipindex32].down3; i <= equip[equipindex32].up3; i++)
                    {
                        equiptb323.Items.Add(i);
                    }
                    equiptb323.SelectedIndex = equiptb323.Items.Count - 1;
                }
                if (equipindex32 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb33.SelectedItem != null && equipcb33.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb33.SelectedItem.ToString().Substring(31))].type == equip[equipindex32].type)
                            {
                                equipcb32.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb31.SelectedItem != null && equipcb31.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb31.SelectedItem.ToString().Substring(31))].type == equip[equipindex32].type)
                            {
                                equipcb32.SelectedIndex = 0; return;
                            }
                    }
                //  if (equipcb32.SelectedIndex > -1)
                //      calcequip(3, equipindex32,32);
                if (equip[equipindex32].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb32.Foreground = br;
                }
                else if (equip[equipindex32].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb32.Foreground = br;
                }
                else if (equip[equipindex32].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb32.Foreground = br;
                }
                else if (equip[equipindex32].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb32.Foreground = br;
                }
                setequiptooltips(32, equipindex32);
            }
            if (equipcb33.SelectedItem != null)
            {
                string equipselect33 = equipcb33.SelectedItem.ToString();
                int equipindex33 = getequipindex(equipselect33.Substring(31));
                if (equipindex33 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb32.SelectedItem != null && equipcb32.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb32.SelectedItem.ToString().Substring(31))].type == equip[equipindex33].type)
                            {
                                equipcb32.SelectedIndex = 0; return;
                            }
                    }

                //   if (equipcb32.SelectedIndex > -1)
                //        calcequip(3, equipindex33,33);
            }
            renewskill();
        }
        /// <summary>
        ///33装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb33_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb331.IsEnabled = false;
            equiptb332.IsEnabled = false;
            equiptb333.IsEnabled = false;
            equiptb331.SelectedIndex = -1;
            equiptb332.SelectedIndex = -1;
            equiptb333.SelectedIndex = -1;
            //clearequip(3);
            int comboindex = Combo3.SelectedIndex;

            if (equipcb31.SelectedItem != null)
            {
                string equipselect31 = equipcb31.SelectedItem.ToString();
                int equipindex31 = getequipindex(equipselect31.Substring(31));
                if (equipindex31 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb32.SelectedItem != null && equipcb32.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb32.SelectedItem.ToString().Substring(31))].type == equip[equipindex31].type)
                            {
                                equipcb33.SelectedIndex = 0; return;
                            }
                    }
                //    if (equipcb33.SelectedIndex > -1)
                //        calcequip(3, equipindex31,31);
            }
            if (equipcb32.SelectedItem != null)
            {
                string equipselect32 = equipcb32.SelectedItem.ToString();
                int equipindex32 = getequipindex(equipselect32.Substring(31));
                if (equipindex32 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb33.SelectedItem != null && equipcb33.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb33.SelectedItem.ToString().Substring(31))].type == equip[equipindex32].type)
                            {
                                equipcb33.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb31.SelectedItem != null && equipcb31.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb31.SelectedItem.ToString().Substring(31))].type == equip[equipindex32].type)
                            {
                                equipcb33.SelectedIndex = 0; return;
                            }
                    }
                //   if (equipcb33.SelectedIndex > -1)
                //       calcequip(3, equipindex32,32);
            }
            if (equipcb33.SelectedItem != null)
            {
                string equipselect33 = equipcb33.SelectedItem.ToString();
                int equipindex33 = getequipindex(equipselect33.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex33].property1))
                {
                    equiptb331.IsEnabled = true;
                    equiptb331.Items.Clear();
                    for (int i = (int)equip[equipindex33].down1; i <= equip[equipindex33].up1; i++)
                    {
                        equiptb331.Items.Add(i);
                    }
                    equiptb331.SelectedIndex = equiptb331.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex33].property2))
                {
                    equiptb332.IsEnabled = true;
                    equiptb332.Items.Clear();
                    for (int i = (int)equip[equipindex33].down2; i <= equip[equipindex33].up2; i++)
                    {
                        equiptb332.Items.Add(i);
                    }
                    equiptb332.SelectedIndex = equiptb332.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex33].property3))
                {
                    equiptb333.IsEnabled = true;
                    equiptb333.Items.Clear();
                    for (int i = (int)equip[equipindex33].down3; i <= equip[equipindex33].up3; i++)
                    {
                        equiptb333.Items.Add(i);
                    }
                    equiptb333.SelectedIndex = equiptb333.Items.Count - 1;
                }
                if (equipindex33 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb32.SelectedItem != null && equipcb32.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb32.SelectedItem.ToString().Substring(31))].type == equip[equipindex33].type)
                            {
                                equipcb33.SelectedIndex = 0; return;
                            }
                    }

                //    if (equipcb33.SelectedIndex > -1)
                //       calcequip(3, equipindex33,33);
                if (equip[equipindex33].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb33.Foreground = br;
                }
                else if (equip[equipindex33].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb33.Foreground = br;
                }
                else if (equip[equipindex33].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb33.Foreground = br;
                }
                else if (equip[equipindex33].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb33.Foreground = br;
                }
                setequiptooltips(33, equipindex33);
            }
            renewskill();
        }
        /// <summary>
        ///41装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb41_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb411.IsEnabled = false;
            equiptb412.IsEnabled = false;
            equiptb413.IsEnabled = false;
            equiptb411.SelectedIndex = -1;
            equiptb412.SelectedIndex = -1;
            equiptb413.SelectedIndex = -1;
            //clearequip(4);
            int comboindex = Combo4.SelectedIndex;

            if (equipcb41.SelectedItem != null)
            {
                string equipselect41 = equipcb41.SelectedItem.ToString();
                int equipindex41 = getequipindex(equipselect41.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex41].property1))
                {
                    equiptb411.IsEnabled = true;
                    equiptb411.Items.Clear();
                    for (int i = (int)equip[equipindex41].down1; i <= equip[equipindex41].up1; i++)
                    {
                        equiptb411.Items.Add(i);
                    }
                    equiptb411.SelectedIndex = equiptb411.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex41].property2))
                {
                    equiptb412.IsEnabled = true;
                    equiptb412.Items.Clear();
                    for (int i = (int)equip[equipindex41].down2; i <= equip[equipindex41].up2; i++)
                    {
                        equiptb412.Items.Add(i);
                    }
                    equiptb412.SelectedIndex = equiptb412.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex41].property3))
                {
                    equiptb413.IsEnabled = true;
                    equiptb413.Items.Clear();
                    for (int i = (int)equip[equipindex41].down3; i <= equip[equipindex41].up3; i++)
                    {
                        equiptb413.Items.Add(i);
                    }
                    equiptb413.SelectedIndex = equiptb413.Items.Count - 1;
                }
                if (equipindex41 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb42.SelectedItem != null && equipcb42.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb42.SelectedItem.ToString().Substring(31))].type == equip[equipindex41].type)
                            {
                                equipcb41.SelectedIndex = 0; return;
                            }
                    }
                //    if (equipcb41.SelectedIndex > -1)
                //        calcequip(4, equipindex41,41);
                if (equip[equipindex41].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb41.Foreground = br;
                }
                else if (equip[equipindex41].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb41.Foreground = br;
                }
                else if (equip[equipindex41].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb41.Foreground = br;
                }
                else if (equip[equipindex41].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb41.Foreground = br;
                }
                setequiptooltips(41, equipindex41);
            }
            if (equipcb42.SelectedItem != null)
            {
                string equipselect42 = equipcb42.SelectedItem.ToString();
                int equipindex42 = getequipindex(equipselect42.Substring(31));
                if (equipindex42 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb43.SelectedItem != null && equipcb43.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb43.SelectedItem.ToString().Substring(31))].type == equip[equipindex42].type)
                            {
                                equipcb41.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb41.SelectedItem != null && equipcb41.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb41.SelectedItem.ToString().Substring(31))].type == equip[equipindex42].type)
                            {
                                equipcb41.SelectedIndex = 0; return;
                            }
                    }
                //   if (equipcb41.SelectedIndex > -1)
                //       calcequip(4, equipindex42,42);
            }
            if (equipcb43.SelectedItem != null)
            {
                string equipselect43 = equipcb43.SelectedItem.ToString();
                int equipindex43 = getequipindex(equipselect43.Substring(31));
                if (equipindex43 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb42.SelectedItem != null && equipcb42.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb42.SelectedItem.ToString().Substring(31))].type == equip[equipindex43].type)
                            {
                                equipcb41.SelectedIndex = 0; return;
                            }
                    }

                //    if (equipcb41.SelectedIndex > -1)
                //       calcequip(4, equipindex43,43);
            }
            renewskill();
        }
        /// <summary>
        ///42装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb42_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb421.IsEnabled = false;
            equiptb422.IsEnabled = false;
            equiptb423.IsEnabled = false;
            equiptb421.SelectedIndex = -1;
            equiptb422.SelectedIndex = -1;
            equiptb423.SelectedIndex = -1;
            //clearequip(4);
            int comboindex = Combo4.SelectedIndex;

            if (equipcb41.SelectedItem != null)
            {
                string equipselect41 = equipcb41.SelectedItem.ToString();
                int equipindex41 = getequipindex(equipselect41.Substring(31));
                if (equipindex41 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb42.SelectedItem != null && equipcb42.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb42.SelectedItem.ToString().Substring(31))].type == equip[equipindex41].type)
                            {
                                equipcb42.SelectedIndex = 0; return;
                            }
                    }
                //    if (equipcb42.SelectedIndex > -1 )
                //        calcequip(4, equipindex41,41);
            }
            if (equipcb42.SelectedItem != null)
            {
                string equipselect42 = equipcb42.SelectedItem.ToString();
                int equipindex42 = getequipindex(equipselect42.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex42].property1))
                {
                    equiptb421.IsEnabled = true;
                    equiptb421.Items.Clear();
                    for (int i = (int)equip[equipindex42].down1; i <= equip[equipindex42].up1; i++)
                    {
                        equiptb421.Items.Add(i);
                    }
                    equiptb421.SelectedIndex = equiptb421.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex42].property2))
                {
                    equiptb422.IsEnabled = true;
                    equiptb422.Items.Clear();
                    for (int i = (int)equip[equipindex42].down2; i <= equip[equipindex42].up2; i++)
                    {
                        equiptb422.Items.Add(i);
                    }
                    equiptb422.SelectedIndex = equiptb422.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex42].property3))
                {
                    equiptb423.IsEnabled = true;
                    equiptb423.Items.Clear();
                    for (int i = (int)equip[equipindex42].down3; i <= equip[equipindex42].up3; i++)
                    {
                        equiptb423.Items.Add(i);
                    }
                    equiptb423.SelectedIndex = equiptb423.Items.Count - 1;
                }
                if (equipindex42 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb43.SelectedItem != null && equipcb43.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb43.SelectedItem.ToString().Substring(31))].type == equip[equipindex42].type)
                            {
                                equipcb42.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb41.SelectedItem != null && equipcb41.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb41.SelectedItem.ToString().Substring(31))].type == equip[equipindex42].type)
                            {
                                equipcb42.SelectedIndex = 0; return;
                            }
                    }

                //   if (equipcb42.SelectedIndex > -1)
                //        calcequip(4, equipindex42,42);
                if (equip[equipindex42].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb42.Foreground = br;
                }
                else if (equip[equipindex42].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb42.Foreground = br;
                }
                else if (equip[equipindex42].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb42.Foreground = br;
                }
                else if (equip[equipindex42].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb42.Foreground = br;
                }
                setequiptooltips(42, equipindex42);
            }
            if (equipcb43.SelectedItem != null)
            {
                string equipselect43 = equipcb43.SelectedItem.ToString();
                int equipindex43 = getequipindex(equipselect43.Substring(31));
                if (equipindex43 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb42.SelectedItem != null && equipcb42.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb42.SelectedItem.ToString().Substring(31))].type == equip[equipindex43].type)
                            {
                                equipcb42.SelectedIndex = 0; return;
                            }
                    }

                //   if (equipcb42.SelectedIndex > -1)
                //       calcequip(4, equipindex43,43);
            }
            renewskill();
        }
        /// <summary>
        ///43装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb43_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb431.IsEnabled = false;
            equiptb432.IsEnabled = false;
            equiptb433.IsEnabled = false;
            equiptb431.SelectedIndex = -1;
            equiptb432.SelectedIndex = -1;
            equiptb433.SelectedIndex = -1;
            //clearequip(4);
            int comboindex = Combo4.SelectedIndex;

            if (equipcb41.SelectedItem != null)
            {
                string equipselect41 = equipcb41.SelectedItem.ToString();
                int equipindex41 = getequipindex(equipselect41.Substring(31));
                if (equipindex41 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb42.SelectedItem != null && equipcb42.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb42.SelectedItem.ToString().Substring(31))].type == equip[equipindex41].type)
                            {
                                equipcb43.SelectedIndex = 0; return;
                            }
                    }
                //   if (equipcb43.SelectedIndex > -1)
                //       calcequip(4, equipindex41,41);
            }
            if (equipcb42.SelectedItem != null)
            {
                string equipselect42 = equipcb42.SelectedItem.ToString();
                int equipindex42 = getequipindex(equipselect42.Substring(31));
                if (equipindex42 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb43.SelectedItem != null && equipcb43.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb43.SelectedItem.ToString().Substring(31))].type == equip[equipindex42].type)
                            {
                                equipcb43.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb41.SelectedItem != null && equipcb41.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb41.SelectedItem.ToString().Substring(31))].type == equip[equipindex42].type)
                            {
                                equipcb43.SelectedIndex = 0; return;
                            }
                    }
                //   if (equipcb43.SelectedIndex > -1)
                //      calcequip(4, equipindex42,42);
            }
            if (equipcb43.SelectedItem != null)
            {
                string equipselect43 = equipcb43.SelectedItem.ToString();
                int equipindex43 = getequipindex(equipselect43.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex43].property1))
                {
                    equiptb431.IsEnabled = true;
                    equiptb431.Items.Clear();
                    for (int i = (int)equip[equipindex43].down1; i <= equip[equipindex43].up1; i++)
                    {
                        equiptb431.Items.Add(i);
                    }
                    equiptb431.SelectedIndex = equiptb431.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex43].property2))
                {
                    equiptb432.IsEnabled = true;
                    equiptb432.Items.Clear();
                    for (int i = (int)equip[equipindex43].down2; i <= equip[equipindex43].up2; i++)
                    {
                        equiptb432.Items.Add(i);
                    }
                    equiptb432.SelectedIndex = equiptb432.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex43].property3))
                {
                    equiptb433.IsEnabled = true;
                    equiptb433.Items.Clear();
                    for (int i = (int)equip[equipindex43].down3; i <= equip[equipindex43].up3; i++)
                    {
                        equiptb433.Items.Add(i);
                    }
                    equiptb433.SelectedIndex = equiptb433.Items.Count - 1;
                }
                if (equipindex43 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb42.SelectedItem != null && equipcb42.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb42.SelectedItem.ToString().Substring(31))].type == equip[equipindex43].type)
                            {
                                equipcb43.SelectedIndex = 0; return;
                            }
                    }

                //   if (equipcb43.SelectedIndex > -1)
                //       calcequip(4, equipindex43,43);
                if (equip[equipindex43].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb43.Foreground = br;
                }
                else if (equip[equipindex43].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb43.Foreground = br;
                }
                else if (equip[equipindex43].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb43.Foreground = br;
                }
                else if (equip[equipindex43].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb43.Foreground = br;
                }
                setequiptooltips(43, equipindex43);
            }
            renewskill();
        }
        /// <summary>
        ///51装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb51_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb511.IsEnabled = false;
            equiptb512.IsEnabled = false;
            equiptb513.IsEnabled = false;
            equiptb511.SelectedIndex = -1;
            equiptb512.SelectedIndex = -1;
            equiptb513.SelectedIndex = -1;
            //clearequip(5);
            int comboindex = Combo5.SelectedIndex;

            if (equipcb51.SelectedItem != null)
            {
                string equipselect51 = equipcb51.SelectedItem.ToString();
                int equipindex51 = getequipindex(equipselect51.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex51].property1))
                {
                    equiptb511.IsEnabled = true;
                    equiptb511.Items.Clear();
                    for (int i = (int)equip[equipindex51].down1; i <= equip[equipindex51].up1; i++)
                    {
                        equiptb511.Items.Add(i);
                    }
                    equiptb511.SelectedIndex = equiptb511.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex51].property2))
                {
                    equiptb512.IsEnabled = true;
                    equiptb512.Items.Clear();
                    for (int i = (int)equip[equipindex51].down2; i <= equip[equipindex51].up2; i++)
                    {
                        equiptb512.Items.Add(i);
                    }
                    equiptb512.SelectedIndex = equiptb512.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex51].property3))
                {
                    equiptb513.IsEnabled = true;
                    equiptb513.Items.Clear();
                    for (int i = (int)equip[equipindex51].down3; i <= equip[equipindex51].up3; i++)
                    {
                        equiptb513.Items.Add(i);
                    }
                    equiptb513.SelectedIndex = equiptb513.Items.Count - 1;
                }
                if (equipindex51 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb52.SelectedItem != null && equipcb52.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb52.SelectedItem.ToString().Substring(31))].type == equip[equipindex51].type)
                            {
                                equipcb51.SelectedIndex = 0; return;
                            }
                    }
                //  if (equipcb51.SelectedIndex > -1)
                //      calcequip(5, equipindex51,51);
                if (equip[equipindex51].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb51.Foreground = br;
                }
                else if (equip[equipindex51].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb51.Foreground = br;
                }
                else if (equip[equipindex51].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb51.Foreground = br;
                }
                else if (equip[equipindex51].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb51.Foreground = br;
                }
                setequiptooltips(51, equipindex51);
            }
            if (equipcb52.SelectedItem != null)
            {
                string equipselect52 = equipcb52.SelectedItem.ToString();
                int equipindex52 = getequipindex(equipselect52.Substring(31));
                if (equipindex52 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb53.SelectedItem != null && equipcb53.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb53.SelectedItem.ToString().Substring(31))].type == equip[equipindex52].type)
                            {
                                equipcb51.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb51.SelectedItem != null && equipcb51.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb51.SelectedItem.ToString().Substring(31))].type == equip[equipindex52].type)
                            {
                                equipcb51.SelectedIndex = 0; return;
                            }
                    }
                //    if (equipcb51.SelectedIndex > -1)
                //       calcequip(5, equipindex52,52);
            }
            if (equipcb53.SelectedItem != null)
            {
                string equipselect53 = equipcb53.SelectedItem.ToString();
                int equipindex53 = getequipindex(equipselect53.Substring(31));
                if (equipindex53 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb52.SelectedItem != null && equipcb52.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb52.SelectedItem.ToString().Substring(31))].type == equip[equipindex53].type)
                            {
                                equipcb51.SelectedIndex = 0; return;
                            }
                    }

                //   if (equipcb51.SelectedIndex > -1)
                //       calcequip(5, equipindex53,53);
            }
            renewskill();
        }
        /// <summary>
        ///52装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb52_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb521.IsEnabled = false;
            equiptb522.IsEnabled = false;
            equiptb523.IsEnabled = false;
            equiptb521.SelectedIndex = -1;
            equiptb522.SelectedIndex = -1;
            equiptb523.SelectedIndex = -1;
            //clearequip(5);
            int comboindex = Combo5.SelectedIndex;

            if (equipcb51.SelectedItem != null)
            {
                string equipselect51 = equipcb51.SelectedItem.ToString();
                int equipindex51 = getequipindex(equipselect51.Substring(31));
                if (equipindex51 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb52.SelectedItem != null && equipcb52.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb52.SelectedItem.ToString().Substring(31))].type == equip[equipindex51].type)
                            {
                                equipcb52.SelectedIndex = 0; return;
                            }
                    }
                //  if (equipcb52.SelectedIndex > -1)
                //       calcequip(5, equipindex51,51);
            }
            if (equipcb52.SelectedItem != null)
            {
                string equipselect52 = equipcb52.SelectedItem.ToString();
                int equipindex52 = getequipindex(equipselect52.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex52].property1))
                {
                    equiptb521.IsEnabled = true;
                    equiptb521.Items.Clear();
                    for (int i = (int)equip[equipindex52].down1; i <= equip[equipindex52].up1; i++)
                    {
                        equiptb521.Items.Add(i);
                    }
                    equiptb521.SelectedIndex = equiptb521.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex52].property2))
                {
                    equiptb522.IsEnabled = true;
                    equiptb522.Items.Clear();
                    for (int i = (int)equip[equipindex52].down2; i <= equip[equipindex52].up2; i++)
                    {
                        equiptb522.Items.Add(i);
                    }
                    equiptb522.SelectedIndex = equiptb522.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex52].property3))
                {
                    equiptb523.IsEnabled = true;
                    equiptb523.Items.Clear();
                    for (int i = (int)equip[equipindex52].down3; i <= equip[equipindex52].up3; i++)
                    {
                        equiptb523.Items.Add(i);
                    }
                    equiptb523.SelectedIndex = equiptb523.Items.Count - 1;
                }
                if (equipindex52 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb53.SelectedItem != null && equipcb53.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb53.SelectedItem.ToString().Substring(31))].type == equip[equipindex52].type)
                            {
                                equipcb52.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb51.SelectedItem != null && equipcb51.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb51.SelectedItem.ToString().Substring(31))].type == equip[equipindex52].type)
                            {
                                equipcb52.SelectedIndex = 0; return;
                            }
                    }
                //   if (equipcb52.SelectedIndex > -1)
                //       calcequip(5, equipindex52,52);
                if (equip[equipindex52].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb52.Foreground = br;
                }
                else if (equip[equipindex52].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb52.Foreground = br;
                }
                else if (equip[equipindex52].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb52.Foreground = br;
                }
                else if (equip[equipindex52].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb52.Foreground = br;
                }
                setequiptooltips(52, equipindex52);
            }
            if (equipcb53.SelectedItem != null)
            {
                string equipselect53 = equipcb53.SelectedItem.ToString();
                int equipindex53 = getequipindex(equipselect53.Substring(31));
                if (equipindex53 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb52.SelectedItem != null && equipcb52.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb52.SelectedItem.ToString().Substring(31))].type == equip[equipindex53].type)
                            {
                                equipcb52.SelectedIndex = 0; return;
                            }
                    }

                //   if (equipcb52.SelectedIndex > -1)
                //       calcequip(5, equipindex53,53);
            }
            renewskill();
        }
        /// <summary>
        ///53装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb53_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb531.IsEnabled = false;
            equiptb532.IsEnabled = false;
            equiptb533.IsEnabled = false;
            equiptb531.SelectedIndex = -1;
            equiptb532.SelectedIndex = -1;
            equiptb533.SelectedIndex = -1;
            //clearequip(5);
            int comboindex = Combo5.SelectedIndex;

            if (equipcb51.SelectedItem != null)
            {
                string equipselect51 = equipcb51.SelectedItem.ToString();
                int equipindex51 = getequipindex(equipselect51.Substring(31));
                if (equipindex51 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb52.SelectedItem != null && equipcb52.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb52.SelectedItem.ToString().Substring(31))].type == equip[equipindex51].type)
                            {
                                equipcb53.SelectedIndex = 0; return;
                            }
                    }
                //   if (equipcb53.SelectedIndex > -1)
                //      calcequip(5, equipindex51,51);
            }
            if (equipcb52.SelectedItem != null)
            {
                string equipselect52 = equipcb52.SelectedItem.ToString();
                int equipindex52 = getequipindex(equipselect52.Substring(31));
                if (equipindex52 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb53.SelectedItem != null && equipcb53.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb53.SelectedItem.ToString().Substring(31))].type == equip[equipindex52].type)
                            {
                                equipcb53.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb51.SelectedItem != null && equipcb51.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb51.SelectedItem.ToString().Substring(31))].type == equip[equipindex52].type)
                            {
                                equipcb53.SelectedIndex = 0; return;
                            }
                    }
                //  if (equipcb53.SelectedIndex > -1)
                //     calcequip(5, equipindex52,52);
            }
            if (equipcb53.SelectedItem != null)
            {
                string equipselect53 = equipcb53.SelectedItem.ToString();
                int equipindex53 = getequipindex(equipselect53.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex53].property1))
                {
                    equiptb531.IsEnabled = true;
                    equiptb531.Items.Clear();
                    for (int i = (int)equip[equipindex53].down1; i <= equip[equipindex53].up1; i++)
                    {
                        equiptb531.Items.Add(i);
                    }
                    equiptb531.SelectedIndex = equiptb531.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex53].property2))
                {
                    equiptb532.IsEnabled = true;
                    equiptb532.Items.Clear();
                    for (int i = (int)equip[equipindex53].down2; i <= equip[equipindex53].up2; i++)
                    {
                        equiptb532.Items.Add(i);
                    }
                    equiptb532.SelectedIndex = equiptb532.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex53].property3))
                {
                    equiptb533.IsEnabled = true;
                    equiptb533.Items.Clear();
                    for (int i = (int)equip[equipindex53].down3; i <= equip[equipindex53].up3; i++)
                    {
                        equiptb533.Items.Add(i);
                    }
                    equiptb533.SelectedIndex = equiptb533.Items.Count - 1;
                }
                if (equipindex53 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb52.SelectedItem != null && equipcb52.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb52.SelectedItem.ToString().Substring(31))].type == equip[equipindex53].type)
                            {
                                equipcb53.SelectedIndex = 0; return;
                            }
                    }

                //  if (equipcb53.SelectedIndex > -1)
                //      calcequip(5, equipindex53,53);
                if (equip[equipindex53].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb53.Foreground = br;
                }
                else if (equip[equipindex53].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb53.Foreground = br;
                }
                else if (equip[equipindex53].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb53.Foreground = br;
                }
                else if (equip[equipindex53].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb53.Foreground = br;
                }
                setequiptooltips(53, equipindex53);
            }
            renewskill();
        }
        /// <summary>
        ///61装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb61_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb611.IsEnabled = false;
            equiptb612.IsEnabled = false;
            equiptb613.IsEnabled = false;
            equiptb611.SelectedIndex = -1;
            equiptb612.SelectedIndex = -1;
            equiptb613.SelectedIndex = -1;
            //clearequip(6);
            int comboindex = Combo6.SelectedIndex;

            if (equipcb61.SelectedItem != null)
            {
                string equipselect61 = equipcb61.SelectedItem.ToString();
                int equipindex61 = getequipindex(equipselect61.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex61].property1))
                {
                    equiptb611.IsEnabled = true;
                    equiptb611.Items.Clear();
                    for (int i = (int)equip[equipindex61].down1; i <= equip[equipindex61].up1; i++)
                    {
                        equiptb611.Items.Add(i);
                    }
                    equiptb611.SelectedIndex = equiptb611.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex61].property2))
                {
                    equiptb612.IsEnabled = true;
                    equiptb612.Items.Clear();
                    for (int i = (int)equip[equipindex61].down2; i <= equip[equipindex61].up2; i++)
                    {
                        equiptb612.Items.Add(i);
                    }
                    equiptb612.SelectedIndex = equiptb612.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex61].property3))
                {
                    equiptb613.IsEnabled = true;
                    equiptb613.Items.Clear();
                    for (int i = (int)equip[equipindex61].down3; i <= equip[equipindex61].up3; i++)
                    {
                        equiptb613.Items.Add(i);
                    }
                    equiptb613.SelectedIndex = equiptb613.Items.Count - 1;
                }
                if (equipindex61 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb62.SelectedItem != null && equipcb62.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb62.SelectedItem.ToString().Substring(31))].type == equip[equipindex61].type)
                            {
                                equipcb61.SelectedIndex = 0; return;
                            }
                    }
                //   if (equipcb61.SelectedIndex > -1)
                //      calcequip(6, equipindex61,61);
                if (equip[equipindex61].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb61.Foreground = br;
                }
                else if (equip[equipindex61].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb61.Foreground = br;
                }
                else if (equip[equipindex61].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb61.Foreground = br;
                }
                else if (equip[equipindex61].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb61.Foreground = br;
                }
                setequiptooltips(61, equipindex61);
            }
            if (equipcb62.SelectedItem != null)
            {
                string equipselect62 = equipcb62.SelectedItem.ToString();
                int equipindex62 = getequipindex(equipselect62.Substring(31));
                if (equipindex62 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb63.SelectedItem != null && equipcb63.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb63.SelectedItem.ToString().Substring(31))].type == equip[equipindex62].type)
                            {
                                equipcb61.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb61.SelectedItem != null && equipcb61.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb61.SelectedItem.ToString().Substring(31))].type == equip[equipindex62].type)
                            {
                                equipcb61.SelectedIndex = 0; return;
                            }
                    }
                //   if (equipcb61.SelectedIndex > -1)
                //       calcequip(6, equipindex62,62);
            }
            if (equipcb63.SelectedItem != null)
            {
                string equipselect63 = equipcb63.SelectedItem.ToString();
                int equipindex63 = getequipindex(equipselect63.Substring(31));
                if (equipindex63 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb62.SelectedItem != null && equipcb62.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb62.SelectedItem.ToString().Substring(31))].type == equip[equipindex63].type)
                            {
                                equipcb61.SelectedIndex = 0; return;
                            }
                    }

                //  if (equipcb61.SelectedIndex > -1)
                //      calcequip(6, equipindex63,63);
            }
            renewskill();
        }
        /// <summary>
        ///62装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb62_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb621.IsEnabled = false;
            equiptb622.IsEnabled = false;
            equiptb623.IsEnabled = false;
            equiptb621.SelectedIndex = -1;
            equiptb622.SelectedIndex = -1;
            equiptb623.SelectedIndex = -1;
            //clearequip(6);
            int comboindex = Combo6.SelectedIndex;

            if (equipcb61.SelectedItem != null)
            {
                string equipselect61 = equipcb61.SelectedItem.ToString();
                int equipindex61 = getequipindex(equipselect61.Substring(31));
                if (equipindex61 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb62.SelectedItem != null && equipcb62.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb62.SelectedItem.ToString().Substring(31))].type == equip[equipindex61].type)
                            {
                                equipcb62.SelectedIndex = 0; return;
                            }
                    }
                //  if (equipcb62.SelectedIndex > -1)
                //      calcequip(6, equipindex61,61);
            }
            if (equipcb62.SelectedItem != null)
            {
                string equipselect62 = equipcb62.SelectedItem.ToString();
                int equipindex62 = getequipindex(equipselect62.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex62].property1))
                {
                    equiptb621.IsEnabled = true;
                    equiptb621.Items.Clear();
                    for (int i = (int)equip[equipindex62].down1; i <= equip[equipindex62].up1; i++)
                    {
                        equiptb621.Items.Add(i);
                    }
                    equiptb621.SelectedIndex = equiptb621.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex62].property2))
                {
                    equiptb622.IsEnabled = true;
                    equiptb622.Items.Clear();
                    for (int i = (int)equip[equipindex62].down2; i <= equip[equipindex62].up2; i++)
                    {
                        equiptb622.Items.Add(i);
                    }
                    equiptb622.SelectedIndex = equiptb622.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex62].property3))
                {
                    equiptb623.IsEnabled = true;
                    equiptb623.Items.Clear();
                    for (int i = (int)equip[equipindex62].down3; i <= equip[equipindex62].up3; i++)
                    {
                        equiptb623.Items.Add(i);
                    }
                    equiptb623.SelectedIndex = equiptb623.Items.Count - 1;
                }
                if (equipindex62 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb63.SelectedItem != null && equipcb63.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb63.SelectedItem.ToString().Substring(31))].type == equip[equipindex62].type)
                            {
                                equipcb62.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb61.SelectedItem != null && equipcb61.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb61.SelectedItem.ToString().Substring(31))].type == equip[equipindex62].type)
                            {
                                equipcb62.SelectedIndex = 0; return;
                            }
                    }
                //    if (equipcb62.SelectedIndex > -1)
                //        calcequip(6, equipindex62,62);
                if (equip[equipindex62].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb62.Foreground = br;
                }
                else if (equip[equipindex62].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb62.Foreground = br;
                }
                else if (equip[equipindex62].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb62.Foreground = br;
                }
                else if (equip[equipindex62].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb62.Foreground = br;
                }
                setequiptooltips(62, equipindex62);
            }
            if (equipcb63.SelectedItem != null)
            {
                string equipselect63 = equipcb63.SelectedItem.ToString();
                int equipindex63 = getequipindex(equipselect63.Substring(31));
                if (equipindex63 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb62.SelectedItem != null && equipcb62.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb62.SelectedItem.ToString().Substring(31))].type == equip[equipindex63].type)
                            {
                                equipcb62.SelectedIndex = 0; return;
                            }
                    }

                //    if (equipcb62.SelectedIndex > -1)
                //        calcequip(6, equipindex63,63);

            }
            renewskill();
        }
        /// <summary>
        ///63装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb63_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb631.IsEnabled = false;
            equiptb632.IsEnabled = false;
            equiptb633.IsEnabled = false;
            equiptb631.SelectedIndex = -1;
            equiptb632.SelectedIndex = -1;
            equiptb633.SelectedIndex = -1;
            //clearequip(6);
            int comboindex = Combo6.SelectedIndex;

            if (equipcb61.SelectedItem != null)
            {
                string equipselect61 = equipcb61.SelectedItem.ToString();
                int equipindex61 = getequipindex(equipselect61.Substring(31));
                if (equipindex61 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb62.SelectedItem != null && equipcb62.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb62.SelectedItem.ToString().Substring(31))].type == equip[equipindex61].type)
                            {
                                equipcb63.SelectedIndex = 0; return;
                            }
                    }
                //   if (equipcb63.SelectedIndex > -1)
                //      calcequip(6, equipindex61,61);
            }
            if (equipcb62.SelectedItem != null)
            {
                string equipselect62 = equipcb62.SelectedItem.ToString();
                int equipindex62 = getequipindex(equipselect62.Substring(31));
                if (equipindex62 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb63.SelectedItem != null && equipcb63.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb63.SelectedItem.ToString().Substring(31))].type == equip[equipindex62].type)
                            {
                                equipcb63.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb61.SelectedItem != null && equipcb61.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb61.SelectedItem.ToString().Substring(31))].type == equip[equipindex62].type)
                            {
                                equipcb63.SelectedIndex = 0; return;
                            }
                    }
                //  if (equipcb63.SelectedIndex > -1)
                //      calcequip(6, equipindex62,62);
            }
            if (equipcb63.SelectedItem != null)
            {
                string equipselect63 = equipcb63.SelectedItem.ToString();
                int equipindex63 = getequipindex(equipselect63.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex63].property1))
                {
                    equiptb631.IsEnabled = true;
                    equiptb631.Items.Clear();
                    for (int i = (int)equip[equipindex63].down1; i <= equip[equipindex63].up1; i++)
                    {
                        equiptb631.Items.Add(i);
                    }
                    equiptb631.SelectedIndex = equiptb631.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex63].property2))
                {
                    equiptb632.IsEnabled = true;
                    equiptb632.Items.Clear();
                    for (int i = (int)equip[equipindex63].down2; i <= equip[equipindex63].up2; i++)
                    {
                        equiptb632.Items.Add(i);
                    }
                    equiptb632.SelectedIndex = equiptb632.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex63].property3))
                {
                    equiptb633.IsEnabled = true;
                    equiptb633.Items.Clear();
                    for (int i = (int)equip[equipindex63].down3; i <= equip[equipindex63].up3; i++)
                    {
                        equiptb633.Items.Add(i);
                    }
                    equiptb633.SelectedIndex = equiptb633.Items.Count - 1;
                }
                if (equipindex63 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb62.SelectedItem != null && equipcb62.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb62.SelectedItem.ToString().Substring(31))].type == equip[equipindex63].type)
                            {
                                equipcb63.SelectedIndex = 0; return;
                            }
                    }

                //  if (equipcb63.SelectedIndex > -1)
                //      calcequip(6, equipindex63,63);
                if (equip[equipindex63].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb63.Foreground = br;
                }
                else if (equip[equipindex63].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb63.Foreground = br;
                }
                else if (equip[equipindex63].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb63.Foreground = br;
                }
                else if (equip[equipindex63].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb63.Foreground = br;
                }
                setequiptooltips(63, equipindex63);
            }
            renewskill();
        }
        /// <summary>
        ///71装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb71_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb711.IsEnabled = false;
            equiptb712.IsEnabled = false;
            equiptb713.IsEnabled = false;
            equiptb711.SelectedIndex = -1;
            equiptb712.SelectedIndex = -1;
            equiptb713.SelectedIndex = -1;
            //clearequip(7);
            int comboindex = Combo7.SelectedIndex;

            if (equipcb71.SelectedItem != null)
            {
                string equipselect71 = equipcb71.SelectedItem.ToString();
                int equipindex71 = getequipindex(equipselect71.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex71].property1))
                {
                    equiptb711.IsEnabled = true;
                    equiptb711.Items.Clear();
                    for (int i = (int)equip[equipindex71].down1; i <= equip[equipindex71].up1; i++)
                    {
                        equiptb711.Items.Add(i);
                    }
                    equiptb711.SelectedIndex = equiptb711.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex71].property2))
                {
                    equiptb712.IsEnabled = true;
                    equiptb712.Items.Clear();
                    for (int i = (int)equip[equipindex71].down2; i <= equip[equipindex71].up2; i++)
                    {
                        equiptb712.Items.Add(i);
                    }
                    equiptb712.SelectedIndex = equiptb712.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex71].property3))
                {
                    equiptb713.IsEnabled = true;
                    equiptb713.Items.Clear();
                    for (int i = (int)equip[equipindex71].down3; i <= equip[equipindex71].up3; i++)
                    {
                        equiptb713.Items.Add(i);
                    }
                    equiptb713.SelectedIndex = equiptb713.Items.Count - 1;
                }
                if (equipindex71 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb72.SelectedItem != null && equipcb72.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb72.SelectedItem.ToString().Substring(31))].type == equip[equipindex71].type)
                            {
                                equipcb71.SelectedIndex = 0; return;
                            }
                    }
                //  if (equipcb71.SelectedIndex > -1)
                //      calcequip(7, equipindex71,71);
                if (equip[equipindex71].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb71.Foreground = br;
                }
                else if (equip[equipindex71].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb71.Foreground = br;
                }
                else if (equip[equipindex71].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb71.Foreground = br;
                }
                else if (equip[equipindex71].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb71.Foreground = br;
                }
                setequiptooltips(71, equipindex71);
            }
            if (equipcb72.SelectedItem != null)
            {
                string equipselect72 = equipcb72.SelectedItem.ToString();
                int equipindex72 = getequipindex(equipselect72.Substring(31));
                if (equipindex72 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb73.SelectedItem != null && equipcb73.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb73.SelectedItem.ToString().Substring(31))].type == equip[equipindex72].type)
                            {
                                equipcb71.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb71.SelectedItem != null && equipcb71.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb71.SelectedItem.ToString().Substring(31))].type == equip[equipindex72].type)
                            {
                                equipcb71.SelectedIndex = 0; return;
                            }
                    }
                //  if (equipcb71.SelectedIndex > -1)
                //      calcequip(7, equipindex72,72);
            }
            if (equipcb73.SelectedItem != null)
            {
                string equipselect73 = equipcb73.SelectedItem.ToString();
                int equipindex73 = getequipindex(equipselect73.Substring(31));
                if (equipindex73 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb72.SelectedItem != null && equipcb72.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb72.SelectedItem.ToString().Substring(31))].type == equip[equipindex73].type)
                            {
                                equipcb71.SelectedIndex = 0; return;
                            }
                    }

                //  if (equipcb71.SelectedIndex > -1)
                //      calcequip(7, equipindex73,73);
            }
            renewskill();
        }
        /// <summary>
        ///72装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb72_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb721.IsEnabled = false;
            equiptb722.IsEnabled = false;
            equiptb723.IsEnabled = false;
            equiptb721.SelectedIndex = -1;
            equiptb722.SelectedIndex = -1;
            equiptb723.SelectedIndex = -1;
            //clearequip(7);
            int comboindex = Combo7.SelectedIndex;

            if (equipcb71.SelectedItem != null)
            {
                string equipselect71 = equipcb71.SelectedItem.ToString();
                int equipindex71 = getequipindex(equipselect71.Substring(31));
                if (equipindex71 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb72.SelectedItem != null && equipcb72.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb72.SelectedItem.ToString().Substring(31))].type == equip[equipindex71].type)
                            {
                                equipcb72.SelectedIndex = 0; return;
                            }
                    }
                //  if (equipcb72.SelectedIndex > -1)
                //      calcequip(7, equipindex71,71);
            }
            if (equipcb72.SelectedItem != null)
            {
                string equipselect72 = equipcb72.SelectedItem.ToString();
                int equipindex72 = getequipindex(equipselect72.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex72].property1))
                {
                    equiptb721.IsEnabled = true;
                    equiptb721.Items.Clear();
                    for (int i = (int)equip[equipindex72].down1; i <= equip[equipindex72].up1; i++)
                    {
                        equiptb721.Items.Add(i);
                    }
                    equiptb721.SelectedIndex = equiptb721.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex72].property2))
                {
                    equiptb722.IsEnabled = true;
                    equiptb722.Items.Clear();
                    for (int i = (int)equip[equipindex72].down2; i <= equip[equipindex72].up2; i++)
                    {
                        equiptb722.Items.Add(i);
                    }
                    equiptb722.SelectedIndex = equiptb722.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex72].property3))
                {
                    equiptb723.IsEnabled = true;
                    equiptb723.Items.Clear();
                    for (int i = (int)equip[equipindex72].down3; i <= equip[equipindex72].up3; i++)
                    {
                        equiptb723.Items.Add(i);
                    }
                    equiptb723.SelectedIndex = equiptb723.Items.Count - 1;
                }
                if (equipindex72 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb73.SelectedItem != null && equipcb73.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb73.SelectedItem.ToString().Substring(31))].type == equip[equipindex72].type)
                            {
                                equipcb72.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb71.SelectedItem != null && equipcb71.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb71.SelectedItem.ToString().Substring(31))].type == equip[equipindex72].type)
                            {
                                equipcb72.SelectedIndex = 0; return;
                            }
                    }
                //  if (equipcb72.SelectedIndex > -1)
                //      calcequip(7, equipindex72,72);
                if (equip[equipindex72].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb72.Foreground = br;
                }
                else if (equip[equipindex72].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb72.Foreground = br;
                }
                else if (equip[equipindex72].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb72.Foreground = br;
                }
                else if (equip[equipindex72].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb72.Foreground = br;
                }
                setequiptooltips(72, equipindex72);
            }
            if (equipcb73.SelectedItem != null)
            {
                string equipselect73 = equipcb73.SelectedItem.ToString();
                int equipindex73 = getequipindex(equipselect73.Substring(31));
                if (equipindex73 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb72.SelectedItem != null && equipcb72.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb72.SelectedItem.ToString().Substring(31))].type == equip[equipindex73].type)
                            {
                                equipcb72.SelectedIndex = 0; return;
                            }
                    }

                //  if (equipcb72.SelectedIndex > -1)
                //      calcequip(7, equipindex73,73);
            }
            renewskill();

        }
        /// <summary>
        ///73装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb73_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb731.IsEnabled = false;
            equiptb732.IsEnabled = false;
            equiptb733.IsEnabled = false;
            equiptb731.SelectedIndex = -1;
            equiptb732.SelectedIndex = -1;
            equiptb733.SelectedIndex = -1;
            //clearequip(7);
            int comboindex = Combo7.SelectedIndex;

            if (equipcb71.SelectedItem != null)
            {
                string equipselect71 = equipcb71.SelectedItem.ToString();
                int equipindex71 = getequipindex(equipselect71.Substring(31));
                if (equipindex71 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb72.SelectedItem != null && equipcb72.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb72.SelectedItem.ToString().Substring(31))].type == equip[equipindex71].type)
                            {
                                equipcb73.SelectedIndex = 0; return;
                            }
                    }
                //  if (equipcb73.SelectedIndex > -1)
                //     calcequip(7, equipindex71,71);
            }
            if (equipcb72.SelectedItem != null)
            {
                string equipselect72 = equipcb72.SelectedItem.ToString();
                int equipindex72 = getequipindex(equipselect72.Substring(31));
                if (equipindex72 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb73.SelectedItem != null && equipcb73.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb73.SelectedItem.ToString().Substring(31))].type == equip[equipindex72].type)
                            {
                                equipcb73.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb71.SelectedItem != null && equipcb71.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb71.SelectedItem.ToString().Substring(31))].type == equip[equipindex72].type)
                            {
                                equipcb73.SelectedIndex = 0; return;
                            }
                    }
                // if (equipcb73.SelectedIndex > -1)
                //     calcequip(7, equipindex72,72);
            }
            if (equipcb73.SelectedItem != null)
            {
                string equipselect73 = equipcb73.SelectedItem.ToString();
                int equipindex73 = getequipindex(equipselect73.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex73].property1))
                {
                    equiptb731.IsEnabled = true;
                    equiptb731.Items.Clear();
                    for (int i = (int)equip[equipindex73].down1; i <= equip[equipindex73].up1; i++)
                    {
                        equiptb731.Items.Add(i);
                    }
                    equiptb731.SelectedIndex = equiptb731.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex73].property2))
                {
                    equiptb732.IsEnabled = true;
                    equiptb732.Items.Clear();
                    for (int i = (int)equip[equipindex73].down2; i <= equip[equipindex73].up2; i++)
                    {
                        equiptb732.Items.Add(i);
                    }
                    equiptb732.SelectedIndex = equiptb732.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex73].property3))
                {
                    equiptb733.IsEnabled = true;
                    equiptb733.Items.Clear();
                    for (int i = (int)equip[equipindex73].down3; i <= equip[equipindex73].up3; i++)
                    {
                        equiptb733.Items.Add(i);
                    }
                    equiptb733.SelectedIndex = equiptb733.Items.Count - 1;
                }
                if (equipindex73 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb72.SelectedItem != null && equipcb72.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb72.SelectedItem.ToString().Substring(31))].type == equip[equipindex73].type)
                            {
                                equipcb73.SelectedIndex = 0; return;
                            }
                    }

                //  if (equipcb73.SelectedIndex > -1)
                //      calcequip(7, equipindex73,73);
                if (equip[equipindex73].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb73.Foreground = br;
                }
                else if (equip[equipindex73].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb73.Foreground = br;
                }
                else if (equip[equipindex73].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb73.Foreground = br;
                }
                else if (equip[equipindex73].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb73.Foreground = br;
                }
                setequiptooltips(73, equipindex73);
            }
            renewskill();
        }
        /// <summary>
        ///81装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb81_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb811.IsEnabled = false;
            equiptb812.IsEnabled = false;
            equiptb813.IsEnabled = false;
            equiptb811.SelectedIndex = -1;
            equiptb812.SelectedIndex = -1;
            equiptb813.SelectedIndex = -1;
            //clearequip(8);
            int comboindex = Combo8.SelectedIndex;

            if (equipcb81.SelectedItem != null)
            {
                string equipselect81 = equipcb81.SelectedItem.ToString();
                int equipindex81 = getequipindex(equipselect81.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex81].property1))
                {
                    equiptb811.IsEnabled = true;
                    equiptb811.Items.Clear();
                    for (int i = (int)equip[equipindex81].down1; i <= equip[equipindex81].up1; i++)
                    {
                        equiptb811.Items.Add(i);
                    }
                    equiptb811.SelectedIndex = equiptb811.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex81].property2))
                {
                    equiptb812.IsEnabled = true;
                    equiptb812.Items.Clear();
                    for (int i = (int)equip[equipindex81].down2; i <= equip[equipindex81].up2; i++)
                    {
                        equiptb812.Items.Add(i);
                    }
                    equiptb812.SelectedIndex = equiptb812.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex81].property3))
                {
                    equiptb813.IsEnabled = true;
                    equiptb813.Items.Clear();
                    for (int i = (int)equip[equipindex81].down3; i <= equip[equipindex81].up3; i++)
                    {
                        equiptb813.Items.Add(i);
                    }
                    equiptb813.SelectedIndex = equiptb813.Items.Count - 1;
                }
                if (equipindex81 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb82.SelectedItem != null && equipcb82.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb82.SelectedItem.ToString().Substring(31))].type == equip[equipindex81].type)
                            {
                                equipcb81.SelectedIndex = 0; return;
                            }
                    }
                //  if (equipcb81.SelectedIndex > -1)
                //     calcequip(8, equipindex81,81);
                if (equip[equipindex81].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb81.Foreground = br;
                }
                else if (equip[equipindex81].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb81.Foreground = br;
                }
                else if (equip[equipindex81].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb81.Foreground = br;
                }
                else if (equip[equipindex81].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb81.Foreground = br;
                }
                setequiptooltips(81, equipindex81);
            }
            if (equipcb82.SelectedItem != null)
            {
                string equipselect82 = equipcb82.SelectedItem.ToString();
                int equipindex82 = getequipindex(equipselect82.Substring(31));
                if (equipindex82 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb83.SelectedItem != null && equipcb83.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb83.SelectedItem.ToString().Substring(31))].type == equip[equipindex82].type)
                            {
                                equipcb81.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb81.SelectedItem != null && equipcb81.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb81.SelectedItem.ToString().Substring(31))].type == equip[equipindex82].type)
                            {
                                equipcb81.SelectedIndex = 0; return;
                            }
                    }
                //    if (equipcb81.SelectedIndex > -1)
                //       calcequip(8, equipindex82,82);
            }
            if (equipcb83.SelectedItem != null)
            {
                string equipselect83 = equipcb83.SelectedItem.ToString();
                int equipindex83 = getequipindex(equipselect83.Substring(31));
                if (equipindex83 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb82.SelectedItem != null && equipcb82.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb82.SelectedItem.ToString().Substring(31))].type == equip[equipindex83].type)
                            {
                                equipcb81.SelectedIndex = 0; return;
                            }
                    }

                //   if (equipcb81.SelectedIndex > -1)
                //       calcequip(8, equipindex83,83);
            }
            renewskill();
        }
        /// <summary>
        ///82装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb82_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb821.IsEnabled = false;
            equiptb822.IsEnabled = false;
            equiptb823.IsEnabled = false;
            equiptb821.SelectedIndex = -1;
            equiptb822.SelectedIndex = -1;
            equiptb823.SelectedIndex = -1;
            //clearequip(8);
            int comboindex = Combo8.SelectedIndex;

            if (equipcb81.SelectedItem != null)
            {
                string equipselect81 = equipcb81.SelectedItem.ToString();
                int equipindex81 = getequipindex(equipselect81.Substring(31));
                if (equipindex81 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb82.SelectedItem != null && equipcb82.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb82.SelectedItem.ToString().Substring(31))].type == equip[equipindex81].type)
                            {
                                equipcb82.SelectedIndex = 0; return;
                            }
                    }
                //   if (equipcb82.SelectedIndex > -1)
                //       calcequip(8, equipindex81,81);
            }
            if (equipcb82.SelectedItem != null)
            {
                string equipselect82 = equipcb82.SelectedItem.ToString();
                int equipindex82 = getequipindex(equipselect82.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex82].property1))
                {
                    equiptb821.IsEnabled = true;
                    equiptb821.Items.Clear();
                    for (int i = (int)equip[equipindex82].down1; i <= equip[equipindex82].up1; i++)
                    {
                        equiptb821.Items.Add(i);
                    }
                    equiptb821.SelectedIndex = equiptb821.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex82].property2))
                {
                    equiptb822.IsEnabled = true;
                    equiptb822.Items.Clear();
                    for (int i = (int)equip[equipindex82].down2; i <= equip[equipindex82].up2; i++)
                    {
                        equiptb822.Items.Add(i);
                    }
                    equiptb822.SelectedIndex = equiptb822.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex82].property3))
                {
                    equiptb823.IsEnabled = true;
                    equiptb823.Items.Clear();
                    for (int i = (int)equip[equipindex82].down3; i <= equip[equipindex82].up3; i++)
                    {
                        equiptb823.Items.Add(i);
                    }
                    equiptb823.SelectedIndex = equiptb823.Items.Count - 1;
                }
                if (equipindex82 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb83.SelectedItem != null && equipcb83.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb83.SelectedItem.ToString().Substring(31))].type == equip[equipindex82].type)
                            {
                                equipcb82.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb81.SelectedItem != null && equipcb81.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb81.SelectedItem.ToString().Substring(31))].type == equip[equipindex82].type)
                            {
                                equipcb82.SelectedIndex = 0; return;
                            }
                    }
                //  if (equipcb82.SelectedIndex > -1)
                //      calcequip(8, equipindex82,82);
                if (equip[equipindex82].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb82.Foreground = br;
                }
                else if (equip[equipindex82].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb82.Foreground = br;
                }
                else if (equip[equipindex82].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb82.Foreground = br;
                }
                else if (equip[equipindex82].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb82.Foreground = br;
                }
                setequiptooltips(82, equipindex82);
            }
            if (equipcb83.SelectedItem != null)
            {
                string equipselect83 = equipcb83.SelectedItem.ToString();
                int equipindex83 = getequipindex(equipselect83.Substring(31));
                if (equipindex83 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb82.SelectedItem != null && equipcb82.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb82.SelectedItem.ToString().Substring(31))].type == equip[equipindex83].type)
                            {
                                equipcb82.SelectedIndex = 0; return;
                            }
                    }

                //   if (equipcb82.SelectedIndex > -1)
                //       calcequip(8, equipindex83,83);
            }
            renewskill();
        }
        /// <summary>
        ///83装备格选项变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void equipcb83_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            equiptb831.IsEnabled = false;
            equiptb832.IsEnabled = false;
            equiptb833.IsEnabled = false;
            equiptb831.SelectedIndex = -1;
            equiptb832.SelectedIndex = -1;
            equiptb833.SelectedIndex = -1;
            //clearequip(8);
            int comboindex = Combo8.SelectedIndex;

            if (equipcb81.SelectedItem != null)
            {
                string equipselect81 = equipcb81.SelectedItem.ToString();
                int equipindex81 = getequipindex(equipselect81.Substring(31));
                if (equipindex81 != -1)
                    if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb82.SelectedItem != null && equipcb82.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb82.SelectedItem.ToString().Substring(31))].type == equip[equipindex81].type)
                            {
                                equipcb83.SelectedIndex = 0; return;
                            }
                    }
                //   if (equipcb83.SelectedIndex > -1)
                //      calcequip(8, equipindex81,81);
            }
            if (equipcb82.SelectedItem != null)
            {
                string equipselect82 = equipcb82.SelectedItem.ToString();
                int equipindex82 = getequipindex(equipselect82.Substring(31));
                if (equipindex82 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb83.SelectedItem != null && equipcb83.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb83.SelectedItem.ToString().Substring(31))].type == equip[equipindex82].type)
                            {
                                equipcb83.SelectedIndex = 0; return;
                            }
                    }
                    else if (comboindex == 51 || comboindex == 52)
                    {
                        if (equipcb81.SelectedItem != null && equipcb81.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb81.SelectedItem.ToString().Substring(31))].type == equip[equipindex82].type)
                            {
                                equipcb83.SelectedIndex = 0; return;
                            }
                    }
                //   if (equipcb83.SelectedIndex > -1)
                //       calcequip(8, equipindex82,82);
            }
            if (equipcb83.SelectedItem != null)
            {
                string equipselect83 = equipcb83.SelectedItem.ToString();
                int equipindex83 = getequipindex(equipselect83.Substring(31));
                if (!String.IsNullOrEmpty(equip[equipindex83].property1))
                {
                    equiptb831.IsEnabled = true;
                    equiptb831.Items.Clear();
                    for (int i = (int)equip[equipindex83].down1; i <= equip[equipindex83].up1; i++)
                    {
                        equiptb831.Items.Add(i);
                    }
                    equiptb831.SelectedIndex = equiptb831.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex83].property2))
                {
                    equiptb832.IsEnabled = true;
                    equiptb832.Items.Clear();
                    for (int i = (int)equip[equipindex83].down2; i <= equip[equipindex83].up2; i++)
                    {
                        equiptb832.Items.Add(i);
                    }
                    equiptb832.SelectedIndex = equiptb832.Items.Count - 1;
                }
                if (!String.IsNullOrEmpty(equip[equipindex83].property3))
                {
                    equiptb833.IsEnabled = true;
                    equiptb833.Items.Clear();
                    for (int i = (int)equip[equipindex83].down3; i <= equip[equipindex83].up3; i++)
                    {
                        equiptb833.Items.Add(i);
                    }
                    equiptb833.SelectedIndex = equiptb833.Items.Count - 1;
                }
                if (equipindex83 != -1)
                    if (comboindex == 49)           //16
                    {
                        if (equipcb82.SelectedItem != null && equipcb82.SelectedItem.ToString().Substring(31) != " ")
                            if (equip[getequipindex(equipcb82.SelectedItem.ToString().Substring(31))].type == equip[equipindex83].type)
                            {
                                equipcb83.SelectedIndex = 0; return;
                            }
                    }

                //    if (equipcb83.SelectedIndex > -1)
                //       calcequip(8, equipindex83,83);
                if (equip[equipindex83].rank == 2)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                    equipcb83.Foreground = br;
                }
                else if (equip[equipindex83].rank == 3)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Blue"));
                    equipcb83.Foreground = br;
                }
                else if (equip[equipindex83].rank == 4)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Green"));
                    equipcb83.Foreground = br;
                }
                else if (equip[equipindex83].rank == 5)
                {
                    Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("orange"));
                    equipcb83.Foreground = br;
                }
                setequiptooltips(83, equipindex83);
            }
            renewskill();
        }
        /// <summary>
        /// 点击夜战checkbox事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void cbIsnight_Click(object sender, RoutedEventArgs e)
        {
            if (cbIsnight.IsChecked == true)
                innight = true;
            else
                innight = false;
            for (int i = 0; i < 9; i++)
            {
                renewskill();
                //renewindex(i);
            }
        }
        /// <summary>
        /// 敌方护甲值变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void enemyarmor_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (!IsNumber(enemyarmor.Text))
                enemyarmor.Text = "0";
            if (int.Parse(enemyarmor.Text) < 0)
                enemyarmor.Text = "0";
            for (int i = 0; i < 9; i++)
            {
                renewindex(i);
            }
            renewskill();
        }
        /// <summary>
        /// 夏活相关按钮点击事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void xhbutton_Click(object sender, RoutedEventArgs e)
        {
            Aboutxh s = new Aboutxh();
            s.ShowDialog();
        }
        /// <summary>
        /// 练级计算器点击事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void calclevelup_Click(object sender, RoutedEventArgs e)
        {
            calclevelup c = new calclevelup();
            c.Show();
        }
        /// <summary>
        /// 敌方伤害变化事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void TextBox3_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (!IsNumber(enemydamage.Text))
                enemydamage.Text = "0";
            renewtank();
        }
        /// <summary>
        /// 点击左上格心事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Merry0_MouseUp(object sender, MouseButtonEventArgs e)
        {
            if (merry[0] == 1.1)
            {
                merry[0] = 0.95;
                Merry0.Content = "💔";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                Merry0.Foreground = br;
            }
            else if (merry[0] == 0.95)
            {
                merry[0] = 1;
                Merry0.Content = "♡";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Gray"));
                Merry0.Foreground = br;
            }
            else if (merry[0] == 1)
            {
                merry[0] = 1.05;
                Merry0.Content = "❤";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Orange"));
                Merry0.Foreground = br;
            }
            else if (merry[0] == 1.05)
            {
                merry[0] = 1.1;
                Merry0.Content = "💘";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Red"));
                Merry0.Foreground = br;
            }

            int select = Combo0.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level0.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel0.SelectedIndex;
            if (skillselect == -1)
                return;
            renewskill();
            renewskill();
        }
        /// <summary>
        /// 点击上格心事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Merry1_MouseUp(object sender, MouseButtonEventArgs e)
        {
            if (merry[1] == 1.1)
            {
                merry[1] = 0.95;
                Merry1.Content = "💔";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                Merry1.Foreground = br;
            }
            else if (merry[1] == 0.95)
            {
                merry[1] = 1;
                Merry1.Content = "♡";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Gray"));
                Merry1.Foreground = br;
            }
            else if (merry[1] == 1)
            {
                merry[1] = 1.05;
                Merry1.Content = "❤";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Orange"));
                Merry1.Foreground = br;
            }
            else if (merry[1] == 1.05)
            {
                merry[1] = 1.1;
                Merry1.Content = "💘";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Red"));
                Merry1.Foreground = br;
            }

            int select = Combo1.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level1.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel1.SelectedIndex;
            if (skillselect == -1)
                return;
            renewskill();
            renewskill();
        }
        /// <summary>
        /// 点击右上格心事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Merry2_MouseUp(object sender, MouseButtonEventArgs e)
        {
            if (merry[2] == 1.1)
            {
                merry[2] = 0.95;
                Merry2.Content = "💔";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                Merry2.Foreground = br;
            }
            else if (merry[2] == 0.95)
            {
                merry[2] = 1;
                Merry2.Content = "♡";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Gray"));
                Merry2.Foreground = br;
            }
            else if (merry[2] == 1)
            {
                merry[2] = 1.05;
                Merry2.Content = "❤";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Orange"));
                Merry2.Foreground = br;
            }
            else if (merry[2] == 1.05)
            {
                merry[2] = 1.1;
                Merry2.Content = "💘";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Red"));
                Merry2.Foreground = br;
            }

            int select = Combo2.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level2.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel2.SelectedIndex;
            if (skillselect == -1)
                return;
            renewskill();
            renewskill();
        }
        /// <summary>
        /// 点击左中格心事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Merry3_MouseUp(object sender, MouseButtonEventArgs e)
        {
            if (merry[3] == 1.1)
            {
                merry[3] = 0.95;
                Merry3.Content = "💔";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                Merry3.Foreground = br;
            }
            else if (merry[3] == 0.95)
            {
                merry[3] = 1;
                Merry3.Content = "♡";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Gray"));
                Merry3.Foreground = br;
            }
            else if (merry[3] == 1)
            {
                merry[3] = 1.05;
                Merry3.Content = "❤";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Orange"));
                Merry3.Foreground = br;
            }
            else if (merry[3] == 1.05)
            {
                merry[3] = 1.1;
                Merry3.Content = "💘";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Red"));
                Merry3.Foreground = br;
            }

            int select = Combo3.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level3.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel3.SelectedIndex;
            if (skillselect == -1)
                return;
            renewskill();
            renewskill();
        }
        /// <summary>
        /// 点击中格心事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Merry4_MouseUp(object sender, MouseButtonEventArgs e)
        {
            if (merry[4] == 1.1)
            {
                merry[4] = 0.95;
                Merry4.Content = "💔";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                Merry4.Foreground = br;
            }
            else if (merry[4] == 0.95)
            {
                merry[4] = 1;
                Merry4.Content = "♡";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Gray"));
                Merry4.Foreground = br;
            }
            else if (merry[4] == 1)
            {
                merry[4] = 1.05;
                Merry4.Content = "❤";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Orange"));
                Merry4.Foreground = br;
            }
            else if (merry[4] == 1.05)
            {
                merry[4] = 1.1;
                Merry4.Content = "💘";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Red"));
                Merry4.Foreground = br;
            }

            int select = Combo4.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level4.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel4.SelectedIndex;
            if (skillselect == -1)
                return;
            renewskill();
            renewskill();
        }
        /// <summary>
        /// 点击右中格心事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Merry5_MouseUp(object sender, MouseButtonEventArgs e)
        {
            if (merry[5] == 1.1)
            {
                merry[5] = 0.95;
                Merry5.Content = "💔";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                Merry5.Foreground = br;
            }
            else if (merry[5] == 0.95)
            {
                merry[5] = 1;
                Merry5.Content = "♡";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Gray"));
                Merry5.Foreground = br;
            }
            else if (merry[5] == 1)
            {
                merry[5] = 1.05;
                Merry5.Content = "❤";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Orange"));
                Merry5.Foreground = br;
            }
            else if (merry[5] == 1.05)
            {
                merry[5] = 1.1;
                Merry5.Content = "💘";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Red"));
                Merry5.Foreground = br;
            }

            int select = Combo5.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level5.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel5.SelectedIndex;
            if (skillselect == -1)
                return;
            renewskill();
            renewskill();
        }
        /// <summary>
        /// 点击左下格心事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Merry6_MouseUp(object sender, MouseButtonEventArgs e)
        {
            if (merry[6] == 1.1)
            {
                merry[6] = 0.95;
                Merry6.Content = "💔";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                Merry6.Foreground = br;
            }
            else if (merry[6] == 0.95)
            {
                merry[6] = 1;
                Merry6.Content = "♡";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Gray"));
                Merry6.Foreground = br;
            }
            else if (merry[6] == 1)
            {
                merry[6] = 1.05;
                Merry6.Content = "❤";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Orange"));
                Merry6.Foreground = br;
            }
            else if (merry[6] == 1.05)
            {
                merry[6] = 1.1;
                Merry6.Content = "💘";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Red"));
                Merry6.Foreground = br;
            }

            int select = Combo6.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level6.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel6.SelectedIndex;
            if (skillselect == -1)
                return;
            renewskill();
            renewskill();
        }
        /// <summary>
        /// 点击下格心事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Merry7_MouseUp(object sender, MouseButtonEventArgs e)
        {
            if (merry[7] == 1.1)
            {
                merry[7] = 0.95;
                Merry7.Content = "💔";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                Merry7.Foreground = br;
            }
            else if (merry[7] == 0.95)
            {
                merry[7] = 1;
                Merry7.Content = "♡";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Gray"));
                Merry7.Foreground = br;
            }
            else if (merry[7] == 1)
            {
                merry[7] = 1.05;
                Merry7.Content = "❤";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Orange"));
                Merry7.Foreground = br;
            }
            else if (merry[7] == 1.05)
            {
                merry[7] = 1.1;
                Merry7.Content = "💘";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Red"));
                Merry7.Foreground = br;
            }

            int select = Combo7.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level7.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel7.SelectedIndex;
            if (skillselect == -1)
                return;
            renewskill();
            renewskill();
        }
        /// <summary>
        /// 点击右下格心事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Merry8_MouseUp(object sender, MouseButtonEventArgs e)
        {
            if (merry[8] == 1.1)
            {
                merry[8] = 0.95;
                Merry8.Content = "💔";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Black"));
                Merry8.Foreground = br;
            }
            else if (merry[8] == 0.95)
            {
                merry[8] = 1;
                Merry8.Content = "♡";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Gray"));
                Merry8.Foreground = br;
            }
            else if (merry[8] == 1)
            {
                merry[8] = 1.05;
                Merry8.Content = "❤";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Orange"));
                Merry8.Foreground = br;
            }
            else if (merry[8] == 1.05)
            {
                merry[8] = 1.1;
                Merry8.Content = "💘";
                Brush br = new SolidColorBrush((Color)ColorConverter.ConvertFromString("Red"));
                Merry8.Foreground = br;
            }

            int select = Combo8.SelectedIndex;
            if (select == -1 || select == GUN_NUMBER)
                return;
            int levelselect = Level8.SelectedIndex;
            if (levelselect == -1 || levelselect == 100)
                return;
            int skillselect = SkillLevel8.SelectedIndex;
            if (skillselect == -1)
                return;
            renewskill();
            renewskill();
        }

        private void showbuff(int combo, int index)
        {
            if (index == -1 || index == GUN_NUMBER)
            {
                clearshowbuff(combo, 5);
                return;
            }
            string tbt = "";
            switch (gun[index].to)
            {
                case 1:
                    {
                        tbt += "对所有枪种：";
                        break;
                    }
                case 2:
                    {
                        tbt += "对突击步枪：";
                        break;
                    }
                case 3:
                    {
                        tbt += "对冲锋枪：";
                        break;
                    }
                case 4:
                    {
                        tbt += "对手枪：";
                        break;
                    }
                case 5:
                    {
                        tbt += "对狙击枪：";
                        break;
                    }
                case 6:
                    {
                        tbt += "对机枪：";
                        break;
                    }
                case 7:
                    {
                        tbt += "对霰弹枪：";
                        break;
                    }
                default: break;
            }
            if (gun[index].damageup != 0)
                tbt += "伤害+" + Math.Floor((gun[index].damageup) * 100 * multiple[combo]).ToString("0") + "% ";
            if (gun[index].shotspeedup != 0)
                tbt += "射速+" + Math.Floor((gun[index].shotspeedup) * 100 * multiple[combo]).ToString("0") + "% ";
            if (gun[index].hitup != 0)
                tbt += "命中+" + Math.Floor((gun[index].hitup) * 100 * multiple[combo]).ToString("0") + "% ";
            if (gun[index].dodgeup != 0)
                tbt += "回避+" + Math.Floor((gun[index].dodgeup) * 100 * multiple[combo]).ToString("0") + "% ";
            if (gun[index].critup != 0)
                tbt += "暴击率+" + Math.Floor((gun[index].critup) * 100 * multiple[combo]).ToString("0") + "% ";
            if (gun[index].rateup != 0)
                tbt += "冷却-" + Math.Floor((gun[index].rateup) * 100 * multiple[combo]).ToString("0") + "% ";
            if (gun[index].armorup != 0)
                tbt += "护甲+" + Math.Floor(gun[index].armorup * 100 * multiple[combo]).ToString("0") + "% ";
            if (tbt == "")
                tbt = "无";
            Brush br = new SolidColorBrush(Color.FromRgb(0, 255, 222));
            switch (combo)
            {
                case 0:
                    {
                        clearshowbuff(0, gun[index].grid_center);
                        buffGrids0.ToolTip = tbt;
                        switch (gun[index].number)
                        {
                            case 1:
                                {
                                    gridlist[0][gun[index].effect0 - 1].Background = br;
                                    break;
                                }
                            case 2:
                                {
                                    gridlist[0][gun[index].effect0 - 1].Background = br;
                                    gridlist[0][gun[index].effect1 - 1].Background = br;
                                    break;
                                }
                            case 3:
                                {
                                    gridlist[0][gun[index].effect0 - 1].Background = br;
                                    gridlist[0][gun[index].effect1 - 1].Background = br;
                                    gridlist[0][gun[index].effect2 - 1].Background = br;
                                    break;
                                }
                            case 4:
                                {
                                    gridlist[0][gun[index].effect0 - 1].Background = br;
                                    gridlist[0][gun[index].effect1 - 1].Background = br;
                                    gridlist[0][gun[index].effect2 - 1].Background = br;
                                    gridlist[0][gun[index].effect3 - 1].Background = br;
                                    break;
                                }
                            case 5:
                                {
                                    gridlist[0][gun[index].effect0 - 1].Background = br;
                                    gridlist[0][gun[index].effect1 - 1].Background = br;
                                    gridlist[0][gun[index].effect2 - 1].Background = br;
                                    gridlist[0][gun[index].effect3 - 1].Background = br;
                                    gridlist[0][gun[index].effect4 - 1].Background = br;
                                    break;
                                }
                            case 6:
                                {
                                    gridlist[0][gun[index].effect0 - 1].Background = br;
                                    gridlist[0][gun[index].effect1 - 1].Background = br;
                                    gridlist[0][gun[index].effect2 - 1].Background = br;
                                    gridlist[0][gun[index].effect3 - 1].Background = br;
                                    gridlist[0][gun[index].effect4 - 1].Background = br;
                                    gridlist[0][gun[index].effect5 - 1].Background = br;
                                    break;
                                }
                            case 7:
                                {
                                    gridlist[0][gun[index].effect0 - 1].Background = br;
                                    gridlist[0][gun[index].effect1 - 1].Background = br;
                                    gridlist[0][gun[index].effect2 - 1].Background = br;
                                    gridlist[0][gun[index].effect3 - 1].Background = br;
                                    gridlist[0][gun[index].effect4 - 1].Background = br;
                                    gridlist[0][gun[index].effect5 - 1].Background = br;
                                    gridlist[0][gun[index].effect6 - 1].Background = br;
                                    break;
                                }
                            case 8:
                                {
                                    gridlist[0][gun[index].effect0 - 1].Background = br;
                                    gridlist[0][gun[index].effect1 - 1].Background = br;
                                    gridlist[0][gun[index].effect2 - 1].Background = br;
                                    gridlist[0][gun[index].effect3 - 1].Background = br;
                                    gridlist[0][gun[index].effect4 - 1].Background = br;
                                    gridlist[0][gun[index].effect5 - 1].Background = br;
                                    gridlist[0][gun[index].effect6 - 1].Background = br;
                                    gridlist[0][gun[index].effect7 - 1].Background = br;
                                    break;
                                }
                            default:
                                break;
                        }
                        break;
                    }
                case 1:
                    {
                        clearshowbuff(1, gun[index].grid_center);
                        buffGrids1.ToolTip = tbt;
                        switch (gun[index].number)
                        {
                            case 1:
                                {
                                    gridlist[1][gun[index].effect0 - 1].Background = br;
                                    break;
                                }
                            case 2:
                                {
                                    gridlist[1][gun[index].effect0 - 1].Background = br;
                                    gridlist[1][gun[index].effect1 - 1].Background = br;
                                    break;
                                }
                            case 3:
                                {
                                    gridlist[1][gun[index].effect0 - 1].Background = br;
                                    gridlist[1][gun[index].effect1 - 1].Background = br;
                                    gridlist[1][gun[index].effect2 - 1].Background = br;
                                    break;
                                }
                            case 4:
                                {
                                    gridlist[1][gun[index].effect0 - 1].Background = br;
                                    gridlist[1][gun[index].effect1 - 1].Background = br;
                                    gridlist[1][gun[index].effect2 - 1].Background = br;
                                    gridlist[1][gun[index].effect3 - 1].Background = br;
                                    break;
                                }
                            case 5:
                                {
                                    gridlist[1][gun[index].effect0 - 1].Background = br;
                                    gridlist[1][gun[index].effect1 - 1].Background = br;
                                    gridlist[1][gun[index].effect2 - 1].Background = br;
                                    gridlist[1][gun[index].effect3 - 1].Background = br;
                                    gridlist[1][gun[index].effect4 - 1].Background = br;
                                    break;
                                }
                            case 6:
                                {
                                    gridlist[1][gun[index].effect0 - 1].Background = br;
                                    gridlist[1][gun[index].effect1 - 1].Background = br;
                                    gridlist[1][gun[index].effect2 - 1].Background = br;
                                    gridlist[1][gun[index].effect3 - 1].Background = br;
                                    gridlist[1][gun[index].effect4 - 1].Background = br;
                                    gridlist[1][gun[index].effect5 - 1].Background = br;
                                    break;
                                }
                            case 7:
                                {
                                    gridlist[1][gun[index].effect0 - 1].Background = br;
                                    gridlist[1][gun[index].effect1 - 1].Background = br;
                                    gridlist[1][gun[index].effect2 - 1].Background = br;
                                    gridlist[1][gun[index].effect3 - 1].Background = br;
                                    gridlist[1][gun[index].effect4 - 1].Background = br;
                                    gridlist[1][gun[index].effect5 - 1].Background = br;
                                    gridlist[1][gun[index].effect6 - 1].Background = br;
                                    break;
                                }
                            case 8:
                                {
                                    gridlist[1][gun[index].effect0 - 1].Background = br;
                                    gridlist[1][gun[index].effect1 - 1].Background = br;
                                    gridlist[1][gun[index].effect2 - 1].Background = br;
                                    gridlist[1][gun[index].effect3 - 1].Background = br;
                                    gridlist[1][gun[index].effect4 - 1].Background = br;
                                    gridlist[1][gun[index].effect5 - 1].Background = br;
                                    gridlist[1][gun[index].effect6 - 1].Background = br;
                                    gridlist[1][gun[index].effect7 - 1].Background = br;
                                    break;
                                }
                            default:
                                break;
                        }
                        break;
                    }
                case 2:
                    {
                        clearshowbuff(2, gun[index].grid_center);
                        buffGrids2.ToolTip = tbt;
                        switch (gun[index].number)
                        {
                            case 1:
                                {
                                    gridlist[2][gun[index].effect0 - 1].Background = br;
                                    break;
                                }
                            case 2:
                                {
                                    gridlist[2][gun[index].effect0 - 1].Background = br;
                                    gridlist[2][gun[index].effect1 - 1].Background = br;
                                    break;
                                }
                            case 3:
                                {
                                    gridlist[2][gun[index].effect0 - 1].Background = br;
                                    gridlist[2][gun[index].effect1 - 1].Background = br;
                                    gridlist[2][gun[index].effect2 - 1].Background = br;
                                    break;
                                }
                            case 4:
                                {
                                    gridlist[2][gun[index].effect0 - 1].Background = br;
                                    gridlist[2][gun[index].effect1 - 1].Background = br;
                                    gridlist[2][gun[index].effect2 - 1].Background = br;
                                    gridlist[2][gun[index].effect3 - 1].Background = br;
                                    break;
                                }
                            case 5:
                                {
                                    gridlist[2][gun[index].effect0 - 1].Background = br;
                                    gridlist[2][gun[index].effect1 - 1].Background = br;
                                    gridlist[2][gun[index].effect2 - 1].Background = br;
                                    gridlist[2][gun[index].effect3 - 1].Background = br;
                                    gridlist[2][gun[index].effect4 - 1].Background = br;
                                    break;
                                }
                            case 6:
                                {
                                    gridlist[2][gun[index].effect0 - 1].Background = br;
                                    gridlist[2][gun[index].effect1 - 1].Background = br;
                                    gridlist[2][gun[index].effect2 - 1].Background = br;
                                    gridlist[2][gun[index].effect3 - 1].Background = br;
                                    gridlist[2][gun[index].effect4 - 1].Background = br;
                                    gridlist[2][gun[index].effect5 - 1].Background = br;
                                    break;
                                }
                            case 7:
                                {
                                    gridlist[2][gun[index].effect0 - 1].Background = br;
                                    gridlist[2][gun[index].effect1 - 1].Background = br;
                                    gridlist[2][gun[index].effect2 - 1].Background = br;
                                    gridlist[2][gun[index].effect3 - 1].Background = br;
                                    gridlist[2][gun[index].effect4 - 1].Background = br;
                                    gridlist[2][gun[index].effect5 - 1].Background = br;
                                    gridlist[2][gun[index].effect6 - 1].Background = br;
                                    break;
                                }
                            case 8:
                                {
                                    gridlist[2][gun[index].effect0 - 1].Background = br;
                                    gridlist[2][gun[index].effect1 - 1].Background = br;
                                    gridlist[2][gun[index].effect2 - 1].Background = br;
                                    gridlist[2][gun[index].effect3 - 1].Background = br;
                                    gridlist[2][gun[index].effect4 - 1].Background = br;
                                    gridlist[2][gun[index].effect5 - 1].Background = br;
                                    gridlist[2][gun[index].effect6 - 1].Background = br;
                                    gridlist[2][gun[index].effect7 - 1].Background = br;
                                    break;
                                }
                            default:
                                break;
                        }
                        break;
                    }
                case 3:
                    {
                        clearshowbuff(3, gun[index].grid_center);
                        buffGrids3.ToolTip = tbt;
                        switch (gun[index].number)
                        {
                            case 1:
                                {
                                    gridlist[3][gun[index].effect0 - 1].Background = br;
                                    break;
                                }
                            case 2:
                                {
                                    gridlist[3][gun[index].effect0 - 1].Background = br;
                                    gridlist[3][gun[index].effect1 - 1].Background = br;
                                    break;
                                }
                            case 3:
                                {
                                    gridlist[3][gun[index].effect0 - 1].Background = br;
                                    gridlist[3][gun[index].effect1 - 1].Background = br;
                                    gridlist[3][gun[index].effect2 - 1].Background = br;
                                    break;
                                }
                            case 4:
                                {
                                    gridlist[3][gun[index].effect0 - 1].Background = br;
                                    gridlist[3][gun[index].effect1 - 1].Background = br;
                                    gridlist[3][gun[index].effect2 - 1].Background = br;
                                    gridlist[3][gun[index].effect3 - 1].Background = br;
                                    break;
                                }
                            case 5:
                                {
                                    gridlist[3][gun[index].effect0 - 1].Background = br;
                                    gridlist[3][gun[index].effect1 - 1].Background = br;
                                    gridlist[3][gun[index].effect2 - 1].Background = br;
                                    gridlist[3][gun[index].effect3 - 1].Background = br;
                                    gridlist[3][gun[index].effect4 - 1].Background = br;
                                    break;
                                }
                            case 6:
                                {
                                    gridlist[3][gun[index].effect0 - 1].Background = br;
                                    gridlist[3][gun[index].effect1 - 1].Background = br;
                                    gridlist[3][gun[index].effect2 - 1].Background = br;
                                    gridlist[3][gun[index].effect3 - 1].Background = br;
                                    gridlist[3][gun[index].effect4 - 1].Background = br;
                                    gridlist[3][gun[index].effect5 - 1].Background = br;
                                    break;
                                }
                            case 7:
                                {
                                    gridlist[3][gun[index].effect0 - 1].Background = br;
                                    gridlist[3][gun[index].effect1 - 1].Background = br;
                                    gridlist[3][gun[index].effect2 - 1].Background = br;
                                    gridlist[3][gun[index].effect3 - 1].Background = br;
                                    gridlist[3][gun[index].effect4 - 1].Background = br;
                                    gridlist[3][gun[index].effect5 - 1].Background = br;
                                    gridlist[3][gun[index].effect6 - 1].Background = br;
                                    break;
                                }
                            case 8:
                                {
                                    gridlist[3][gun[index].effect0 - 1].Background = br;
                                    gridlist[3][gun[index].effect1 - 1].Background = br;
                                    gridlist[3][gun[index].effect2 - 1].Background = br;
                                    gridlist[3][gun[index].effect3 - 1].Background = br;
                                    gridlist[3][gun[index].effect4 - 1].Background = br;
                                    gridlist[3][gun[index].effect5 - 1].Background = br;
                                    gridlist[3][gun[index].effect6 - 1].Background = br;
                                    gridlist[3][gun[index].effect7 - 1].Background = br;
                                    break;
                                }
                            default:
                                break;
                        }
                        break;
                    }
                case 4:
                    {
                        clearshowbuff(4, gun[index].grid_center);
                        buffGrids4.ToolTip = tbt;
                        switch (gun[index].number)
                        {
                            case 1:
                                {
                                    gridlist[4][gun[index].effect0 - 1].Background = br;
                                    break;
                                }
                            case 2:
                                {
                                    gridlist[4][gun[index].effect0 - 1].Background = br;
                                    gridlist[4][gun[index].effect1 - 1].Background = br;
                                    break;
                                }
                            case 3:
                                {
                                    gridlist[4][gun[index].effect0 - 1].Background = br;
                                    gridlist[4][gun[index].effect1 - 1].Background = br;
                                    gridlist[4][gun[index].effect2 - 1].Background = br;
                                    break;
                                }
                            case 4:
                                {
                                    gridlist[4][gun[index].effect0 - 1].Background = br;
                                    gridlist[4][gun[index].effect1 - 1].Background = br;
                                    gridlist[4][gun[index].effect2 - 1].Background = br;
                                    gridlist[4][gun[index].effect3 - 1].Background = br;
                                    break;
                                }
                            case 5:
                                {
                                    gridlist[4][gun[index].effect0 - 1].Background = br;
                                    gridlist[4][gun[index].effect1 - 1].Background = br;
                                    gridlist[4][gun[index].effect2 - 1].Background = br;
                                    gridlist[4][gun[index].effect3 - 1].Background = br;
                                    gridlist[4][gun[index].effect4 - 1].Background = br;
                                    break;
                                }
                            case 6:
                                {
                                    gridlist[4][gun[index].effect0 - 1].Background = br;
                                    gridlist[4][gun[index].effect1 - 1].Background = br;
                                    gridlist[4][gun[index].effect2 - 1].Background = br;
                                    gridlist[4][gun[index].effect3 - 1].Background = br;
                                    gridlist[4][gun[index].effect4 - 1].Background = br;
                                    gridlist[4][gun[index].effect5 - 1].Background = br;
                                    break;
                                }
                            case 7:
                                {
                                    gridlist[4][gun[index].effect0 - 1].Background = br;
                                    gridlist[4][gun[index].effect1 - 1].Background = br;
                                    gridlist[4][gun[index].effect2 - 1].Background = br;
                                    gridlist[4][gun[index].effect3 - 1].Background = br;
                                    gridlist[4][gun[index].effect4 - 1].Background = br;
                                    gridlist[4][gun[index].effect5 - 1].Background = br;
                                    gridlist[4][gun[index].effect6 - 1].Background = br;
                                    break;
                                }
                            case 8:
                                {
                                    gridlist[4][gun[index].effect0 - 1].Background = br;
                                    gridlist[4][gun[index].effect1 - 1].Background = br;
                                    gridlist[4][gun[index].effect2 - 1].Background = br;
                                    gridlist[4][gun[index].effect3 - 1].Background = br;
                                    gridlist[4][gun[index].effect4 - 1].Background = br;
                                    gridlist[4][gun[index].effect5 - 1].Background = br;
                                    gridlist[4][gun[index].effect6 - 1].Background = br;
                                    gridlist[4][gun[index].effect7 - 1].Background = br;
                                    break;
                                }
                            default:
                                break;
                        }
                        break;
                    }
                case 5:
                    {
                        clearshowbuff(5, gun[index].grid_center);
                        buffGrids5.ToolTip = tbt;
                        switch (gun[index].number)
                        {
                            case 1:
                                {
                                    gridlist[5][gun[index].effect0 - 1].Background = br;
                                    break;
                                }
                            case 2:
                                {
                                    gridlist[5][gun[index].effect0 - 1].Background = br;
                                    gridlist[5][gun[index].effect1 - 1].Background = br;
                                    break;
                                }
                            case 3:
                                {
                                    gridlist[5][gun[index].effect0 - 1].Background = br;
                                    gridlist[5][gun[index].effect1 - 1].Background = br;
                                    gridlist[5][gun[index].effect2 - 1].Background = br;
                                    break;
                                }
                            case 4:
                                {
                                    gridlist[5][gun[index].effect0 - 1].Background = br;
                                    gridlist[5][gun[index].effect1 - 1].Background = br;
                                    gridlist[5][gun[index].effect2 - 1].Background = br;
                                    gridlist[5][gun[index].effect3 - 1].Background = br;
                                    break;
                                }
                            case 5:
                                {
                                    gridlist[5][gun[index].effect0 - 1].Background = br;
                                    gridlist[5][gun[index].effect1 - 1].Background = br;
                                    gridlist[5][gun[index].effect2 - 1].Background = br;
                                    gridlist[5][gun[index].effect3 - 1].Background = br;
                                    gridlist[5][gun[index].effect4 - 1].Background = br;
                                    break;
                                }
                            case 6:
                                {
                                    gridlist[5][gun[index].effect0 - 1].Background = br;
                                    gridlist[5][gun[index].effect1 - 1].Background = br;
                                    gridlist[5][gun[index].effect2 - 1].Background = br;
                                    gridlist[5][gun[index].effect3 - 1].Background = br;
                                    gridlist[5][gun[index].effect4 - 1].Background = br;
                                    gridlist[5][gun[index].effect5 - 1].Background = br;
                                    break;
                                }
                            case 7:
                                {
                                    gridlist[5][gun[index].effect0 - 1].Background = br;
                                    gridlist[5][gun[index].effect1 - 1].Background = br;
                                    gridlist[5][gun[index].effect2 - 1].Background = br;
                                    gridlist[5][gun[index].effect3 - 1].Background = br;
                                    gridlist[5][gun[index].effect4 - 1].Background = br;
                                    gridlist[5][gun[index].effect5 - 1].Background = br;
                                    gridlist[5][gun[index].effect6 - 1].Background = br;
                                    break;
                                }
                            case 8:
                                {
                                    gridlist[5][gun[index].effect0 - 1].Background = br;
                                    gridlist[5][gun[index].effect1 - 1].Background = br;
                                    gridlist[5][gun[index].effect2 - 1].Background = br;
                                    gridlist[5][gun[index].effect3 - 1].Background = br;
                                    gridlist[5][gun[index].effect4 - 1].Background = br;
                                    gridlist[5][gun[index].effect5 - 1].Background = br;
                                    gridlist[5][gun[index].effect6 - 1].Background = br;
                                    gridlist[5][gun[index].effect7 - 1].Background = br;
                                    break;
                                }
                            default:
                                break;
                        }
                        break;
                    }
                case 6:
                    {
                        clearshowbuff(6, gun[index].grid_center);
                        buffGrids6.ToolTip = tbt;
                        switch (gun[index].number)
                        {
                            case 1:
                                {
                                    gridlist[6][gun[index].effect0 - 1].Background = br;
                                    break;
                                }
                            case 2:
                                {
                                    gridlist[6][gun[index].effect0 - 1].Background = br;
                                    gridlist[6][gun[index].effect1 - 1].Background = br;
                                    break;
                                }
                            case 3:
                                {
                                    gridlist[6][gun[index].effect0 - 1].Background = br;
                                    gridlist[6][gun[index].effect1 - 1].Background = br;
                                    gridlist[6][gun[index].effect2 - 1].Background = br;
                                    break;
                                }
                            case 4:
                                {
                                    gridlist[6][gun[index].effect0 - 1].Background = br;
                                    gridlist[6][gun[index].effect1 - 1].Background = br;
                                    gridlist[6][gun[index].effect2 - 1].Background = br;
                                    gridlist[6][gun[index].effect3 - 1].Background = br;
                                    break;
                                }
                            case 5:
                                {
                                    gridlist[6][gun[index].effect0 - 1].Background = br;
                                    gridlist[6][gun[index].effect1 - 1].Background = br;
                                    gridlist[6][gun[index].effect2 - 1].Background = br;
                                    gridlist[6][gun[index].effect3 - 1].Background = br;
                                    gridlist[6][gun[index].effect4 - 1].Background = br;
                                    break;
                                }
                            case 6:
                                {
                                    gridlist[6][gun[index].effect0 - 1].Background = br;
                                    gridlist[6][gun[index].effect1 - 1].Background = br;
                                    gridlist[6][gun[index].effect2 - 1].Background = br;
                                    gridlist[6][gun[index].effect3 - 1].Background = br;
                                    gridlist[6][gun[index].effect4 - 1].Background = br;
                                    gridlist[6][gun[index].effect5 - 1].Background = br;
                                    break;
                                }
                            case 7:
                                {
                                    gridlist[6][gun[index].effect0 - 1].Background = br;
                                    gridlist[6][gun[index].effect1 - 1].Background = br;
                                    gridlist[6][gun[index].effect2 - 1].Background = br;
                                    gridlist[6][gun[index].effect3 - 1].Background = br;
                                    gridlist[6][gun[index].effect4 - 1].Background = br;
                                    gridlist[6][gun[index].effect5 - 1].Background = br;
                                    gridlist[6][gun[index].effect6 - 1].Background = br;
                                    break;
                                }
                            case 8:
                                {
                                    gridlist[6][gun[index].effect0 - 1].Background = br;
                                    gridlist[6][gun[index].effect1 - 1].Background = br;
                                    gridlist[6][gun[index].effect2 - 1].Background = br;
                                    gridlist[6][gun[index].effect3 - 1].Background = br;
                                    gridlist[6][gun[index].effect4 - 1].Background = br;
                                    gridlist[6][gun[index].effect5 - 1].Background = br;
                                    gridlist[6][gun[index].effect6 - 1].Background = br;
                                    gridlist[6][gun[index].effect7 - 1].Background = br;
                                    break;
                                }
                            default:
                                break;
                        }
                        break;
                    }
                case 7:
                    {
                        clearshowbuff(7, gun[index].grid_center);
                        buffGrids7.ToolTip = tbt;
                        switch (gun[index].number)
                        {
                            case 1:
                                {
                                    gridlist[7][gun[index].effect0 - 1].Background = br;
                                    break;
                                }
                            case 2:
                                {
                                    gridlist[7][gun[index].effect0 - 1].Background = br;
                                    gridlist[7][gun[index].effect1 - 1].Background = br;
                                    break;
                                }
                            case 3:
                                {
                                    gridlist[7][gun[index].effect0 - 1].Background = br;
                                    gridlist[7][gun[index].effect1 - 1].Background = br;
                                    gridlist[7][gun[index].effect2 - 1].Background = br;
                                    break;
                                }
                            case 4:
                                {
                                    gridlist[7][gun[index].effect0 - 1].Background = br;
                                    gridlist[7][gun[index].effect1 - 1].Background = br;
                                    gridlist[7][gun[index].effect2 - 1].Background = br;
                                    gridlist[7][gun[index].effect3 - 1].Background = br;
                                    break;
                                }
                            case 5:
                                {
                                    gridlist[7][gun[index].effect0 - 1].Background = br;
                                    gridlist[7][gun[index].effect1 - 1].Background = br;
                                    gridlist[7][gun[index].effect2 - 1].Background = br;
                                    gridlist[7][gun[index].effect3 - 1].Background = br;
                                    gridlist[7][gun[index].effect4 - 1].Background = br;
                                    break;
                                }
                            case 6:
                                {
                                    gridlist[7][gun[index].effect0 - 1].Background = br;
                                    gridlist[7][gun[index].effect1 - 1].Background = br;
                                    gridlist[7][gun[index].effect2 - 1].Background = br;
                                    gridlist[7][gun[index].effect3 - 1].Background = br;
                                    gridlist[7][gun[index].effect4 - 1].Background = br;
                                    gridlist[7][gun[index].effect5 - 1].Background = br;
                                    break;
                                }
                            case 7:
                                {
                                    gridlist[7][gun[index].effect0 - 1].Background = br;
                                    gridlist[7][gun[index].effect1 - 1].Background = br;
                                    gridlist[7][gun[index].effect2 - 1].Background = br;
                                    gridlist[7][gun[index].effect3 - 1].Background = br;
                                    gridlist[7][gun[index].effect4 - 1].Background = br;
                                    gridlist[7][gun[index].effect5 - 1].Background = br;
                                    gridlist[7][gun[index].effect6 - 1].Background = br;
                                    break;
                                }
                            case 8:
                                {
                                    gridlist[7][gun[index].effect0 - 1].Background = br;
                                    gridlist[7][gun[index].effect1 - 1].Background = br;
                                    gridlist[7][gun[index].effect2 - 1].Background = br;
                                    gridlist[7][gun[index].effect3 - 1].Background = br;
                                    gridlist[7][gun[index].effect4 - 1].Background = br;
                                    gridlist[7][gun[index].effect5 - 1].Background = br;
                                    gridlist[7][gun[index].effect6 - 1].Background = br;
                                    gridlist[7][gun[index].effect7 - 1].Background = br;
                                    break;
                                }
                            default:
                                break;
                        }
                        break;
                    }
                case 8:
                    {
                        clearshowbuff(8, gun[index].grid_center);
                        buffGrids8.ToolTip = tbt;
                        switch (gun[index].number)
                        {
                            case 1:
                                {
                                    gridlist[8][gun[index].effect0 - 1].Background = br;
                                    break;
                                }
                            case 2:
                                {
                                    gridlist[8][gun[index].effect0 - 1].Background = br;
                                    gridlist[8][gun[index].effect1 - 1].Background = br;
                                    break;
                                }
                            case 3:
                                {
                                    gridlist[8][gun[index].effect0 - 1].Background = br;
                                    gridlist[8][gun[index].effect1 - 1].Background = br;
                                    gridlist[8][gun[index].effect2 - 1].Background = br;
                                    break;
                                }
                            case 4:
                                {
                                    gridlist[8][gun[index].effect0 - 1].Background = br;
                                    gridlist[8][gun[index].effect1 - 1].Background = br;
                                    gridlist[8][gun[index].effect2 - 1].Background = br;
                                    gridlist[8][gun[index].effect3 - 1].Background = br;
                                    break;
                                }
                            case 5:
                                {
                                    gridlist[8][gun[index].effect0 - 1].Background = br;
                                    gridlist[8][gun[index].effect1 - 1].Background = br;
                                    gridlist[8][gun[index].effect2 - 1].Background = br;
                                    gridlist[8][gun[index].effect3 - 1].Background = br;
                                    gridlist[8][gun[index].effect4 - 1].Background = br;
                                    break;
                                }
                            case 6:
                                {
                                    gridlist[8][gun[index].effect0 - 1].Background = br;
                                    gridlist[8][gun[index].effect1 - 1].Background = br;
                                    gridlist[8][gun[index].effect2 - 1].Background = br;
                                    gridlist[8][gun[index].effect3 - 1].Background = br;
                                    gridlist[8][gun[index].effect4 - 1].Background = br;
                                    gridlist[8][gun[index].effect5 - 1].Background = br;
                                    break;
                                }
                            case 7:
                                {
                                    gridlist[8][gun[index].effect0 - 1].Background = br;
                                    gridlist[8][gun[index].effect1 - 1].Background = br;
                                    gridlist[8][gun[index].effect2 - 1].Background = br;
                                    gridlist[8][gun[index].effect3 - 1].Background = br;
                                    gridlist[8][gun[index].effect4 - 1].Background = br;
                                    gridlist[8][gun[index].effect5 - 1].Background = br;
                                    gridlist[8][gun[index].effect6 - 1].Background = br;
                                    break;
                                }
                            case 8:
                                {
                                    gridlist[8][gun[index].effect0 - 1].Background = br;
                                    gridlist[8][gun[index].effect1 - 1].Background = br;
                                    gridlist[8][gun[index].effect2 - 1].Background = br;
                                    gridlist[8][gun[index].effect3 - 1].Background = br;
                                    gridlist[8][gun[index].effect4 - 1].Background = br;
                                    gridlist[8][gun[index].effect5 - 1].Background = br;
                                    gridlist[8][gun[index].effect6 - 1].Background = br;
                                    gridlist[8][gun[index].effect7 - 1].Background = br;
                                    break;
                                }
                            default:
                                break;
                        }
                        break;
                    }
            }
        }

        private void clearshowbuff(int combo, int center)
        {
            Brush br = new SolidColorBrush(Color.FromRgb(255, 255, 255));
            Brush inner = new SolidColorBrush(Color.FromRgb(107, 105, 107));
            switch (combo)
            {
                case 0:
                    {
                        buffGrids0.ToolTip = "";
                        foreach (Border g in gridlist[0])
                        {
                            g.Background = br;
                        }
                        switch (center)
                        {
                            case 1: { buffGrid01.Background = inner; break; }
                            case 2: { buffGrid02.Background = inner; break; }
                            case 3: { buffGrid03.Background = inner; break; }
                            case 4: { buffGrid04.Background = inner; break; }
                            case 5: { buffGrid05.Background = inner; break; }
                            case 6: { buffGrid06.Background = inner; break; }
                            case 7: { buffGrid07.Background = inner; break; }
                            case 8: { buffGrid08.Background = inner; break; }
                            case 9: { buffGrid09.Background = inner; break; }
                        }
                        break;
                    }
                case 1:
                    {
                        buffGrids1.ToolTip = "";
                        foreach (Border g in gridlist[1])
                        {
                            g.Background = br;
                        }
                        switch (center)
                        {
                            case 1: { buffGrid11.Background = inner; break; }
                            case 2: { buffGrid12.Background = inner; break; }
                            case 3: { buffGrid13.Background = inner; break; }
                            case 4: { buffGrid14.Background = inner; break; }
                            case 5: { buffGrid15.Background = inner; break; }
                            case 6: { buffGrid16.Background = inner; break; }
                            case 7: { buffGrid17.Background = inner; break; }
                            case 8: { buffGrid18.Background = inner; break; }
                            case 9: { buffGrid19.Background = inner; break; }
                        }
                        break;
                    }
                case 2:
                    {
                        buffGrids2.ToolTip = "";
                        foreach (Border g in gridlist[2])
                        {
                            g.Background = br;
                        }
                        switch (center)
                        {
                            case 1: { buffGrid21.Background = inner; break; }
                            case 2: { buffGrid22.Background = inner; break; }
                            case 3: { buffGrid23.Background = inner; break; }
                            case 4: { buffGrid24.Background = inner; break; }
                            case 5: { buffGrid25.Background = inner; break; }
                            case 6: { buffGrid26.Background = inner; break; }
                            case 7: { buffGrid27.Background = inner; break; }
                            case 8: { buffGrid28.Background = inner; break; }
                            case 9: { buffGrid29.Background = inner; break; }
                        }
                        break;
                    }
                case 3:
                    {
                        buffGrids3.ToolTip = "";
                        foreach (Border g in gridlist[3])
                        {
                            g.Background = br;
                        }
                        switch (center)
                        {
                            case 1: { buffGrid31.Background = inner; break; }
                            case 2: { buffGrid32.Background = inner; break; }
                            case 3: { buffGrid33.Background = inner; break; }
                            case 4: { buffGrid34.Background = inner; break; }
                            case 5: { buffGrid35.Background = inner; break; }
                            case 6: { buffGrid36.Background = inner; break; }
                            case 7: { buffGrid37.Background = inner; break; }
                            case 8: { buffGrid38.Background = inner; break; }
                            case 9: { buffGrid39.Background = inner; break; }
                        }
                        break;
                    }
                case 4:
                    {
                        buffGrids4.ToolTip = "";
                        foreach (Border g in gridlist[4])
                        {
                            g.Background = br;
                        }
                        switch (center)
                        {
                            case 1: { buffGrid41.Background = inner; break; }
                            case 2: { buffGrid42.Background = inner; break; }
                            case 3: { buffGrid43.Background = inner; break; }
                            case 4: { buffGrid44.Background = inner; break; }
                            case 5: { buffGrid45.Background = inner; break; }
                            case 6: { buffGrid46.Background = inner; break; }
                            case 7: { buffGrid47.Background = inner; break; }
                            case 8: { buffGrid48.Background = inner; break; }
                            case 9: { buffGrid49.Background = inner; break; }
                        }
                        break;
                    }
                case 5:
                    {
                        buffGrids5.ToolTip = "";
                        foreach (Border g in gridlist[5])
                        {
                            g.Background = br;
                        }
                        switch (center)
                        {
                            case 1: { buffGrid51.Background = inner; break; }
                            case 2: { buffGrid52.Background = inner; break; }
                            case 3: { buffGrid53.Background = inner; break; }
                            case 4: { buffGrid54.Background = inner; break; }
                            case 5: { buffGrid55.Background = inner; break; }
                            case 6: { buffGrid56.Background = inner; break; }
                            case 7: { buffGrid57.Background = inner; break; }
                            case 8: { buffGrid58.Background = inner; break; }
                            case 9: { buffGrid59.Background = inner; break; }
                        }
                        break;
                    }
                case 6:
                    {
                        buffGrids6.ToolTip = "";
                        foreach (Border g in gridlist[6])
                        {
                            g.Background = br;
                        }
                        switch (center)
                        {
                            case 1: { buffGrid61.Background = inner; break; }
                            case 2: { buffGrid62.Background = inner; break; }
                            case 3: { buffGrid63.Background = inner; break; }
                            case 4: { buffGrid64.Background = inner; break; }
                            case 5: { buffGrid65.Background = inner; break; }
                            case 6: { buffGrid66.Background = inner; break; }
                            case 7: { buffGrid67.Background = inner; break; }
                            case 8: { buffGrid68.Background = inner; break; }
                            case 9: { buffGrid69.Background = inner; break; }
                        }
                        break;
                    }
                case 7:
                    {
                        buffGrids7.ToolTip = "";
                        foreach (Border g in gridlist[7])
                        {
                            g.Background = br;
                        }
                        switch (center)
                        {
                            case 1: { buffGrid71.Background = inner; break; }
                            case 2: { buffGrid72.Background = inner; break; }
                            case 3: { buffGrid73.Background = inner; break; }
                            case 4: { buffGrid74.Background = inner; break; }
                            case 5: { buffGrid75.Background = inner; break; }
                            case 6: { buffGrid76.Background = inner; break; }
                            case 7: { buffGrid77.Background = inner; break; }
                            case 8: { buffGrid78.Background = inner; break; }
                            case 9: { buffGrid79.Background = inner; break; }
                        }
                        break;
                    }
                case 8:
                    {
                        buffGrids8.ToolTip = "";
                        foreach (Border g in gridlist[8])
                        {
                            g.Background = br;
                        }
                        switch (center)
                        {
                            case 1: { buffGrid81.Background = inner; break; }
                            case 2: { buffGrid82.Background = inner; break; }
                            case 3: { buffGrid83.Background = inner; break; }
                            case 4: { buffGrid84.Background = inner; break; }
                            case 5: { buffGrid85.Background = inner; break; }
                            case 6: { buffGrid86.Background = inner; break; }
                            case 7: { buffGrid87.Background = inner; break; }
                            case 8: { buffGrid88.Background = inner; break; }
                            case 9: { buffGrid89.Background = inner; break; }
                        }
                        break;
                    }
            }
        }

        private void equiptb011_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb01.SelectedItem == null)
                return;
            clearequip(0);
            if (equipcb01.SelectedIndex >= 1)
            {
                string equipselect = equipcb01.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                calcequip(0, equipindex, equip[equipindex].down1 + equiptb011.SelectedIndex, 1);
                if (equiptb012.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb012.Text), 2);
                if (equiptb013.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb013.Text), 3);
            }
            if (equipcb02.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb02.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb021.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb021.Text), 1);
                if (equiptb022.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb022.Text), 2);
                if (equiptb023.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb023.Text), 3);
            }
            if (equipcb03.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb03.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb031.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb031.Text), 1);
                if (equiptb032.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb032.Text), 2);
                if (equiptb033.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb033.Text), 3);
            }
            renewskill();
        }
        private void equiptb012_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb01.SelectedItem == null)
                return;
            clearequip(0);
            if (equipcb01.SelectedIndex >= 1)
            {
                string equipselect = equipcb01.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb011.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb011.Text), 1);
                calcequip(0, equipindex, equip[equipindex].down2 + equiptb012.SelectedIndex, 2);
                if (equiptb013.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb013.Text), 3);
            }
            if (equipcb02.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb02.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb021.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb021.Text), 1);
                if (equiptb022.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb022.Text), 2);
                if (equiptb023.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb023.Text), 3);
            }
            if (equipcb03.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb03.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb031.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb031.Text), 1);
                if (equiptb032.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb032.Text), 2);
                if (equiptb033.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb033.Text), 3);
            }
            renewskill();
        }
        private void equiptb013_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb01.SelectedItem == null)
                return;
            clearequip(0);
            if (equipcb01.SelectedIndex >= 1)
            {
                string equipselect = equipcb01.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb011.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb011.Text), 1);
                if (equiptb012.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb012.Text), 2);
                calcequip(0, equipindex, equip[equipindex].down3 + equiptb013.SelectedIndex, 3);
            }
            if (equipcb02.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb02.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb021.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb021.Text), 1);
                if (equiptb022.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb022.Text), 2);
                if (equiptb023.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb023.Text), 3);
            }
            if (equipcb03.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb03.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb031.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb031.Text), 1);
                if (equiptb032.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb032.Text), 2);
                if (equiptb033.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb033.Text), 3);
            }
            renewskill();
        }
        private void equiptb021_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb02.SelectedItem == null)
                return;
            clearequip(0);
            if (equipcb01.SelectedIndex >= 1)
            {
                string equipselect = equipcb01.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb011.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb011.Text), 1);
                if (equiptb012.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb012.Text), 2);
                if (equiptb013.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb013.Text), 3);
            }
            if (equipcb02.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb02.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                calcequip(0, equipindex2, equip[equipindex2].down1 + equiptb021.SelectedIndex, 1);
                if (equiptb022.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb022.Text), 2);
                if (equiptb023.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb023.Text), 3);
            }
            if (equipcb03.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb03.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb031.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb031.Text), 1);
                if (equiptb032.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb032.Text), 2);
                if (equiptb033.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb033.Text), 3);
            }
            renewskill();
        }
        private void equiptb022_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb02.SelectedItem == null)
                return;
            clearequip(0);
            if (equipcb01.SelectedIndex >= 1)
            {
                string equipselect = equipcb01.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb011.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb011.Text), 1);
                if (equiptb012.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb012.Text), 2);
                if (equiptb013.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb013.Text), 3);
            }
            if (equipcb02.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb02.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb021.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb021.Text), 1);
                calcequip(0, equipindex2, equip[equipindex2].down2 + equiptb022.SelectedIndex, 2);
                if (equiptb023.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb023.Text), 3);
            }
            if (equipcb03.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb03.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb031.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb031.Text), 1);
                if (equiptb032.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb032.Text), 2);
                if (equiptb033.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb033.Text), 3);
            }
            renewskill();
        }
        private void equiptb023_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb02.SelectedItem == null)
                return;
            clearequip(0);
            if (equipcb01.SelectedIndex >= 1)
            {
                string equipselect = equipcb01.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb011.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb011.Text), 1);
                if (equiptb012.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb012.Text), 2);
                if (equiptb013.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb013.Text), 3);
            }
            if (equipcb02.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb02.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb021.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb021.Text), 1);
                if (equiptb022.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb022.Text), 2);
                calcequip(0, equipindex2, equip[equipindex2].down3 + equiptb023.SelectedIndex, 3);
            }
            if (equipcb03.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb03.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb031.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb031.Text), 1);
                if (equiptb032.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb032.Text), 2);
                if (equiptb033.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb033.Text), 3);
            }
            renewskill();
        }
        private void equiptb031_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb03.SelectedItem == null)
                return;
            clearequip(0);
            if (equipcb01.SelectedIndex >= 1)
            {
                string equipselect = equipcb01.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb011.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb011.Text), 1);
                if (equiptb012.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb012.Text), 2);
                if (equiptb013.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb013.Text), 3);
            }
            if (equipcb02.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb02.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb021.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb021.Text), 1);
                if (equiptb022.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb022.Text), 2);
                if (equiptb023.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb023.Text), 3);
            }
            if (equipcb03.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb03.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                calcequip(0, equipindex3, equip[equipindex3].down1 + equiptb031.SelectedIndex, 1);
                if (equiptb032.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb032.Text), 2);
                if (equiptb033.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb033.Text), 3);
            }
            renewskill();
        }
        private void equiptb032_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb03.SelectedItem == null)
                return;
            clearequip(0);
            if (equipcb01.SelectedIndex >= 1)
            {
                string equipselect = equipcb01.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb011.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb011.Text), 1);
                if (equiptb012.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb012.Text), 2);
                if (equiptb013.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb013.Text), 3);
            }
            if (equipcb02.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb02.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb021.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb021.Text), 1);
                if (equiptb022.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb022.Text), 2);
                if (equiptb023.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb023.Text), 3);
            }
            if (equipcb03.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb03.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb031.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb031.Text), 1);
                calcequip(0, equipindex3, equip[equipindex3].down2 + equiptb032.SelectedIndex, 2);
                if (equiptb033.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb033.Text), 3);
            }
            renewskill();
        }
        private void equiptb033_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb03.SelectedItem == null)
                return;
            clearequip(0);
            if (equipcb01.SelectedIndex >= 1)
            {
                string equipselect = equipcb01.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb011.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb011.Text), 1);
                if (equiptb012.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb012.Text), 2);
                if (equiptb013.Text != "")
                    calcequip(0, equipindex, double.Parse(equiptb013.Text), 3);
            }
            if (equipcb02.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb02.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb021.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb021.Text), 1);
                if (equiptb022.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb022.Text), 2);
                if (equiptb023.Text != "")
                    calcequip(0, equipindex2, double.Parse(equiptb023.Text), 3);
            }
            if (equipcb03.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb03.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb031.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb031.Text), 1);
                if (equiptb032.Text != "")
                    calcequip(0, equipindex3, double.Parse(equiptb032.Text), 2);
                calcequip(0, equipindex3, equip[equipindex3].down3 + equiptb033.SelectedIndex, 3);
            }
            renewskill();
        }
        private void equiptb111_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb11.SelectedItem == null)
                return;
            clearequip(1);
            if (equipcb11.SelectedIndex >= 1)
            {
                string equipselect = equipcb11.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                calcequip(1, equipindex, equip[equipindex].down1 + equiptb111.SelectedIndex, 1);
                if (equiptb112.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb112.Text), 2);
                if (equiptb113.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb113.Text), 3);
            }
            if (equipcb12.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb12.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb121.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb121.Text), 1);
                if (equiptb122.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb122.Text), 2);
                if (equiptb123.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb123.Text), 3);
            }
            if (equipcb13.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb13.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb131.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb131.Text), 1);
                if (equiptb132.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb132.Text), 2);
                if (equiptb133.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb133.Text), 3);
            }
            renewskill();
        }
        private void equiptb112_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb11.SelectedItem == null)
                return;
            clearequip(1);
            if (equipcb11.SelectedIndex >= 1)
            {
                string equipselect = equipcb11.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb111.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb111.Text), 1);
                calcequip(1, equipindex, equip[equipindex].down2 + equiptb112.SelectedIndex, 2);
                if (equiptb113.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb113.Text), 3);
            }
            if (equipcb12.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb12.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb121.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb121.Text), 1);
                if (equiptb122.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb122.Text), 2);
                if (equiptb123.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb123.Text), 3);
            }
            if (equipcb13.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb13.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb131.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb131.Text), 1);
                if (equiptb132.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb132.Text), 2);
                if (equiptb133.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb133.Text), 3);
            }
            renewskill();
        }
        private void equiptb113_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb11.SelectedItem == null)
                return;
            clearequip(1);
            if (equipcb11.SelectedIndex >= 1)
            {
                string equipselect = equipcb11.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb111.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb111.Text), 1);
                if (equiptb112.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb112.Text), 2);
                calcequip(1, equipindex, equip[equipindex].down3 + equiptb113.SelectedIndex, 3);
            }
            if (equipcb12.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb12.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb121.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb121.Text), 1);
                if (equiptb122.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb122.Text), 2);
                if (equiptb123.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb123.Text), 3);
            }
            if (equipcb13.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb13.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb131.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb131.Text), 1);
                if (equiptb132.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb132.Text), 2);
                if (equiptb133.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb133.Text), 3);
            }
            renewskill();
        }
        private void equiptb121_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb12.SelectedItem == null)
                return;
            clearequip(1);
            if (equipcb11.SelectedIndex >= 1)
            {
                string equipselect = equipcb11.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb111.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb111.Text), 1);
                if (equiptb112.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb112.Text), 2);
                if (equiptb113.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb113.Text), 3);
            }
            if (equipcb12.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb12.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                calcequip(1, equipindex2, equip[equipindex2].down1 + equiptb121.SelectedIndex, 1);
                if (equiptb122.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb122.Text), 2);
                if (equiptb123.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb123.Text), 3);
            }
            if (equipcb13.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb13.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb131.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb131.Text), 1);
                if (equiptb132.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb132.Text), 2);
                if (equiptb133.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb133.Text), 3);
            }
            renewskill();
        }
        private void equiptb122_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb12.SelectedItem == null)
                return;
            clearequip(1);
            if (equipcb11.SelectedIndex >= 1)
            {
                string equipselect = equipcb11.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb111.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb111.Text), 1);
                if (equiptb112.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb112.Text), 2);
                if (equiptb113.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb113.Text), 3);
            }
            if (equipcb12.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb12.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb121.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb121.Text), 1);
                calcequip(1, equipindex2, equip[equipindex2].down2 + equiptb122.SelectedIndex, 2);
                if (equiptb123.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb123.Text), 3);
            }
            if (equipcb13.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb13.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb131.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb131.Text), 1);
                if (equiptb132.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb132.Text), 2);
                if (equiptb133.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb133.Text), 3);
            }
            renewskill();
        }
        private void equiptb123_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb12.SelectedItem == null)
                return;
            clearequip(1);
            if (equipcb11.SelectedIndex >= 1)
            {
                string equipselect = equipcb11.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb111.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb111.Text), 1);
                if (equiptb112.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb112.Text), 2);
                if (equiptb113.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb113.Text), 3);
            }
            if (equipcb12.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb12.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb121.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb121.Text), 1);
                if (equiptb122.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb122.Text), 2);
                calcequip(1, equipindex2, equip[equipindex2].down3 + equiptb123.SelectedIndex, 3);
            }
            if (equipcb13.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb13.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb131.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb131.Text), 1);
                if (equiptb132.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb132.Text), 2);
                if (equiptb133.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb133.Text), 3);
            }
            renewskill();
        }
        private void equiptb131_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb13.SelectedItem == null)
                return;
            clearequip(1);
            if (equipcb11.SelectedIndex >= 1)
            {
                string equipselect = equipcb11.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb111.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb111.Text), 1);
                if (equiptb112.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb112.Text), 2);
                if (equiptb113.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb113.Text), 3);
            }
            if (equipcb12.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb12.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb121.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb121.Text), 1);
                if (equiptb122.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb122.Text), 2);
                if (equiptb123.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb123.Text), 3);
            }
            if (equipcb13.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb13.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                calcequip(1, equipindex3, equip[equipindex3].down1 + equiptb131.SelectedIndex, 1);
                if (equiptb132.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb132.Text), 2);
                if (equiptb133.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb133.Text), 3);
            }
            renewskill();
        }
        private void equiptb132_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb13.SelectedItem == null)
                return;
            clearequip(1);
            if (equipcb11.SelectedIndex >= 1)
            {
                string equipselect = equipcb11.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb111.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb111.Text), 1);
                if (equiptb112.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb112.Text), 2);
                if (equiptb113.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb113.Text), 3);
            }
            if (equipcb12.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb12.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb121.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb121.Text), 1);
                if (equiptb122.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb122.Text), 2);
                if (equiptb123.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb123.Text), 3);
            }
            if (equipcb13.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb13.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb131.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb131.Text), 1);
                calcequip(1, equipindex3, equip[equipindex3].down2 + equiptb132.SelectedIndex, 2);
                if (equiptb133.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb133.Text), 3);
            }
            renewskill();
        }
        private void equiptb133_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb13.SelectedItem == null)
                return;
            clearequip(1);
            if (equipcb11.SelectedIndex >= 1)
            {
                string equipselect = equipcb11.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb111.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb111.Text), 1);
                if (equiptb112.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb112.Text), 2);
                if (equiptb113.Text != "")
                    calcequip(1, equipindex, double.Parse(equiptb113.Text), 3);
            }
            if (equipcb12.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb12.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb121.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb121.Text), 1);
                if (equiptb122.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb122.Text), 2);
                if (equiptb123.Text != "")
                    calcequip(1, equipindex2, double.Parse(equiptb123.Text), 3);
            }
            if (equipcb13.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb13.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb131.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb131.Text), 1);
                if (equiptb132.Text != "")
                    calcequip(1, equipindex3, double.Parse(equiptb132.Text), 2);
                calcequip(1, equipindex3, equip[equipindex3].down3 + equiptb133.SelectedIndex, 3);
            }
            renewskill();
        }
        private void equiptb211_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb21.SelectedItem == null)
                return;
            clearequip(2);
            if (equipcb21.SelectedIndex >= 1)
            {
                string equipselect = equipcb21.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                calcequip(2, equipindex, equip[equipindex].down1 + equiptb211.SelectedIndex, 1);
                if (equiptb212.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb212.Text), 2);
                if (equiptb213.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb213.Text), 3);
            }
            if (equipcb22.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb22.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb221.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb221.Text), 1);
                if (equiptb222.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb222.Text), 2);
                if (equiptb223.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb223.Text), 3);
            }
            if (equipcb23.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb23.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb231.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb231.Text), 1);
                if (equiptb232.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb232.Text), 2);
                if (equiptb233.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb233.Text), 3);
            }
            renewskill();
        }
        private void equiptb212_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb21.SelectedItem == null)
                return;
            clearequip(2);
            if (equipcb21.SelectedIndex >= 1)
            {
                string equipselect = equipcb21.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb211.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb211.Text), 1);
                calcequip(2, equipindex, equip[equipindex].down2 + equiptb212.SelectedIndex, 2);
                if (equiptb213.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb213.Text), 3);
            }
            if (equipcb22.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb22.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb221.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb221.Text), 1);
                if (equiptb222.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb222.Text), 2);
                if (equiptb223.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb223.Text), 3);
            }
            if (equipcb23.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb23.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb231.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb231.Text), 1);
                if (equiptb232.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb232.Text), 2);
                if (equiptb233.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb233.Text), 3);
            }
            renewskill();
        }
        private void equiptb213_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb21.SelectedItem == null)
                return;
            clearequip(2);
            if (equipcb21.SelectedIndex >= 1)
            {
                string equipselect = equipcb21.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb211.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb211.Text), 1);
                if (equiptb212.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb212.Text), 2);
                calcequip(2, equipindex, equip[equipindex].down3 + equiptb213.SelectedIndex, 3);
            }
            if (equipcb22.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb22.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb221.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb221.Text), 1);
                if (equiptb222.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb222.Text), 2);
                if (equiptb223.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb223.Text), 3);
            }
            if (equipcb23.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb23.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb231.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb231.Text), 1);
                if (equiptb232.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb232.Text), 2);
                if (equiptb233.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb233.Text), 3);
            }
            renewskill();
        }
        private void equiptb221_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb22.SelectedItem == null)
                return;
            clearequip(2);
            if (equipcb21.SelectedIndex >= 1)
            {
                string equipselect = equipcb21.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb211.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb211.Text), 1);
                if (equiptb212.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb212.Text), 2);
                if (equiptb213.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb213.Text), 3);
            }
            if (equipcb22.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb22.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                calcequip(2, equipindex2, equip[equipindex2].down1 + equiptb221.SelectedIndex, 1);
                if (equiptb222.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb222.Text), 2);
                if (equiptb223.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb223.Text), 3);
            }
            if (equipcb23.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb23.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb231.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb231.Text), 1);
                if (equiptb232.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb232.Text), 2);
                if (equiptb233.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb233.Text), 3);
            }
            renewskill();
        }
        private void equiptb222_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb22.SelectedItem == null)
                return;
            clearequip(2);
            if (equipcb21.SelectedIndex >= 1)
            {
                string equipselect = equipcb21.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb211.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb211.Text), 1);
                if (equiptb212.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb212.Text), 2);
                if (equiptb213.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb213.Text), 3);
            }
            if (equipcb22.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb22.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb221.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb221.Text), 1);
                calcequip(2, equipindex2, equip[equipindex2].down2 + equiptb222.SelectedIndex, 2);
                if (equiptb223.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb223.Text), 3);
            }
            if (equipcb23.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb23.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb231.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb231.Text), 1);
                if (equiptb232.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb232.Text), 2);
                if (equiptb233.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb233.Text), 3);
            }
            renewskill();
        }
        private void equiptb223_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb22.SelectedItem == null)
                return;
            clearequip(2);
            if (equipcb21.SelectedIndex >= 1)
            {
                string equipselect = equipcb21.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb211.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb211.Text), 1);
                if (equiptb212.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb212.Text), 2);
                if (equiptb213.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb213.Text), 3);
            }
            if (equipcb22.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb22.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb221.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb221.Text), 1);
                if (equiptb222.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb222.Text), 2);
                calcequip(2, equipindex2, equip[equipindex2].down3 + equiptb223.SelectedIndex, 3);
            }
            if (equipcb23.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb23.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb231.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb231.Text), 1);
                if (equiptb232.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb232.Text), 2);
                if (equiptb233.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb233.Text), 3);
            }
            renewskill();
        }
        private void equiptb231_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb23.SelectedItem == null)
                return;
            clearequip(2);
            if (equipcb21.SelectedIndex >= 1)
            {
                string equipselect = equipcb21.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb211.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb211.Text), 1);
                if (equiptb212.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb212.Text), 2);
                if (equiptb213.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb213.Text), 3);
            }
            if (equipcb22.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb22.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb221.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb221.Text), 1);
                if (equiptb222.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb222.Text), 2);
                if (equiptb223.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb223.Text), 3);
            }
            if (equipcb23.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb23.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                calcequip(2, equipindex3, equip[equipindex3].down1 + equiptb231.SelectedIndex, 1);
                if (equiptb232.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb232.Text), 2);
                if (equiptb233.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb233.Text), 3);
            }
            renewskill();
        }
        private void equiptb232_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb23.SelectedItem == null)
                return;
            clearequip(2);
            if (equipcb21.SelectedIndex >= 1)
            {
                string equipselect = equipcb21.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb211.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb211.Text), 1);
                if (equiptb212.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb212.Text), 2);
                if (equiptb213.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb213.Text), 3);
            }
            if (equipcb22.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb22.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb221.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb221.Text), 1);
                if (equiptb222.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb222.Text), 2);
                if (equiptb223.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb223.Text), 3);
            }
            if (equipcb23.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb23.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb231.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb231.Text), 1);
                calcequip(2, equipindex3, equip[equipindex3].down2 + equiptb232.SelectedIndex, 2);
                if (equiptb233.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb233.Text), 3);
            }
            renewskill();
        }
        private void equiptb233_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb23.SelectedItem == null)
                return;
            clearequip(2);
            if (equipcb21.SelectedIndex >= 1)
            {
                string equipselect = equipcb21.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb211.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb211.Text), 1);
                if (equiptb212.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb212.Text), 2);
                if (equiptb213.Text != "")
                    calcequip(2, equipindex, double.Parse(equiptb213.Text), 3);
            }
            if (equipcb22.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb22.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb221.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb221.Text), 1);
                if (equiptb222.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb222.Text), 2);
                if (equiptb223.Text != "")
                    calcequip(2, equipindex2, double.Parse(equiptb223.Text), 3);
            }
            if (equipcb23.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb23.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb231.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb231.Text), 1);
                if (equiptb232.Text != "")
                    calcequip(2, equipindex3, double.Parse(equiptb232.Text), 2);
                calcequip(2, equipindex3, equip[equipindex3].down3 + equiptb233.SelectedIndex, 3);
            }
            renewskill();
        }
        private void equiptb311_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb31.SelectedItem == null)
                return;
            clearequip(3);
            if (equipcb31.SelectedIndex >= 1)
            {
                string equipselect = equipcb31.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                calcequip(3, equipindex, equip[equipindex].down1 + equiptb311.SelectedIndex, 1);
                if (equiptb312.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb312.Text), 2);
                if (equiptb313.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb313.Text), 3);
            }
            if (equipcb32.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb32.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb321.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb321.Text), 1);
                if (equiptb322.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb322.Text), 2);
                if (equiptb323.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb323.Text), 3);
            }
            if (equipcb33.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb33.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb331.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb331.Text), 1);
                if (equiptb332.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb332.Text), 2);
                if (equiptb333.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb333.Text), 3);
            }
            renewskill();
        }
        private void equiptb312_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb31.SelectedItem == null)
                return;
            clearequip(3);
            if (equipcb31.SelectedIndex >= 1)
            {
                string equipselect = equipcb31.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb311.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb311.Text), 1);
                calcequip(3, equipindex, equip[equipindex].down2 + equiptb312.SelectedIndex, 2);
                if (equiptb313.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb313.Text), 3);
            }
            if (equipcb32.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb32.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb321.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb321.Text), 1);
                if (equiptb322.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb322.Text), 2);
                if (equiptb323.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb323.Text), 3);
            }
            if (equipcb33.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb33.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb331.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb331.Text), 1);
                if (equiptb332.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb332.Text), 2);
                if (equiptb333.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb333.Text), 3);
            }
            renewskill();
        }
        private void equiptb313_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb31.SelectedItem == null)
                return;
            clearequip(3);
            if (equipcb31.SelectedIndex >= 1)
            {
                string equipselect = equipcb31.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb311.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb311.Text), 1);
                if (equiptb312.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb312.Text), 2);
                calcequip(3, equipindex, equip[equipindex].down3 + equiptb313.SelectedIndex, 3);
            }
            if (equipcb32.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb32.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb321.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb321.Text), 1);
                if (equiptb322.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb322.Text), 2);
                if (equiptb323.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb323.Text), 3);
            }
            if (equipcb33.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb33.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb331.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb331.Text), 1);
                if (equiptb332.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb332.Text), 2);
                if (equiptb333.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb333.Text), 3);
            }
            renewskill();
        }
        private void equiptb321_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb32.SelectedItem == null)
                return;
            clearequip(3);
            if (equipcb31.SelectedIndex >= 1)
            {
                string equipselect = equipcb31.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb311.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb311.Text), 1);
                if (equiptb312.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb312.Text), 2);
                if (equiptb313.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb313.Text), 3);
            }
            if (equipcb32.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb32.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                calcequip(3, equipindex2, equip[equipindex2].down1 + equiptb321.SelectedIndex, 1);
                if (equiptb322.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb322.Text), 2);
                if (equiptb323.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb323.Text), 3);
            }
            if (equipcb33.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb33.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb331.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb331.Text), 1);
                if (equiptb332.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb332.Text), 2);
                if (equiptb333.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb333.Text), 3);
            }
            renewskill();
        }
        private void equiptb322_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb32.SelectedItem == null)
                return;
            clearequip(3);
            if (equipcb31.SelectedIndex >= 1)
            {
                string equipselect = equipcb31.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb311.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb311.Text), 1);
                if (equiptb312.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb312.Text), 2);
                if (equiptb313.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb313.Text), 3);
            }
            if (equipcb32.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb32.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb321.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb321.Text), 1);
                calcequip(3, equipindex2, equip[equipindex2].down2 + equiptb322.SelectedIndex, 2);
                if (equiptb323.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb323.Text), 3);
            }
            if (equipcb33.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb33.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb331.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb331.Text), 1);
                if (equiptb332.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb332.Text), 2);
                if (equiptb333.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb333.Text), 3);
            }
            renewskill();
        }
        private void equiptb323_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb32.SelectedItem == null)
                return;
            clearequip(3);
            if (equipcb31.SelectedIndex >= 1)
            {
                string equipselect = equipcb31.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb311.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb311.Text), 1);
                if (equiptb312.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb312.Text), 2);
                if (equiptb313.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb313.Text), 3);
            }
            if (equipcb32.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb32.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb321.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb321.Text), 1);
                if (equiptb322.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb322.Text), 2);
                calcequip(3, equipindex2, equip[equipindex2].down3 + equiptb323.SelectedIndex, 3);
            }
            if (equipcb33.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb33.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb331.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb331.Text), 1);
                if (equiptb332.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb332.Text), 2);
                if (equiptb333.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb333.Text), 3);
            }
            renewskill();
        }
        private void equiptb331_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb33.SelectedItem == null)
                return;
            clearequip(3);
            if (equipcb31.SelectedIndex >= 1)
            {
                string equipselect = equipcb31.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb311.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb311.Text), 1);
                if (equiptb312.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb312.Text), 2);
                if (equiptb313.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb313.Text), 3);
            }
            if (equipcb32.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb32.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb321.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb321.Text), 1);
                if (equiptb322.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb322.Text), 2);
                if (equiptb323.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb323.Text), 3);
            }
            if (equipcb33.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb33.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                calcequip(3, equipindex3, equip[equipindex3].down1 + equiptb331.SelectedIndex, 1);
                if (equiptb332.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb332.Text), 2);
                if (equiptb333.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb333.Text), 3);
            }
            renewskill();
        }
        private void equiptb332_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb33.SelectedItem == null)
                return;
            clearequip(3);
            if (equipcb31.SelectedIndex >= 1)
            {
                string equipselect = equipcb31.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb311.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb311.Text), 1);
                if (equiptb312.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb312.Text), 2);
                if (equiptb313.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb313.Text), 3);
            }
            if (equipcb32.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb32.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb321.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb321.Text), 1);
                if (equiptb322.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb322.Text), 2);
                if (equiptb323.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb323.Text), 3);
            }
            if (equipcb33.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb33.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb331.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb331.Text), 1);
                calcequip(3, equipindex3, equip[equipindex3].down2 + equiptb332.SelectedIndex, 2);
                if (equiptb333.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb333.Text), 3);
            }
            renewskill();
        }
        private void equiptb333_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb33.SelectedItem == null)
                return;
            clearequip(3);
            if (equipcb31.SelectedIndex >= 1)
            {
                string equipselect = equipcb31.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb311.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb311.Text), 1);
                if (equiptb312.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb312.Text), 2);
                if (equiptb313.Text != "")
                    calcequip(3, equipindex, double.Parse(equiptb313.Text), 3);
            }
            if (equipcb32.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb32.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb321.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb321.Text), 1);
                if (equiptb322.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb322.Text), 2);
                if (equiptb323.Text != "")
                    calcequip(3, equipindex2, double.Parse(equiptb323.Text), 3);
            }
            if (equipcb33.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb33.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb331.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb331.Text), 1);
                if (equiptb332.Text != "")
                    calcequip(3, equipindex3, double.Parse(equiptb332.Text), 2);
                calcequip(3, equipindex3, equip[equipindex3].down3 + equiptb333.SelectedIndex, 3);
            }
            renewskill();
        }
        private void equiptb411_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb41.SelectedItem == null)
                return;
            clearequip(4);
            if (equipcb41.SelectedIndex >= 1)
            {
                string equipselect = equipcb41.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                calcequip(4, equipindex, equip[equipindex].down1 + equiptb411.SelectedIndex, 1);
                if (equiptb412.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb412.Text), 2);
                if (equiptb413.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb413.Text), 3);
            }
            if (equipcb42.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb42.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb421.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb421.Text), 1);
                if (equiptb422.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb422.Text), 2);
                if (equiptb423.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb423.Text), 3);
            }
            if (equipcb43.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb43.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb431.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb431.Text), 1);
                if (equiptb432.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb432.Text), 2);
                if (equiptb433.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb433.Text), 3);
            }
            renewskill();
        }
        private void equiptb412_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb41.SelectedItem == null)
                return;
            clearequip(4);
            if (equipcb41.SelectedIndex >= 1)
            {
                string equipselect = equipcb41.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb411.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb411.Text), 1);
                calcequip(4, equipindex, equip[equipindex].down2 + equiptb412.SelectedIndex, 2);
                if (equiptb413.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb413.Text), 3);
            }
            if (equipcb42.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb42.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb421.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb421.Text), 1);
                if (equiptb422.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb422.Text), 2);
                if (equiptb423.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb423.Text), 3);
            }
            if (equipcb43.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb43.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb431.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb431.Text), 1);
                if (equiptb432.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb432.Text), 2);
                if (equiptb433.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb433.Text), 3);
            }
            renewskill();
        }
        private void equiptb413_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb41.SelectedItem == null)
                return;
            clearequip(4);
            if (equipcb41.SelectedIndex >= 1)
            {
                string equipselect = equipcb41.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb411.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb411.Text), 1);
                if (equiptb412.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb412.Text), 2);
                calcequip(4, equipindex, equip[equipindex].down3 + equiptb413.SelectedIndex, 3);
            }
            if (equipcb42.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb42.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb421.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb421.Text), 1);
                if (equiptb422.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb422.Text), 2);
                if (equiptb423.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb423.Text), 3);
            }
            if (equipcb43.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb43.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb431.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb431.Text), 1);
                if (equiptb432.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb432.Text), 2);
                if (equiptb433.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb433.Text), 3);
            }
            renewskill();
        }
        private void equiptb421_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb42.SelectedItem == null)
                return;
            clearequip(4);
            if (equipcb41.SelectedIndex >= 1)
            {
                string equipselect = equipcb41.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb411.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb411.Text), 1);
                if (equiptb412.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb412.Text), 2);
                if (equiptb413.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb413.Text), 3);
            }
            if (equipcb42.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb42.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                calcequip(4, equipindex2, equip[equipindex2].down1 + equiptb421.SelectedIndex, 1);
                if (equiptb422.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb422.Text), 2);
                if (equiptb423.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb423.Text), 3);
            }
            if (equipcb43.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb43.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb431.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb431.Text), 1);
                if (equiptb432.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb432.Text), 2);
                if (equiptb433.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb433.Text), 3);
            }
            renewskill();
        }
        private void equiptb422_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb42.SelectedItem == null)
                return;
            clearequip(4);
            if (equipcb41.SelectedIndex >= 1)
            {
                string equipselect = equipcb41.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb411.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb411.Text), 1);
                if (equiptb412.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb412.Text), 2);
                if (equiptb413.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb413.Text), 3);
            }
            if (equipcb42.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb42.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb421.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb421.Text), 1);
                calcequip(4, equipindex2, equip[equipindex2].down2 + equiptb422.SelectedIndex, 2);
                if (equiptb423.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb423.Text), 3);
            }
            if (equipcb43.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb43.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb431.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb431.Text), 1);
                if (equiptb432.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb432.Text), 2);
                if (equiptb433.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb433.Text), 3);
            }
            renewskill();
        }
        private void equiptb423_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb42.SelectedItem == null)
                return;
            clearequip(4);
            if (equipcb41.SelectedIndex >= 1)
            {
                string equipselect = equipcb41.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb411.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb411.Text), 1);
                if (equiptb412.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb412.Text), 2);
                if (equiptb413.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb413.Text), 3);
            }
            if (equipcb42.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb42.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb421.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb421.Text), 1);
                if (equiptb422.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb422.Text), 2);
                calcequip(4, equipindex2, equip[equipindex2].down3 + equiptb423.SelectedIndex, 3);
            }
            if (equipcb43.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb43.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb431.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb431.Text), 1);
                if (equiptb432.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb432.Text), 2);
                if (equiptb433.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb433.Text), 3);
            }
            renewskill();
        }
        private void equiptb431_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb43.SelectedItem == null)
                return;
            clearequip(4);
            if (equipcb41.SelectedIndex >= 1)
            {
                string equipselect = equipcb41.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb411.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb411.Text), 1);
                if (equiptb412.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb412.Text), 2);
                if (equiptb413.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb413.Text), 3);
            }
            if (equipcb42.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb42.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb421.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb421.Text), 1);
                if (equiptb422.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb422.Text), 2);
                if (equiptb423.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb423.Text), 3);
            }
            if (equipcb43.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb43.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                calcequip(4, equipindex3, equip[equipindex3].down1 + equiptb431.SelectedIndex, 1);
                if (equiptb432.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb432.Text), 2);
                if (equiptb433.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb433.Text), 3);
            }
            renewskill();
        }
        private void equiptb432_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb43.SelectedItem == null)
                return;
            clearequip(4);
            if (equipcb41.SelectedIndex >= 1)
            {
                string equipselect = equipcb41.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb411.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb411.Text), 1);
                if (equiptb412.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb412.Text), 2);
                if (equiptb413.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb413.Text), 3);
            }
            if (equipcb42.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb42.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb421.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb421.Text), 1);
                if (equiptb422.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb422.Text), 2);
                if (equiptb423.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb423.Text), 3);
            }
            if (equipcb43.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb43.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb431.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb431.Text), 1);
                calcequip(4, equipindex3, equip[equipindex3].down2 + equiptb432.SelectedIndex, 2);
                if (equiptb433.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb433.Text), 3);
            }
            renewskill();
        }
        private void equiptb433_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb43.SelectedItem == null)
                return;
            clearequip(4);
            if (equipcb41.SelectedIndex >= 1)
            {
                string equipselect = equipcb41.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb411.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb411.Text), 1);
                if (equiptb412.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb412.Text), 2);
                if (equiptb413.Text != "")
                    calcequip(4, equipindex, double.Parse(equiptb413.Text), 3);
            }
            if (equipcb42.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb42.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb421.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb421.Text), 1);
                if (equiptb422.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb422.Text), 2);
                if (equiptb423.Text != "")
                    calcequip(4, equipindex2, double.Parse(equiptb423.Text), 3);
            }
            if (equipcb43.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb43.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb431.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb431.Text), 1);
                if (equiptb432.Text != "")
                    calcequip(4, equipindex3, double.Parse(equiptb432.Text), 2);
                calcequip(4, equipindex3, equip[equipindex3].down3 + equiptb433.SelectedIndex, 3);
            }
            renewskill();
        }
        private void equiptb511_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb51.SelectedItem == null)
                return;
            clearequip(5);
            if (equipcb51.SelectedIndex >= 1)
            {
                string equipselect = equipcb51.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                calcequip(5, equipindex, equip[equipindex].down1 + equiptb511.SelectedIndex, 1);
                if (equiptb512.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb512.Text), 2);
                if (equiptb513.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb513.Text), 3);
            }
            if (equipcb52.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb52.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb521.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb521.Text), 1);
                if (equiptb522.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb522.Text), 2);
                if (equiptb523.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb523.Text), 3);
            }
            if (equipcb53.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb53.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb531.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb531.Text), 1);
                if (equiptb532.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb532.Text), 2);
                if (equiptb533.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb533.Text), 3);
            }
            renewskill();
        }
        private void equiptb512_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb51.SelectedItem == null)
                return;
            clearequip(5);
            if (equipcb51.SelectedIndex >= 1)
            {
                string equipselect = equipcb51.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb511.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb511.Text), 1);
                calcequip(5, equipindex, equip[equipindex].down2 + equiptb512.SelectedIndex, 2);
                if (equiptb513.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb513.Text), 3);
            }
            if (equipcb52.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb52.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb521.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb521.Text), 1);
                if (equiptb522.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb522.Text), 2);
                if (equiptb523.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb523.Text), 3);
            }
            if (equipcb53.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb53.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb531.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb531.Text), 1);
                if (equiptb532.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb532.Text), 2);
                if (equiptb533.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb533.Text), 3);
            }
            renewskill();
        }
        private void equiptb513_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb51.SelectedItem == null)
                return;
            clearequip(5);
            if (equipcb51.SelectedIndex >= 1)
            {
                string equipselect = equipcb51.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb511.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb511.Text), 1);
                if (equiptb512.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb512.Text), 2);
                calcequip(5, equipindex, equip[equipindex].down3 + equiptb513.SelectedIndex, 3);
            }
            if (equipcb52.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb52.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb521.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb521.Text), 1);
                if (equiptb522.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb522.Text), 2);
                if (equiptb523.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb523.Text), 3);
            }
            if (equipcb53.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb53.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb531.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb531.Text), 1);
                if (equiptb532.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb532.Text), 2);
                if (equiptb533.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb533.Text), 3);
            }
            renewskill();
        }
        private void equiptb521_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb52.SelectedItem == null)
                return;
            clearequip(5);
            if (equipcb51.SelectedIndex >= 1)
            {
                string equipselect = equipcb51.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb511.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb511.Text), 1);
                if (equiptb512.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb512.Text), 2);
                if (equiptb513.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb513.Text), 3);
            }
            if (equipcb52.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb52.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                calcequip(5, equipindex2, equip[equipindex2].down1 + equiptb521.SelectedIndex, 1);
                if (equiptb522.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb522.Text), 2);
                if (equiptb523.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb523.Text), 3);
            }
            if (equipcb53.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb53.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb531.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb531.Text), 1);
                if (equiptb532.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb532.Text), 2);
                if (equiptb533.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb533.Text), 3);
            }
            renewskill();
        }
        private void equiptb522_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb52.SelectedItem == null)
                return;
            clearequip(5);
            if (equipcb51.SelectedIndex >= 1)
            {
                string equipselect = equipcb51.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb511.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb511.Text), 1);
                if (equiptb512.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb512.Text), 2);
                if (equiptb513.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb513.Text), 3);
            }
            if (equipcb52.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb52.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb521.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb521.Text), 1);
                calcequip(5, equipindex2, equip[equipindex2].down2 + equiptb522.SelectedIndex, 2);
                if (equiptb523.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb523.Text), 3);
            }
            if (equipcb53.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb53.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb531.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb531.Text), 1);
                if (equiptb532.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb532.Text), 2);
                if (equiptb533.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb533.Text), 3);
            }
            renewskill();
        }
        private void equiptb523_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb52.SelectedItem == null)
                return;
            clearequip(5);
            if (equipcb51.SelectedIndex >= 1)
            {
                string equipselect = equipcb51.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb511.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb511.Text), 1);
                if (equiptb512.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb512.Text), 2);
                if (equiptb513.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb513.Text), 3);
            }
            if (equipcb52.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb52.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb521.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb521.Text), 1);
                if (equiptb522.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb522.Text), 2);
                calcequip(5, equipindex2, equip[equipindex2].down3 + equiptb523.SelectedIndex, 3);
            }
            if (equipcb53.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb53.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb531.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb531.Text), 1);
                if (equiptb532.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb532.Text), 2);
                if (equiptb533.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb533.Text), 3);
            }
            renewskill();
        }
        private void equiptb531_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb53.SelectedItem == null)
                return;
            clearequip(5);
            if (equipcb51.SelectedIndex >= 1)
            {
                string equipselect = equipcb51.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb511.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb511.Text), 1);
                if (equiptb512.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb512.Text), 2);
                if (equiptb513.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb513.Text), 3);
            }
            if (equipcb52.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb52.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb521.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb521.Text), 1);
                if (equiptb522.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb522.Text), 2);
                if (equiptb523.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb523.Text), 3);
            }
            if (equipcb53.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb53.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                calcequip(5, equipindex3, equip[equipindex3].down1 + equiptb531.SelectedIndex, 1);
                if (equiptb532.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb532.Text), 2);
                if (equiptb533.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb533.Text), 3);
            }
            renewskill();
        }
        private void equiptb532_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb53.SelectedItem == null)
                return;
            clearequip(5);
            if (equipcb51.SelectedIndex >= 1)
            {
                string equipselect = equipcb51.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb511.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb511.Text), 1);
                if (equiptb512.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb512.Text), 2);
                if (equiptb513.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb513.Text), 3);
            }
            if (equipcb52.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb52.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb521.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb521.Text), 1);
                if (equiptb522.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb522.Text), 2);
                if (equiptb523.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb523.Text), 3);
            }
            if (equipcb53.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb53.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb531.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb531.Text), 1);
                calcequip(5, equipindex3, equip[equipindex3].down2 + equiptb532.SelectedIndex, 2);
                if (equiptb533.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb533.Text), 3);
            }
            renewskill();
        }
        private void equiptb533_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb53.SelectedItem == null)
                return;
            clearequip(5);
            if (equipcb51.SelectedIndex >= 1)
            {
                string equipselect = equipcb51.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb511.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb511.Text), 1);
                if (equiptb512.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb512.Text), 2);
                if (equiptb513.Text != "")
                    calcequip(5, equipindex, double.Parse(equiptb513.Text), 3);
            }
            if (equipcb52.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb52.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb521.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb521.Text), 1);
                if (equiptb522.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb522.Text), 2);
                if (equiptb523.Text != "")
                    calcequip(5, equipindex2, double.Parse(equiptb523.Text), 3);
            }
            if (equipcb53.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb53.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb531.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb531.Text), 1);
                if (equiptb532.Text != "")
                    calcequip(5, equipindex3, double.Parse(equiptb532.Text), 2);
                calcequip(5, equipindex3, equip[equipindex3].down3 + equiptb533.SelectedIndex, 3);
            }
            renewskill();
        }
        private void equiptb611_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb61.SelectedItem == null)
                return;
            clearequip(6);
            if (equipcb61.SelectedIndex >= 1)
            {
                string equipselect = equipcb61.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                calcequip(6, equipindex, equip[equipindex].down1 + equiptb611.SelectedIndex, 1);
                if (equiptb612.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb612.Text), 2);
                if (equiptb613.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb613.Text), 3);
            }
            if (equipcb62.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb62.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb621.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb621.Text), 1);
                if (equiptb622.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb622.Text), 2);
                if (equiptb623.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb623.Text), 3);
            }
            if (equipcb63.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb63.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb631.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb631.Text), 1);
                if (equiptb632.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb632.Text), 2);
                if (equiptb633.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb633.Text), 3);
            }
            renewskill();
        }
        private void equiptb612_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb61.SelectedItem == null)
                return;
            clearequip(6);
            if (equipcb61.SelectedIndex >= 1)
            {
                string equipselect = equipcb61.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb611.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb611.Text), 1);
                calcequip(6, equipindex, equip[equipindex].down2 + equiptb612.SelectedIndex, 2);
                if (equiptb613.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb613.Text), 3);
            }
            if (equipcb62.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb62.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb621.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb621.Text), 1);
                if (equiptb622.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb622.Text), 2);
                if (equiptb623.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb623.Text), 3);
            }
            if (equipcb63.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb63.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb631.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb631.Text), 1);
                if (equiptb632.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb632.Text), 2);
                if (equiptb633.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb633.Text), 3);
            }
            renewskill();
        }
        private void equiptb613_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb61.SelectedItem == null)
                return;
            clearequip(6);
            if (equipcb61.SelectedIndex >= 1)
            {
                string equipselect = equipcb61.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb611.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb611.Text), 1);
                if (equiptb612.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb612.Text), 2);
                calcequip(6, equipindex, equip[equipindex].down3 + equiptb613.SelectedIndex, 3);
            }
            if (equipcb62.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb62.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb621.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb621.Text), 1);
                if (equiptb622.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb622.Text), 2);
                if (equiptb623.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb623.Text), 3);
            }
            if (equipcb63.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb63.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb631.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb631.Text), 1);
                if (equiptb632.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb632.Text), 2);
                if (equiptb633.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb633.Text), 3);
            }
            renewskill();
        }
        private void equiptb621_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb62.SelectedItem == null)
                return;
            clearequip(6);
            if (equipcb61.SelectedIndex >= 1)
            {
                string equipselect = equipcb61.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb611.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb611.Text), 1);
                if (equiptb612.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb612.Text), 2);
                if (equiptb613.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb613.Text), 3);
            }
            if (equipcb62.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb62.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                calcequip(6, equipindex2, equip[equipindex2].down1 + equiptb621.SelectedIndex, 1);
                if (equiptb622.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb622.Text), 2);
                if (equiptb623.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb623.Text), 3);
            }
            if (equipcb63.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb63.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb631.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb631.Text), 1);
                if (equiptb632.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb632.Text), 2);
                if (equiptb633.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb633.Text), 3);
            }
            renewskill();
        }
        private void equiptb622_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb62.SelectedItem == null)
                return;
            clearequip(6);
            if (equipcb61.SelectedIndex >= 1)
            {
                string equipselect = equipcb61.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb611.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb611.Text), 1);
                if (equiptb612.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb612.Text), 2);
                if (equiptb613.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb613.Text), 3);
            }
            if (equipcb62.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb62.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb621.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb621.Text), 1);
                calcequip(6, equipindex2, equip[equipindex2].down2 + equiptb622.SelectedIndex, 2);
                if (equiptb623.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb623.Text), 3);
            }
            if (equipcb63.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb63.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb631.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb631.Text), 1);
                if (equiptb632.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb632.Text), 2);
                if (equiptb633.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb633.Text), 3);
            }
            renewskill();
        }
        private void equiptb623_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb62.SelectedItem == null)
                return;
            clearequip(6);
            if (equipcb61.SelectedIndex >= 1)
            {
                string equipselect = equipcb61.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb611.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb611.Text), 1);
                if (equiptb612.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb612.Text), 2);
                if (equiptb613.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb613.Text), 3);
            }
            if (equipcb62.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb62.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb621.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb621.Text), 1);
                if (equiptb622.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb622.Text), 2);
                calcequip(6, equipindex2, equip[equipindex2].down3 + equiptb623.SelectedIndex, 3);
            }
            if (equipcb63.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb63.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb631.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb631.Text), 1);
                if (equiptb632.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb632.Text), 2);
                if (equiptb633.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb633.Text), 3);
            }
            renewskill();
        }
        private void equiptb631_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb63.SelectedItem == null)
                return;
            clearequip(6);
            if (equipcb61.SelectedIndex >= 1)
            {
                string equipselect = equipcb61.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb611.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb611.Text), 1);
                if (equiptb612.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb612.Text), 2);
                if (equiptb613.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb613.Text), 3);
            }
            if (equipcb62.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb62.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb621.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb621.Text), 1);
                if (equiptb622.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb622.Text), 2);
                if (equiptb623.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb623.Text), 3);
            }
            if (equipcb63.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb63.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                calcequip(6, equipindex3, equip[equipindex3].down1 + equiptb631.SelectedIndex, 1);
                if (equiptb632.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb632.Text), 2);
                if (equiptb633.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb633.Text), 3);
            }
            renewskill();
        }
        private void equiptb632_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb63.SelectedItem == null)
                return;
            clearequip(6);
            if (equipcb61.SelectedIndex >= 1)
            {
                string equipselect = equipcb61.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb611.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb611.Text), 1);
                if (equiptb612.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb612.Text), 2);
                if (equiptb613.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb613.Text), 3);
            }
            if (equipcb62.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb62.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb621.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb621.Text), 1);
                if (equiptb622.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb622.Text), 2);
                if (equiptb623.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb623.Text), 3);
            }
            if (equipcb63.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb63.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb631.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb631.Text), 1);
                calcequip(6, equipindex3, equip[equipindex3].down2 + equiptb632.SelectedIndex, 2);
                if (equiptb633.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb633.Text), 3);
            }
            renewskill();
        }
        private void equiptb633_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb63.SelectedItem == null)
                return;
            clearequip(6);
            if (equipcb61.SelectedIndex >= 1)
            {
                string equipselect = equipcb61.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb611.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb611.Text), 1);
                if (equiptb612.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb612.Text), 2);
                if (equiptb613.Text != "")
                    calcequip(6, equipindex, double.Parse(equiptb613.Text), 3);
            }
            if (equipcb62.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb62.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb621.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb621.Text), 1);
                if (equiptb622.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb622.Text), 2);
                if (equiptb623.Text != "")
                    calcequip(6, equipindex2, double.Parse(equiptb623.Text), 3);
            }
            if (equipcb63.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb63.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb631.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb631.Text), 1);
                if (equiptb632.Text != "")
                    calcequip(6, equipindex3, double.Parse(equiptb632.Text), 2);
                calcequip(6, equipindex3, equip[equipindex3].down3 + equiptb633.SelectedIndex, 3);
            }
            renewskill();
        }
        private void equiptb711_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb71.SelectedItem == null)
                return;
            clearequip(7);
            if (equipcb71.SelectedIndex >= 1)
            {
                string equipselect = equipcb71.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                calcequip(7, equipindex, equip[equipindex].down1 + equiptb711.SelectedIndex, 1);
                if (equiptb712.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb712.Text), 2);
                if (equiptb713.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb713.Text), 3);
            }
            if (equipcb72.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb72.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb721.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb721.Text), 1);
                if (equiptb722.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb722.Text), 2);
                if (equiptb723.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb723.Text), 3);
            }
            if (equipcb73.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb73.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb731.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb731.Text), 1);
                if (equiptb732.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb732.Text), 2);
                if (equiptb733.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb733.Text), 3);
            }
            renewskill();
        }
        private void equiptb712_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb71.SelectedItem == null)
                return;
            clearequip(7);
            if (equipcb71.SelectedIndex >= 1)
            {
                string equipselect = equipcb71.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb711.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb711.Text), 1);
                calcequip(7, equipindex, equip[equipindex].down2 + equiptb712.SelectedIndex, 2);
                if (equiptb713.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb713.Text), 3);
            }
            if (equipcb72.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb72.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb721.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb721.Text), 1);
                if (equiptb722.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb722.Text), 2);
                if (equiptb723.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb723.Text), 3);
            }
            if (equipcb73.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb73.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb731.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb731.Text), 1);
                if (equiptb732.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb732.Text), 2);
                if (equiptb733.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb733.Text), 3);
            }
            renewskill();
        }
        private void equiptb713_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb71.SelectedItem == null)
                return;
            clearequip(7);
            if (equipcb71.SelectedIndex >= 1)
            {
                string equipselect = equipcb71.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb711.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb711.Text), 1);
                if (equiptb712.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb712.Text), 2);
                calcequip(7, equipindex, equip[equipindex].down3 + equiptb713.SelectedIndex, 3);
            }
            if (equipcb72.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb72.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb721.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb721.Text), 1);
                if (equiptb722.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb722.Text), 2);
                if (equiptb723.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb723.Text), 3);
            }
            if (equipcb73.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb73.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb731.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb731.Text), 1);
                if (equiptb732.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb732.Text), 2);
                if (equiptb733.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb733.Text), 3);
            }
            renewskill();
        }
        private void equiptb721_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb72.SelectedItem == null)
                return;
            clearequip(7);
            if (equipcb71.SelectedIndex >= 1)
            {
                string equipselect = equipcb71.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb711.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb711.Text), 1);
                if (equiptb712.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb712.Text), 2);
                if (equiptb713.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb713.Text), 3);
            }
            if (equipcb72.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb72.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                calcequip(7, equipindex2, equip[equipindex2].down1 + equiptb721.SelectedIndex, 1);
                if (equiptb722.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb722.Text), 2);
                if (equiptb723.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb723.Text), 3);
            }
            if (equipcb73.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb73.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb731.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb731.Text), 1);
                if (equiptb732.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb732.Text), 2);
                if (equiptb733.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb733.Text), 3);
            }
            renewskill();
        }
        private void equiptb722_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb72.SelectedItem == null)
                return;
            clearequip(7);
            if (equipcb71.SelectedIndex >= 1)
            {
                string equipselect = equipcb71.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb711.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb711.Text), 1);
                if (equiptb712.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb712.Text), 2);
                if (equiptb713.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb713.Text), 3);
            }
            if (equipcb72.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb72.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb721.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb721.Text), 1);
                calcequip(7, equipindex2, equip[equipindex2].down2 + equiptb722.SelectedIndex, 2);
                if (equiptb723.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb723.Text), 3);
            }
            if (equipcb73.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb73.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb731.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb731.Text), 1);
                if (equiptb732.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb732.Text), 2);
                if (equiptb733.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb733.Text), 3);
            }
            renewskill();
        }
        private void equiptb723_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb72.SelectedItem == null)
                return;
            clearequip(7);
            if (equipcb71.SelectedIndex >= 1)
            {
                string equipselect = equipcb71.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb711.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb711.Text), 1);
                if (equiptb712.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb712.Text), 2);
                if (equiptb713.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb713.Text), 3);
            }
            if (equipcb72.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb72.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb721.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb721.Text), 1);
                if (equiptb722.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb722.Text), 2);
                calcequip(7, equipindex2, equip[equipindex2].down3 + equiptb723.SelectedIndex, 3);
            }
            if (equipcb73.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb73.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb731.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb731.Text), 1);
                if (equiptb732.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb732.Text), 2);
                if (equiptb733.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb733.Text), 3);
            }
            renewskill();
        }
        private void equiptb731_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb73.SelectedItem == null)
                return;
            clearequip(7);
            if (equipcb71.SelectedIndex >= 1)
            {
                string equipselect = equipcb71.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb711.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb711.Text), 1);
                if (equiptb712.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb712.Text), 2);
                if (equiptb713.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb713.Text), 3);
            }
            if (equipcb72.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb72.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb721.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb721.Text), 1);
                if (equiptb722.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb722.Text), 2);
                if (equiptb723.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb723.Text), 3);
            }
            if (equipcb73.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb73.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                calcequip(7, equipindex3, equip[equipindex3].down1 + equiptb731.SelectedIndex, 1);
                if (equiptb732.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb732.Text), 2);
                if (equiptb733.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb733.Text), 3);
            }
            renewskill();
        }
        private void equiptb732_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb73.SelectedItem == null)
                return;
            clearequip(7);
            if (equipcb71.SelectedIndex >= 1)
            {
                string equipselect = equipcb71.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb711.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb711.Text), 1);
                if (equiptb712.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb712.Text), 2);
                if (equiptb713.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb713.Text), 3);
            }
            if (equipcb72.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb72.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb721.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb721.Text), 1);
                if (equiptb722.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb722.Text), 2);
                if (equiptb723.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb723.Text), 3);
            }
            if (equipcb73.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb73.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb731.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb731.Text), 1);
                calcequip(7, equipindex3, equip[equipindex3].down2 + equiptb732.SelectedIndex, 2);
                if (equiptb733.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb733.Text), 3);
            }
            renewskill();
        }
        private void equiptb733_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb73.SelectedItem == null)
                return;
            clearequip(7);
            if (equipcb71.SelectedIndex >= 1)
            {
                string equipselect = equipcb71.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb711.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb711.Text), 1);
                if (equiptb712.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb712.Text), 2);
                if (equiptb713.Text != "")
                    calcequip(7, equipindex, double.Parse(equiptb713.Text), 3);
            }
            if (equipcb72.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb72.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb721.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb721.Text), 1);
                if (equiptb722.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb722.Text), 2);
                if (equiptb723.Text != "")
                    calcequip(7, equipindex2, double.Parse(equiptb723.Text), 3);
            }
            if (equipcb73.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb73.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb731.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb731.Text), 1);
                if (equiptb732.Text != "")
                    calcequip(7, equipindex3, double.Parse(equiptb732.Text), 2);
                calcequip(7, equipindex3, equip[equipindex3].down3 + equiptb733.SelectedIndex, 3);
            }
            renewskill();
        }
        private void equiptb811_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb81.SelectedItem == null)
                return;
            clearequip(8);
            if (equipcb81.SelectedIndex >= 1)
            {
                string equipselect = equipcb81.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                calcequip(8, equipindex, equip[equipindex].down1 + equiptb811.SelectedIndex, 1);
                if (equiptb812.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb812.Text), 2);
                if (equiptb813.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb813.Text), 3);
            }
            if (equipcb82.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb82.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb821.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb821.Text), 1);
                if (equiptb822.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb822.Text), 2);
                if (equiptb823.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb823.Text), 3);
            }
            if (equipcb83.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb83.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb831.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb831.Text), 1);
                if (equiptb832.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb832.Text), 2);
                if (equiptb833.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb833.Text), 3);
            }
            renewskill();
        }
        private void equiptb812_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb81.SelectedItem == null)
                return;
            clearequip(8);
            if (equipcb81.SelectedIndex >= 1)
            {
                string equipselect = equipcb81.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb811.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb811.Text), 1);
                calcequip(8, equipindex, equip[equipindex].down2 + equiptb812.SelectedIndex, 2);
                if (equiptb813.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb813.Text), 3);
            }
            if (equipcb82.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb82.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb821.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb821.Text), 1);
                if (equiptb822.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb822.Text), 2);
                if (equiptb823.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb823.Text), 3);
            }
            if (equipcb83.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb83.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb831.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb831.Text), 1);
                if (equiptb832.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb832.Text), 2);
                if (equiptb833.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb833.Text), 3);
            }
            renewskill();
        }
        private void equiptb813_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb81.SelectedItem == null)
                return;
            clearequip(8);
            if (equipcb81.SelectedIndex >= 1)
            {
                string equipselect = equipcb81.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb811.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb811.Text), 1);
                if (equiptb812.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb812.Text), 2);
                calcequip(8, equipindex, equip[equipindex].down3 + equiptb813.SelectedIndex, 3);
            }
            if (equipcb82.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb82.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb821.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb821.Text), 1);
                if (equiptb822.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb822.Text), 2);
                if (equiptb823.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb823.Text), 3);
            }
            if (equipcb83.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb83.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb831.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb831.Text), 1);
                if (equiptb832.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb832.Text), 2);
                if (equiptb833.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb833.Text), 3);
            }
            renewskill();
        }
        private void equiptb821_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb82.SelectedItem == null)
                return;
            clearequip(8);
            if (equipcb81.SelectedIndex >= 1)
            {
                string equipselect = equipcb81.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb811.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb811.Text), 1);
                if (equiptb812.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb812.Text), 2);
                if (equiptb813.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb813.Text), 3);
            }
            if (equipcb82.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb82.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                calcequip(8, equipindex2, equip[equipindex2].down1 + equiptb821.SelectedIndex, 1);
                if (equiptb822.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb822.Text), 2);
                if (equiptb823.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb823.Text), 3);
            }
            if (equipcb83.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb83.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb831.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb831.Text), 1);
                if (equiptb832.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb832.Text), 2);
                if (equiptb833.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb833.Text), 3);
            }
            renewskill();
        }
        private void equiptb822_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb82.SelectedItem == null)
                return;
            clearequip(8);
            if (equipcb81.SelectedIndex >= 1)
            {
                string equipselect = equipcb81.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb811.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb811.Text), 1);
                if (equiptb812.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb812.Text), 2);
                if (equiptb813.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb813.Text), 3);
            }
            if (equipcb82.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb82.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb821.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb821.Text), 1);
                calcequip(8, equipindex2, equip[equipindex2].down2 + equiptb822.SelectedIndex, 2);
                if (equiptb823.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb823.Text), 3);
            }
            if (equipcb83.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb83.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb831.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb831.Text), 1);
                if (equiptb832.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb832.Text), 2);
                if (equiptb833.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb833.Text), 3);
            }
            renewskill();
        }
        private void equiptb823_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb82.SelectedItem == null)
                return;
            clearequip(8);
            if (equipcb81.SelectedIndex >= 1)
            {
                string equipselect = equipcb81.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb811.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb811.Text), 1);
                if (equiptb812.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb812.Text), 2);
                if (equiptb813.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb813.Text), 3);
            }
            if (equipcb82.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb82.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb821.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb821.Text), 1);
                if (equiptb822.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb822.Text), 2);
                calcequip(8, equipindex2, equip[equipindex2].down3 + equiptb823.SelectedIndex, 3);
            }
            if (equipcb83.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb83.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb831.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb831.Text), 1);
                if (equiptb832.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb832.Text), 2);
                if (equiptb833.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb833.Text), 3);
            }
            renewskill();
        }
        private void equiptb831_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb83.SelectedItem == null)
                return;
            clearequip(8);
            if (equipcb81.SelectedIndex >= 1)
            {
                string equipselect = equipcb81.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb811.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb811.Text), 1);
                if (equiptb812.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb812.Text), 2);
                if (equiptb813.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb813.Text), 3);
            }
            if (equipcb82.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb82.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb821.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb821.Text), 1);
                if (equiptb822.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb822.Text), 2);
                if (equiptb823.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb823.Text), 3);
            }
            if (equipcb83.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb83.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                calcequip(8, equipindex3, equip[equipindex3].down1 + equiptb831.SelectedIndex, 1);
                if (equiptb832.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb832.Text), 2);
                if (equiptb833.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb833.Text), 3);
            }
            renewskill();
        }
        private void equiptb832_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb83.SelectedItem == null)
                return;
            clearequip(8);
            if (equipcb81.SelectedIndex >= 1)
            {
                string equipselect = equipcb81.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb811.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb811.Text), 1);
                if (equiptb812.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb812.Text), 2);
                if (equiptb813.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb813.Text), 3);
            }
            if (equipcb82.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb82.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb821.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb821.Text), 1);
                if (equiptb822.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb822.Text), 2);
                if (equiptb823.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb823.Text), 3);
            }
            if (equipcb83.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb83.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb831.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb831.Text), 1);
                calcequip(8, equipindex3, equip[equipindex3].down2 + equiptb832.SelectedIndex, 2);
                if (equiptb833.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb833.Text), 3);
            }
            renewskill();
        }
        private void equiptb833_TextChanged(object sender, SelectionChangedEventArgs e)
        {
            if (equipcb83.SelectedItem == null)
                return;
            clearequip(8);
            if (equipcb81.SelectedIndex >= 1)
            {
                string equipselect = equipcb81.SelectedItem.ToString();
                int equipindex = getequipindex(equipselect.Substring(31));
                if (equiptb811.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb811.Text), 1);
                if (equiptb812.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb812.Text), 2);
                if (equiptb813.Text != "")
                    calcequip(8, equipindex, double.Parse(equiptb813.Text), 3);
            }
            if (equipcb82.SelectedIndex >= 1)
            {
                string equipselect2 = equipcb82.SelectedItem.ToString();
                int equipindex2 = getequipindex(equipselect2.Substring(31));
                if (equiptb821.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb821.Text), 1);
                if (equiptb822.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb822.Text), 2);
                if (equiptb823.Text != "")
                    calcequip(8, equipindex2, double.Parse(equiptb823.Text), 3);
            }
            if (equipcb83.SelectedIndex >= 1)
            {
                string equipselect3 = equipcb83.SelectedItem.ToString();
                int equipindex3 = getequipindex(equipselect3.Substring(31));
                if (equiptb831.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb831.Text), 1);
                if (equiptb832.Text != "")
                    calcequip(8, equipindex3, double.Parse(equiptb832.Text), 2);
                calcequip(8, equipindex3, equip[equipindex3].down3 + equiptb833.SelectedIndex, 3);
            }
            renewskill();
        }

        private void enemybreakarmor_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (!IsNumber(enemybreakarmor.Text))
                enemybreakarmor.Text = "0";
            if (int.Parse(enemybreakarmor.Text) < 0)
                enemybreakarmor.Text = "0";
            renewtank();
        }

        private double ComboDamage(int combo)
        {
            switch (combo)
            {
                case 0: { return Double.Parse(Ldamage0.Content.ToString()); }
                case 1: { return Double.Parse(Ldamage1.Content.ToString()); }
                case 2: { return Double.Parse(Ldamage2.Content.ToString()); }
                case 3: { return Double.Parse(Ldamage3.Content.ToString()); }
                case 4: { return Double.Parse(Ldamage4.Content.ToString()); }
                case 5: { return Double.Parse(Ldamage5.Content.ToString()); }
                case 6: { return Double.Parse(Ldamage6.Content.ToString()); }
                case 7: { return Double.Parse(Ldamage7.Content.ToString()); }
                case 8: { return Double.Parse(Ldamage8.Content.ToString()); }
            }
            return 0;
        }

        private bool StringinD(string a, string b)
        {
            string[] temp = a.Split(',');
            for (int i = 0; i < temp.Length; i++)
                if (temp[i] == b)
                    return true;
            return false;
        }

        private double dedouble(double o)
        {

            int intd = (int)o;
            double doubled = o % intd;
            if (doubled > 0.8)
                return Convert.ToDouble(o.ToString("0"));
            else
                return Convert.ToDouble(o.ToString("f3"));
        }

        private void textBlock_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (getattime(0) > 0 && cb0.IsChecked == true)
                if (slider.Value > skilltime[0] + getattime(0) || slider.Value < skilltime[0])
                    cb0.IsChecked = false;
            if (getattime(1) > 0 && cb1.IsChecked == true)
                if (slider.Value > skilltime[1] + getattime(1) || slider.Value < skilltime[1])
                    cb1.IsChecked = false;
            if (getattime(2) > 0 && cb2.IsChecked == true)
                if (slider.Value > skilltime[2] + getattime(2) || slider.Value < skilltime[2])
                    cb2.IsChecked = false;
            if (getattime(3) > 0 && cb3.IsChecked == true)
                if (slider.Value > skilltime[3] + getattime(3) || slider.Value < skilltime[3])
                    cb3.IsChecked = false;
            if (getattime(4) > 0 && cb4.IsChecked == true)
                if (slider.Value > skilltime[4] + getattime(4) || slider.Value < skilltime[4])
                    cb4.IsChecked = false;
            if (getattime(5) > 0 && cb5.IsChecked == true)
                if (slider.Value > skilltime[5] + getattime(5) || slider.Value < skilltime[5])
                    cb5.IsChecked = false;
            if (getattime(6) > 0 && cb6.IsChecked == true)
                if (slider.Value > skilltime[6] + getattime(6) || slider.Value < skilltime[6])
                    cb6.IsChecked = false;
            if (getattime(7) > 0 && cb7.IsChecked == true)
                if (slider.Value > skilltime[7] + getattime(7) || slider.Value < skilltime[7])
                    cb7.IsChecked = false;
            if (getattime(8) > 0 && cb8.IsChecked == true)
                if (slider.Value > skilltime[8] + getattime(8) || slider.Value < skilltime[8])
                    cb8.IsChecked = false;
            renewskill();
        }

        private string floatdamage(double basePow, double merry, double equipPow, double buff, double Armor)
        {

            //   Ldamage0.Content = Math.Ceiling(Math.Max(1, (Math.Ceiling((basePow + maxAddPow) * merry[0]) + equipdamage[0]) * gg[0].damageup * (skillupdamage[0]) + Math.Min(2, equipbreakarmor[0] - Int32.Parse(enemyarmor.Text))));
            Console.WriteLine("buff: " + basePow + " " + merry + " " + equipPow + " " + buff + " " + Armor);
            double result = 0;
            for (double i = 0.855; i < 1.15; i += 0.01)
            {
                //   double i = 1;
                result += Math.Ceiling(Math.Max(1, Math.Round(Math.Ceiling(basePow * merry + equipPow) * buff * i) + Armor));
                //  Console.WriteLine(result);
            }
            Console.WriteLine("damage: " + result);
            result /= 30;
            Console.WriteLine(result);
            return Math.Ceiling(result).ToString("0");


            //    floatdamage(basePow + maxAddPow, merry[0], equipdamage[0] * gg[0].damageup * skillupdamage[0], Math.Min(2, equipbreakarmor[0] - Int32.Parse(enemyarmor.Text)));

        }

        private void Window_MouseMove(object sender, MouseEventArgs e)
        {

            Point p = e.GetPosition((IInputElement)sender);
            Console.WriteLine(p.X + " " );
            double h = Windows.ActualHeight;
            if (p.Y > h-30)
            {
                return;
            }
            if (e.LeftButton == MouseButtonState.Pressed)
            {
                this.DragMove();
                //Window.DragMove();
            }
            if (Mouse.LeftButton != MouseButtonState.Pressed)
            {
                FrameworkElement element = e.OriginalSource as FrameworkElement;
                if (element != null && !element.Name.Contains("Resize"))
                    this.Cursor = Cursors.Arrow;
            }
        }

        private void fairynamecombo_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int fairyindex = fairynamecombo.SelectedIndex;
            int levelindex = fairylevel.SelectedIndex;
            int starindex = fairystar.SelectedIndex;
            //   image.Source = new BitmapImage(new Uri(@"daw\adw.jpg", UriKind.Relative));
            if (fairyindex < 0 || levelindex < 0 || starindex < 0)
            {
                FairyImage.Source = new BitmapImage(new Uri("zhaijiang.jpg", UriKind.Relative));
                return;
            }
            FairyImage.Source = new BitmapImage(new Uri("assets/fairy/" + fairy[fairyindex].name + ".png", UriKind.Relative));
            if (fairyindex == 0)
                FairyImage.Source = new BitmapImage(new Uri("zhaijiang.jpg", UriKind.Relative));

            fairy[fairyindex].level = levelindex + 1;
            fairy[fairyindex].star = starindex + 1;
            fairy[fairyindex].calcfairybuff();
            FairyImage.ToolTip = "伤害：" + fairy[fairyindex].powbuffshow + "% 命中：" + fairy[fairyindex].hitbuffshow + "% 回避：" + fairy[fairyindex].dodgebuffshow + "% 护甲：" + fairy[fairyindex].armorbuffshow + "% 爆伤：" + fairy[fairyindex].critharmbuffshow + "%";
            for (int i = 0; i < 9; i++)
                renewindex(i);
            //   calctalent();
            renewskill();
        }

        private void fairylevel_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int fairyindex = fairynamecombo.SelectedIndex;
            int levelindex = fairylevel.SelectedIndex;
            int starindex = fairystar.SelectedIndex;
            fairystar.Items.Clear();
            if (levelindex + 1 < 20)
                for (int i = 1; i <= 1; i++)
                    fairystar.Items.Add(i);
            else if (levelindex + 1 < 40)
                for (int i = 1; i <= 2; i++)
                    fairystar.Items.Add(i);
            else if (levelindex + 1 < 70)
                for (int i = 1; i <= 3; i++)
                    fairystar.Items.Add(i);
            else if (levelindex + 1 < 100)
                for (int i = 1; i <= 4; i++)
                    fairystar.Items.Add(i);
            else
                for (int i = 1; i <= 5; i++)
                    fairystar.Items.Add(i);
            if (starindex < 0)
                starindex = 0;
            fairystar.SelectedIndex = starindex;
            if (fairyindex <= 0 || levelindex < 0 || starindex < 0)
                return;
            fairy[fairyindex].level = levelindex + 1;
            fairy[fairyindex].star = starindex + 1;
            fairy[fairyindex].calcfairybuff();
            FairyImage.ToolTip = "伤害：" + fairy[fairyindex].powbuffshow + "% 命中：" + fairy[fairyindex].hitbuffshow + "% 回避：" + fairy[fairyindex].dodgebuffshow + "% 护甲：" + fairy[fairyindex].armorbuffshow + "% 爆伤：" + fairy[fairyindex].critharmbuffshow + "%";
            //for (int i = 0; i < 9; i++)
            //    renewindex(i);
            renewskill();
            //  calctalent();
        }

        private void fairyskilllevel_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // calctalent();
            renewskill();
        }

        private void fairystar_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int fairyindex = fairynamecombo.SelectedIndex;
            int levelindex = fairylevel.SelectedIndex;
            int starindex = fairystar.SelectedIndex;
            if (fairyindex <= 0 || levelindex < 0 || starindex < 0)
                return;
            fairy[fairyindex].level = levelindex + 1;
            fairy[fairyindex].star = starindex + 1;
            fairy[fairyindex].calcfairybuff();
            FairyImage.ToolTip = "伤害：" + fairy[fairyindex].powbuffshow + "% 命中：" + fairy[fairyindex].hitbuffshow + "% 回避：" + fairy[fairyindex].dodgebuffshow + "% 护甲：" + fairy[fairyindex].armorbuffshow + "% 爆伤：" + fairy[fairyindex].critharmbuffshow + "%";
            for (int i = 0; i < 9; i++)
                renewindex(i);
            renewskill();
        }

        private void zhedie_Click(object sender, RoutedEventArgs e)
        {
            if (zhedie)
            {
                //         Windows.Width = Windows.ActualWidth - equipgrid.ActualWidth;
                equipgrid.Visibility = System.Windows.Visibility.Collapsed;
                zhedie = false;
            }
            else
            {
                //         Windows.Width += equipgrid.Width;
                //       Windows.Width = Windows.ActualWidth + equipgrid.ActualWidth;
                equipgrid.Visibility = System.Windows.Visibility.Visible;
                zhedie = true;
            }
        }

        private void fairyzhedie_Click(object sender, RoutedEventArgs e)
        {
            if (fairyzhedie)
            {
                //         Windows.Width = Windows.ActualWidth - equipgrid.ActualWidth;
                fairygrid.Visibility = System.Windows.Visibility.Collapsed;
                fairyzhedie = false;
            }
            else
            {
                //         Windows.Width += equipgrid.Width;
                //       Windows.Width = Windows.ActualWidth + equipgrid.ActualWidth;
                fairygrid.Visibility = System.Windows.Visibility.Visible;
                fairyzhedie = true;
            }
        }

        private void close_Click(object sender, RoutedEventArgs e)
        {
            Application.Current.Shutdown();
            base.OnClosed(e);
        }

        private void fairytalentcombo_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            renewskill();
        }
        private void calctalent()
        {
            int fairyindex = fairynamecombo.SelectedIndex;
            int levelindex = fairylevel.SelectedIndex;
            int starindex = fairystar.SelectedIndex;
            int talentindex = fairytalentcombo.SelectedIndex;
            if (fairyindex <= 0 || levelindex < 0 || starindex < 0 || talentindex <= 0)
            {
                fairytalentcombo.ToolTip = "妖精觅食中";
                return;
            }
            double rate = 0;
            switch (fairytalent[talentindex].rateswitch)
            {
                case 1:
                    {
                        switch (starindex + 1)
                        {
                            case 1: { rate = 0.4; } break;
                            case 2: { rate = 0.6; } break;
                            case 3: { rate = 0.8; } break;
                            case 4: { rate = 0.9; } break;
                            case 5: { rate = 1; } break;
                        }
                        break;
                    }
                case 2:
                    {
                        switch (starindex + 1)
                        {
                            case 1: { rate = 0.2; } break;
                            case 2: { rate = 0.4; } break;
                            case 3: { rate = 0.6; } break;
                            case 4: { rate = 0.8; } break;
                            case 5: { rate = 1; } break;
                        }
                        break;
                    }
                case 3:
                    {
                        switch (starindex + 1)
                        {
                            case 1: { rate = 0.3; } break;
                            case 2: { rate = 0.5; } break;
                            case 3: { rate = 0.7; } break;
                            case 4: { rate = 0.9; } break;
                            case 5: { rate = 1; } break;
                        }
                        break;
                    }
            }
            switch (fairytalent[talentindex].name)
            {
                case "杀伤型I":
                    {
                        double updem1 = 0.12;
                        for (int i = 0; i < 9; i++)
                        {
                            skillupdamage[i] *= updem1 + 1;
                            renewindex(i);
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,全体伤害提升" + (updem1 * 100) + "%";
                        break;
                    }
                case "杀伤型II":
                    {
                        double updem1 = 0.15;
                        for (int i = 0; i < 9; i++)
                        {
                            skillupdamage[i] *= updem1 + 1;
                            renewindex(i);
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,全体伤害提升" + (updem1 * 100) + "%";
                        break;
                    }
                case "精准型I":
                    {
                        double updem1 = 0.2;
                        for (int i = 0; i < 9; i++)
                        {
                            skilluphit[i] *= updem1 + 1;
                            renewindex(i);
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,全体命中提升" + (updem1 * 100) + "%";
                        break;
                    }
                case "精准型II":
                    {
                        double updem1 = 0.25;
                        for (int i = 0; i < 9; i++)
                        {
                            skilluphit[i] *= updem1 + 1;
                            renewindex(i);
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,全体命中提升" + (updem1 * 100) + "%";
                        break;
                    }
                case "回避型I":
                    {
                        double updem1 = 0.15;
                        for (int i = 0; i < 9; i++)
                        {
                            skillupdodge[i] *= updem1 + 1;
                            renewindex(i);
                            renewtank();
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,全体回避提升" + (updem1 * 100) + "%";
                        break;
                    }
                case "回避型II":
                    {
                        double updem1 = 0.2;
                        for (int i = 0; i < 9; i++)
                        {
                            skillupdodge[i] *= updem1 + 1;
                            renewindex(i);
                            renewtank();
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,全体回避提升" + (updem1 * 100) + "%";
                        break;
                    }
                case "护甲型I":
                    {
                        double updem1 = 0.08;
                        for (int i = 0; i < 9; i++)
                        {
                            skilluparmor[i] *= updem1 + 1;
                            renewindex(i);
                            renewtank();
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,全体护甲提升" + (updem1 * 100) + "%";
                        break;
                    }
                case "护甲型II":
                    {
                        double updem1 = 0.1;
                        for (int i = 0; i < 9; i++)
                        {
                            skilluparmor[i] *= updem1 + 1;
                            renewindex(i);
                            renewtank();
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,全体护甲提升" + (updem1 * 100) + "%";
                        break;
                    }
                case "必杀型I":
                    {
                        double updem1 = 0.4;
                        for (int i = 0; i < 9; i++)
                        {
                            skillupcrit[i] *= updem1 + 1;
                            renewindex(i);
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,全体暴击率提升" + (updem1 * 100) + "%";
                        break;
                    }
                case "必杀型II":
                    {
                        double updem1 = 0.5;
                        for (int i = 0; i < 9; i++)
                        {
                            skillupcrit[i] *= updem1 + 1;
                            renewindex(i);
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,全体暴击率提升" + (updem1 * 100) + "%";
                        break;
                    }
                case "冲锋型":
                    {
                        double updem1 = 0.08;
                        double updem2 = 0.12;
                        for (int i = 0; i < 9; i++)
                        {
                            if (gun[getcombogunindex(i)].what == 3)
                            {
                                skillupdamage[i] *= updem1 + 1;
                                skillupdodge[i] *= updem2 + 1;
                                renewindex(i);
                                renewtank();
                            }
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,SMG伤害提升" + (updem1 * 100) + "%,回避提升" + (updem2 * 100) + "%";
                        break;
                    }
                case "突击型":
                    {
                        double updem1 = 0.1;
                        double updem2 = 0.08;
                        for (int i = 0; i < 9; i++)
                        {
                            if (gun[getcombogunindex(i)].what == 2)
                            {
                                skillupdamage[i] *= updem1 + 1;
                                skillupshotspeed[i] *= updem2 + 1;
                                renewindex(i);
                            }
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,AR伤害提升" + (updem1 * 100) + "%,射速提升" + (updem2 * 100) + "%";
                        break;
                    }
                case "瞄准型":
                    {
                        double updem1 = 0.08;
                        double updem2 = 0.1;
                        for (int i = 0; i < 9; i++)
                        {
                            if (gun[getcombogunindex(i)].what == 5)
                            {
                                skillupdamage[i] *= updem1 + 1;
                                skillupshotspeed[i] *= updem2 + 1;
                                renewindex(i);
                            }
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,RF伤害提升" + (updem1 * 100) + "%,射速提升" + (updem2 * 100) + "%";
                        break;
                    }
                case "坚韧型":
                    {
                        double updem1 = 0.08;
                        double updem2 = 0.2;
                        for (int i = 0; i < 9; i++)
                        {
                            if (gun[getcombogunindex(i)].what == 7)
                            {
                                skilluparmor[i] *= updem1 + 1;
                                skillupcrit[i] *= updem2 + 1;
                                renewindex(i);
                                renewtank();
                            }
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,SG护甲提升" + (updem1 * 100) + "%,暴击率提升" + (updem2 * 100) + "%";
                        break;
                    }
                case "镇压型":
                    {
                        double updem1 = 0.1;
                        double updem2 = 0.15;
                        for (int i = 0; i < 9; i++)
                        {
                            if (gun[getcombogunindex(i)].what == 6)
                            {
                                skillupdamage[i] *= updem1 + 1;
                                skilluphit[i] *= updem2 + 1;
                                renewindex(i);
                            }
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,MG伤害提升" + (updem1 * 100) + "%,命中提升" + (updem2 * 100) + "%";
                        break;
                    }
                case "敏锐型":
                    {
                        double updem1 = 0.1;
                        double updem2 = 0.3;
                        for (int i = 0; i < 9; i++)
                        {
                            if (gun[getcombogunindex(i)].what == 4)
                            {
                                skilluphit[i] *= updem1 + 1;
                                skillupcrit[i] *= updem2 + 1;
                                renewindex(i);
                            }
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,HG命中提升" + (updem1 * 100) + "%,暴击率提升" + (updem2 * 100) + "%";
                        break;
                    }
                case "激昂型":
                    {
                        double updem1 = 0.1;
                        int fmultiple = 0;
                        if (slider.Value < 8)
                            fmultiple = 1;
                        else if (slider.Value < 16)
                            fmultiple = 2;
                        else
                            fmultiple = 3;

                        for (int i = 0; i < 9; i++)
                        {
                            skillupdamage[i] *= Math.Pow(updem1 + 1, fmultiple);
                            renewindex(i);
                        }
                        fairytalentcombo.ToolTip = "发动率" + (rate * 100) + "%,每8秒提升伤害" + (updem1 * 100) + "%,最多3层";
                        break;
                    }
                case "黄金型":
                    {
                        fairytalentcombo.ToolTip = "kirarin~☆ 没啥用，但是好康啊！";
                        break;

                    }
                default:
                    break;
            }
        }

        private void cb9_Click(object sender, RoutedEventArgs e)
        {
            renewskill();
        }

        private void calcfairyskill()
        {
            bool ischecked = cb9.IsChecked == true;
            int fairyindex = fairynamecombo.SelectedIndex;
            int levelindex = fairylevel.SelectedIndex;
            int starindex = fairystar.SelectedIndex;
            int skillindex = fairyskilllevel.SelectedIndex;
            if (fairyindex < 1 || levelindex == -1 || starindex == -1 || skillindex == -1)
                return;
            switch (fairy[fairyindex].type)
            {
                case 900110:
                    {
                        double cdtime = 99;
                        double attime = 20;
                        double updem1 = 0;
                        double updem2 = 0;
                        double point = 1;
                        double turncd = 0;
                        switch (skillindex) { case 0: { updem1 = 0.05; updem2 = 0.05; break; } case 1: { updem1 = 0.07; updem2 = 0.05; break; } case 2: { updem1 = 0.08; updem2 = 0.06; break; } case 3: { updem1 = 0.1; updem2 = 0.06; break; } case 4: { updem1 = 0.12; updem2 = 0.07; break; } case 5: { updem1 = 0.13; updem2 = 0.07; break; } case 6: { updem1 = 0.15; updem2 = 0.08; break; } case 7: { updem1 = 0.17; updem2 = 0.08; break; } case 8: { updem1 = 0.18; updem2 = 0.09; break; } case 9: { updem1 = 0.2; updem2 = 0.1; break; } }

                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupdamage[i] *= 1 + updem1;
                                skillupshotspeed[i] *= 1 + updem2;
                                renewindex(i);
                            }
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "持续" + attime + "s,提升全体" + updem1 * 100 + "%伤害," + updem2 * 100 + "%射速,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 900111:
                    {
                        double cdtime = 99;
                        double attime = 20;
                        double updem1 = 0;
                        double updem2 = 0;
                        double point = 1;
                        double turncd = 0;
                        switch (skillindex) { case 0: { updem1 = 0.1; updem2 = 0.1; break; } case 1: { updem1 = 0.14; updem2 = 0.12; break; } case 2: { updem1 = 0.19; updem2 = 0.13; break; } case 3: { updem1 = 0.23; updem2 = 0.15; break; } case 4: { updem1 = 0.28; updem2 = 0.17; break; } case 5: { updem1 = 0.32; updem2 = 0.18; break; } case 6: { updem1 = 0.37; updem2 = 0.2; break; } case 7: { updem1 = 0.41; updem2 = 0.22; break; } case 8: { updem1 = 0.46; updem2 = 0.23; break; } case 9: { updem1 = 0.5; updem2 = 0.25; break; } }

                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skilluphit[i] *= 1 + updem1;
                                skillupcrit[i] *= 1 + updem2;
                                renewindex(i);
                            }
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "持续" + attime + "s,提升全体" + updem1 * 100 + "%命中," + updem2 * 100 + "%暴击率,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 900103:
                    {
                        double cdtime = 99;
                        double attime = 20;
                        double updem1 = 0;
                        double updem2 = 0;
                        double point = 3;
                        double turncd = 0;
                        switch (skillindex) { case 0: { updem1 = 0.15; break; } case 1: { updem1 = 0.19; break; } case 2: { updem1 = 0.23; break; } case 3: { updem1 = 0.27; break; } case 4: { updem1 = 0.31; break; } case 5: { updem1 = 0.34; break; } case 6: { updem1 = 0.38; break; } case 7: { updem1 = 0.42; break; } case 8: { updem1 = 0.46; break; } case 9: { updem1 = 0.5; break; } }

                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                if (gun[getcombogunindex(i)].what == 7)
                                {
                                    skilluparmor[i] *= updem1 + 1;
                                    renewindex(i);
                                    renewtank();
                                }
                            }
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "持续" + attime + "s,提升SG" + updem1 * 100 + "%护甲,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 900101:
                    {
                        double cdtime = 99;
                        double attime = 99;
                        double updem1 = 0;
                        double updem2 = 0;
                        double point = 3;
                        double turncd = 0;
                        switch (skillindex) { case 0: { updem1 = 40; break; } case 1: { updem1 = 50; break; } case 2: { updem1 = 60; break; } case 3: { updem1 = 70; break; } case 4: { updem1 = 80; break; } case 5: { updem1 = 90; break; } case 6: { updem1 = 100; break; } case 7: { updem1 = 110; break; } case 8: { updem1 = 130; break; } case 9: { updem1 = 150; break; } }

                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            shield = updem1;
                            renewtank();
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "给每个SMG " + updem1 + "血护盾,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 6:
                    {
                        double cdtime = 99;
                        double attime = 20;
                        double updem1 = 0;
                        double updem2 = 0;
                        double point = 5;
                        double turncd = 1;
                        switch (skillindex) { case 0: { updem1 = 0.1; break; } case 1: { updem1 = 0.12; break; } case 2: { updem1 = 0.14; break; } case 3: { updem1 = 0.17; break; } case 4: { updem1 = 0.19; break; } case 5: { updem1 = 0.21; break; } case 6: { updem1 = 0.23; break; } case 7: { updem1 = 0.26; break; } case 8: { updem1 = 0.28; break; } case 9: { updem1 = 0.3; break; } }

                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            fairydowndamage *= 1 - updem1;
                            renewtank();
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "持续" + attime + "s,回合内每场战斗减伤" + updem1 * 100 + "%,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 900104:
                    {
                        double cdtime = 99;
                        double attime = 99;
                        double updem1 = 0;
                        double updem2 = 0;
                        double point = 2;
                        double turncd = 0;
                        switch (skillindex) { case 0: { updem1 = 250; break; } case 1: { updem1 = 300; break; } case 2: { updem1 = 350; break; } case 3: { updem1 = 400; break; } case 4: { updem1 = 500; break; } case 5: { updem1 = 600; break; } case 6: { updem1 = 700; break; } case 7: { updem1 = 800; break; } case 8: { updem1 = 900; break; } case 9: { updem1 = 1000; break; } }

                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            // shield = updem1;
                            // renewtank();
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "放置一个 " + updem1 + "血的靶子,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 900102:
                    {
                        double cdtime = 99;
                        double attime = 99;
                        double updem1 = 0;
                        double updem2 = 0;
                        double point = 2;
                        double turncd = 0;
                        switch (skillindex) { case 0: { updem1 = 2500; break; } case 1: { updem1 = 4000; break; } case 2: { updem1 = 5500; break; } case 3: { updem1 = 7000; break; } case 4: { updem1 = 8500; break; } case 5: { updem1 = 10000; break; } case 6: { updem1 = 12500; break; } case 7: { updem1 = 15000; break; } case 8: { updem1 = 17500; break; } case 9: { updem1 = 20000; break; } }

                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            // shield = updem1;
                            // renewtank();
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "瞄准血量最高角色," + updem1 + "点伤害,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 900108:
                    {
                        double cdtime = 99;
                        double attime = 99;
                        double updem1 = 0;
                        double updem2 = 0;
                        double point = 3;
                        double turncd = 0;
                        switch (skillindex) { case 0: { updem1 = 200; break; } case 1: { updem1 = 300; break; } case 2: { updem1 = 400; break; } case 3: { updem1 = 500; break; } case 4: { updem1 = 600; break; } case 5: { updem1 = 700; break; } case 6: { updem1 = 800; break; } case 7: { updem1 = 900; break; } case 8: { updem1 = 1000; break; } case 9: { updem1 = 1200; break; } }

                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            // shield = updem1;
                            // renewtank();
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "半径2.5," + updem1 + "点伤害,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 900109:
                    {
                        double cdtime = 99;
                        double attime = 99;
                        double updem1 = 0;
                        double updem2 = 0;
                        double point = 3;
                        double turncd = 0;
                        switch (skillindex) { case 0: { updem1 = 80; break; } case 1: { updem1 = 120; break; } case 2: { updem1 = 160; break; } case 3: { updem1 = 200; break; } case 4: { updem1 = 240; break; } case 5: { updem1 = 280; break; } case 6: { updem1 = 320; break; } case 7: { updem1 = 360; break; } case 8: { updem1 = 400; break; } case 9: { updem1 = 500; break; } }

                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            // shield = updem1;
                            // renewtank();
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "敌方全体," + updem1 + "点伤害,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 8:
                    {
                        double cdtime = 99;
                        double attime = 20;
                        double updem1 = 0;
                        double updem2 = 0;
                        double point = 2;
                        double turncd = 1;
                        switch (skillindex) { case 0: { updem1 = 0.03; break; } case 1: { updem1 = 0.035; break; } case 2: { updem1 = 0.04; break; } case 3: { updem1 = 0.045; break; } case 4: { updem1 = 0.05; break; } case 5: { updem1 = 0.06; break; } case 6: { updem1 = 0.07; break; } case 7: { updem1 = 0.08; break; } case 8: { updem1 = 0.09; break; } case 9: { updem1 = 0.1; break; } }

                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupdodge[i] *= 1 + updem1;
                                renewindex(i);
                                renewtank();
                            }
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "血量百分比最少人形+1编,回合内每场战斗全体回避提升" + updem1 * 100 + "%,持续" + attime + "s,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 9:
                    {
                        double cdtime = 99;
                        double attime = 99;
                        double updem1 = 0;
                        string updem2 = "";
                        double point = 5;
                        double turncd = 5;
                        switch (skillindex) { case 0: { updem1 = 0.1; break; } case 1: { updem1 = 0.15; break; } case 2: { updem1 = 0.2; break; } case 3: { updem1 = 0.25; break; } case 4: { updem1 = 0.3; break; } case 5: { updem1 = 0.35; break; } case 6: { updem1 = 0.4; break; } case 7: { updem1 = 0.45; break; } case 8: { updem1 = 0.5; break; } case 9: { updem1 = 0.6; break; } }
                        switch (skillindex) { case 0: { updem2 = "范围3以内"; break; } case 1: { updem2 = "范围3以内"; break; } case 2: { updem2 = "范围3以内"; break; } case 3: { updem2 = "范围4以内"; break; } case 4: { updem2 = "范围4以内"; break; } case 5: { updem2 = "范围5以内"; break; } case 6: { updem2 = "范围5以内"; break; } case 7: { updem2 = "范围6以内"; break; } case 8: { updem2 = "范围6以内"; break; } case 9: { updem2 = "任意"; break; } }


                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupdamage[i] *=  updem1;
                                skilluphit[i] *= updem1;
                                skillupdodge[i] *= updem1;
                                skilluparmor[i] *= updem1;
                                skillupcrit[i] *= updem1;
                                renewindex(i);
                                renewtank();
                            }
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "本梯队空降有视野的"+updem2+"机场，伤害、命中、回避、护甲、暴击率降低" + (1-updem1) * 100 + "%,持续2回合,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 10:
                    {
                        double cdtime = 99;
                        double attime = 99;
                        double updem1 = 0;
                        double updem2 = 0;
                        double point = 5;
                        double turncd = 3;
                        switch (skillindex) { case 0: { updem1 = 0.2; break; } case 1: { updem1 = 0.23; break; } case 2: { updem1 = 0.26; break; } case 3: { updem1 = 0.3; break; } case 4: { updem1 = 0.33; break; } case 5: { updem1 = 0.36; break; } case 6: { updem1 = 0.4; break; } case 7: { updem1 = 0.43; break; } case 8: { updem1 = 0.46; break; } case 9: { updem1 = 0.5; break; } }

                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            // shield = updem1;
                            // renewtank();
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "相邻格无人点埋雷,存在2回合,敌人触碰减少当前血量" + updem1 * 100 + "%,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 11:
                    {
                        double cdtime = 99;
                        double attime = 99;
                        double updem1 = 0;
                        double updem2 = 0;
                        double point = 5;
                        double turncd = 3;
                        switch (skillindex) { case 0: { updem1 = 0.1; break; } case 1: { updem1 = 0.11; break; } case 2: { updem1 = 0.12; break; } case 3: { updem1 = 0.13; break; } case 4: { updem1 = 0.14; break; } case 5: { updem1 = 0.15; break; } case 6: { updem1 = 0.16; break; } case 7: { updem1 = 0.17; break; } case 8: { updem1 = 0.18; break; } case 9: { updem1 = 0.2; break; } }

                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            // shield = updem1;
                            // renewtank();
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "部署火箭发射器,存在2回合,敌人2格内移动时减少当前血量" + updem1 * 100 + "%,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 12:
                    {
                        double cdtime = 99;
                        double attime = 99;
                        double updem1 = 0;
                        double updem2 = 0;
                        double point = 5;
                        double turncd = 3;
                        switch (skillindex) { case 0: { updem1 = 0.1; break; } case 1: { updem1 = 0.12; break; } case 2: { updem1 = 0.14; break; } case 3: { updem1 = 0.17; break; } case 4: { updem1 = 0.19; break; } case 5: { updem1 = 0.21; break; } case 6: { updem1 = 0.23; break; } case 7: { updem1 = 0.26; break; } case 8: { updem1 = 0.28; break; } case 9: { updem1 = 0.3; break; } }

                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            for (int i = 0; i < 9; i++)
                            {
                                skillupdamage[i] *= 1 + updem1;
                                skilluphit[i] *= 1 + updem1;
                                skillupdodge[i] *= 1 + updem1;
                                skilluparmor[i] *= 1 + updem1;
                                skillupcrit[i] *= 1 + updem1;
                                renewindex(i);
                                renewtank();
                            }
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "部署堡垒,3回合内本格战斗提升伤害、命中、回避、护甲、暴击率" + updem1 * 100 + "%,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 13:
                    {
                        double cdtime = 99;
                        double attime = 99;
                        double updem1 = 0;
                        double updem2 = 0;
                        double point = 1;
                        double turncd = 1;
                        switch (skillindex) { case 0: { updem1 = 0.05; break; } case 1: { updem1 = 0.08; break; } case 2: { updem1 = 0.1; break; } case 3: { updem1 = 0.12; break; } case 4: { updem1 = 0.14; break; } case 5: { updem1 = 0.16; break; } case 6: { updem1 = 0.18; break; } case 7: { updem1 = 0.2; break; } case 8: { updem1 = 0.22; break; } case 9: { updem1 = 0.25; break; } }

                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            // shield = updem1;
                            // renewtank();
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "下场战斗经验提升" + updem1 * 100 + "%,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 14:
                    {
                        double cdtime = 99;
                        double attime = 99;
                        string updem1 = "";
                        double updem2 = 0;
                        double point = 1;
                        double turncd = 1;
                        switch (skillindex) { case 0: { updem1 = "极小幅"; break; } case 1: { updem1 = "极小幅"; break; } case 2: { updem1 = "小幅"; break; } case 3: { updem1 = "小幅"; break; } case 4: { updem1 = "中幅"; break; } case 5: { updem1 = "中幅"; break; } case 6: { updem1 = "大幅"; break; } case 7: { updem1 = "大幅"; break; } case 8: { updem1 = "极大"; break; } case 9: { updem1 = "极大"; break; } }

                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            // shield = updem1;
                            // renewtank();
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "下场战斗获得稀有人形概率" + updem1 + "提升,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 15:
                    {
                        double cdtime = 99;
                        double attime = 99;
                        double updem1 = 0;
                        double updem2 = 0;
                        double point = 0;
                        double turncd = 0;
                        switch (skillindex) { case 0: { updem1 = 0.1; break; } case 1: { updem1 = 0.12; break; } case 2: { updem1 = 0.14; break; } case 3: { updem1 = 0.17; break; } case 4: { updem1 = 0.19; break; } case 5: { updem1 = 0.21; break; } case 6: { updem1 = 0.23; break; } case 7: { updem1 = 0.26; break; } case 8: { updem1 = 0.28; break; } case 9: { updem1 = 0.3; break; } }
                        switch (skillindex) { case 0: { updem2 = 0; break; } case 1: { updem2 = 0; break; } case 2: { updem2 = 1; break; } case 3: { updem2 = 1; break; } case 4: { updem2 = 1; break; } case 5: { updem2 = 1; break; } case 6: { updem2 = 1; break; } case 7: { updem2 = 1; break; } case 8: { updem2 = 1; break; } case 9: { updem2 = 2; break; } }

                        if (slider.Value > attime)
                            return;
                        if (ischecked)
                        {
                            if (innight)
                            {
                                for (int i = 0; i < 9; i++)
                                    skilluphit[i] *= updem1 + 1;
                            }
                            // shield = updem1;
                            // renewtank();
                        }
                        fairy[fairyindex].cd = cdtime;
                        cb9.ToolTip = "(夜)视野+" + updem2 + "格,全体命中提升" + updem1 * 100 + "%,消耗点数" + point + ",cd" + turncd + "回合";
                        break;
                    }
                case 900117:
                    {
                        cb9.ToolTip = "kirarin~☆";
                        break;
                    }
                default:
                    break;
            }
        }

        private void cbIsdoublecard_Click(object sender, RoutedEventArgs e)
        {
            bool ischecked = cbIsdoublecard.IsChecked == true;
            if (ischecked)
            {
                gun[111].doublecard = true; gun[92].doublecard = true; gun[91].doublecard = true; gun[59].doublecard = true;
            }
            else
            {
                gun[111].doublecard = false; gun[92].doublecard = false; gun[91].doublecard = false; gun[59].doublecard = false;
            }
            for (int i = 0; i < 9; i++)
                renewindex(i);
        }

        private void ResizePressed(object sender, MouseEventArgs e)
        {
            FrameworkElement element = sender as FrameworkElement;
            ResizeDirection direction = (ResizeDirection)Enum.Parse(typeof(ResizeDirection), element.Name.Replace("Resize", ""));

            this.Cursor = cursors[direction];

            if (e.LeftButton == MouseButtonState.Pressed)
                ResizeWindow(direction);
        }

        private void ResizeWindow(ResizeDirection direction)
        {
            SendMessage(_HwndSource.Handle, WM_SYSCOMMAND, (IntPtr)(61440 + direction), IntPtr.Zero);
        }


        private const int WM_SYSCOMMAND = 0x112;
        private HwndSource _HwndSource;

        private Dictionary<ResizeDirection, Cursor> cursors = new Dictionary<ResizeDirection, Cursor>
{
{ResizeDirection.Top, Cursors.SizeNS
    },
{ResizeDirection.Bottom, Cursors.SizeNS
},
{ResizeDirection.Left, Cursors.SizeWE},
{ResizeDirection.Right, Cursors.SizeWE},
{ResizeDirection.TopLeft, Cursors.SizeNWSE},
{ResizeDirection.BottomRight, Cursors.SizeNWSE},
{ResizeDirection.TopRight, Cursors.SizeNESW},
{ResizeDirection.BottomLeft, Cursors.SizeNESW}
};

        enum ResizeDirection
        {
            Left = 1,
            Right = 2,
            Top = 3,
            TopLeft = 4,
            TopRight = 5,
            Bottom = 6,
            BottomLeft = 7,
            BottomRight = 8,
        }

        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        private static extern IntPtr SendMessage(IntPtr hWnd, uint Msg, IntPtr wParam, IntPtr lParam);

        protected override void OnSourceInitialized(EventArgs e)
        {
            base.OnSourceInitialized(e);
            HwndSource hwndSource = PresentationSource.FromVisual(this) as HwndSource;
            if (hwndSource != null)
            {
                hwndSource.AddHook(new HwndSourceHook(this.WndProc));
            }
        }

        //protected virtual IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
        //{
        //    return IntPtr.Zero;
        //}

        private const int WM_NCHITTEST = 0x0084;
        private readonly int agWidth = 12; //拐角宽度
        private readonly int bThickness = 4; // 边框宽度
        private Point mousePoint = new Point(); //鼠标坐标

        public enum HitTest : int
        {
            HTERROR = -2,
            HTTRANSPARENT = -1,
            HTNOWHERE = 0,
            HTCLIENT = 1,
            HTCAPTION = 2,
            HTSYSMENU = 3,
            HTGROWBOX = 4,
            HTSIZE = HTGROWBOX,
            HTMENU = 5,
            HTHSCROLL = 6,
            HTVSCROLL = 7,
            HTMINBUTTON = 8,
            HTMAXBUTTON = 9,
            HTLEFT = 10,
            HTRIGHT = 11,
            HTTOP = 12,
            HTTOPLEFT = 13,
            HTTOPRIGHT = 14,
            HTBOTTOM = 15,
            HTBOTTOMLEFT = 16,
            HTBOTTOMRIGHT = 17,
            HTBORDER = 18,
            HTREDUCE = HTMINBUTTON,
            HTZOOM = HTMAXBUTTON,
            HTSIZEFIRST = HTLEFT,
            HTSIZELAST = HTBOTTOMRIGHT,
            HTOBJECT = 19,
            HTCLOSE = 20,
            HTHELP = 21,
        }
        protected virtual IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
        {
            switch (msg)
            {
                case WM_NCHITTEST:
                    this.mousePoint.X = (lParam.ToInt32() & 0xFFFF);
                    this.mousePoint.Y = (lParam.ToInt32() >> 16);
                    // Fix HiDPI incorrect mouse position problem
                    this.mousePoint = this.PointFromScreen(this.mousePoint);

                    //  测试鼠标位置
                    #region 测试鼠标位置

                    // 窗口左上角
                    if (this.mousePoint.Y - this.Top <= this.agWidth
                       && this.mousePoint.X - this.Left <= this.agWidth)
                    {
                        handled = true;
                        return new IntPtr((int)HitTest.HTTOPLEFT);
                    }
                    // 窗口左下角    
                    else if (this.ActualHeight + this.Top - this.mousePoint.Y <= this.agWidth
                       && this.mousePoint.X - this.Left <= this.agWidth)
                    {
                        handled = true;
                        return new IntPtr((int)HitTest.HTBOTTOMLEFT);
                    }
                    // 窗口右上角
                    else if (this.mousePoint.Y - this.Top <= this.agWidth
                       && this.ActualWidth + this.Left - this.mousePoint.X <= this.agWidth)
                    {
                        handled = true;
                        return new IntPtr((int)HitTest.HTTOPRIGHT);
                    }
                    // 窗口右下角
                    else if (this.ActualWidth + this.Left - this.mousePoint.X <= this.agWidth
                       && this.ActualHeight + this.Top - this.mousePoint.Y <= this.agWidth)
                    {
                        handled = true;
                        return new IntPtr((int)HitTest.HTBOTTOMRIGHT);
                    }
                    // 窗口左侧
                    else if (this.mousePoint.X - this.Left <= this.bThickness)
                    {
                        handled = true;
                        return new IntPtr((int)HitTest.HTLEFT);
                    }
                    // 窗口右侧
                    else if (this.ActualWidth + this.Left - this.mousePoint.X <= this.bThickness)
                    {
                        handled = true;
                        return new IntPtr((int)HitTest.HTRIGHT);
                    }
                    // 窗口上方
                    else if (this.mousePoint.Y - this.Top <= this.bThickness)
                    {
                        handled = true;
                        return new IntPtr((int)HitTest.HTTOP);
                    }
                    // 窗口下方
                    else if (this.ActualHeight + this.Top - this.mousePoint.Y <= this.bThickness)
                    {
                        handled = true;
                        return new IntPtr((int)HitTest.HTBOTTOM);
                    }
                    //else // 窗口移动
                    //{
                    //    handled = true;
                    //    return new IntPtr((int)HitTest.HTCAPTION);
                    //}
                    else
                    { return IntPtr.Zero; }
                    #endregion
            }
            return IntPtr.Zero;
        }

        private void minimize_Click(object sender, RoutedEventArgs e)
        {
            this.WindowState = WindowState.Minimized;
        }

        private void maxmize_Click(object sender, RoutedEventArgs e)
        {
            if (this.WindowState == WindowState.Maximized)
            {
                this.WindowState = WindowState.Normal;
            }
            else
            {
                this.WindowState = WindowState.Maximized;
            }
        }
    }
}
